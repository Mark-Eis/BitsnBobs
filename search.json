[{"path":"https://mark-eis.github.io/BitsnBobs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 BitsnBobs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/articles/Using-wizard.html","id":"someday-this-might-be-real-r-markdown","dir":"Articles","previous_headings":"","what":"Someday this might be real R markdown…","title":"Using wizard","text":"now, can simply copy gist , paste R run.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Eisler. Author, maintainer, copyright holder.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eisler M (2024). BitsnBobs: General Bits Bobs Code. R package version 0.0.6.00016, https://mark-eis.github.io/BitsnBobs/.","code":"@Manual{,   title = {BitsnBobs: For General Bits and Bobs of Code},   author = {Mark Eisler},   year = {2024},   note = {R package version 0.0.6.00016},   url = {https://mark-eis.github.io/BitsnBobs/}, }"},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/index.html","id":"r-package-for-general-bits-and-bobs-of-code","dir":"","previous_headings":"","what":"R Package For General Bits and Bobs of Code","title":"For General Bits and Bobs of Code","text":"Author: Mark C. Eisler eMail: Mark.Eisler@bristol.ac.uk ORCID = 0000-0001-6843-3345","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"For General Bits and Bobs of Code","text":"can install development version BitsnBobs GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Mark-Eis/BitsnBobs\")"},{"path":"https://mark-eis.github.io/BitsnBobs/index.html","id":"bitsnbobs-package-description-","dir":"","previous_headings":"Installation","what":"BitsnBobs Package Description: –","title":"For General Bits and Bobs of Code","text":"BitsnBobs R package using functions: – as_decdeg(), as_degminsec(), as_rostido(), boxcox3(), browse(), cat_names(), cc_rate(), cohens_kappa(), const(), cor_coef.test(), count_lgl(), data_wizard(), decdeg(), degminsec(), design_effect(), detective(), detective<-(), eff_rate(), endstop(), endstop_data(), facet_histo(), fct_to_num(), formul_pwrseq(), get_amortint(), get_amortval(), iterate(), j(), j2eff_rate(), known_s3generics(), kurt(), kurt.test(), kurtosis(), kurtosis.test(), kwd_cols(), kwd_cols<-(), latlon(), latlon_dd(), lf(), lgl_cols(), list_lgl(), logit(), ls_all(), marker(), method_info(), most_recent_fname(), nom_rate(), opt_bc(), phi_coef(), phi_coef.test(), power_seq(), print_all(), print_lf(), prob_from_logit(), read_triodos_csv(), recursive(), remplacer(), retriever(), revmat(), rm_objects(), s3_in_namespace(), s3debug(), s3mag7(), sample_size(), skew(),skew.test(), skewness(), skewness.test(), split_to_cols(), split_to_rows(), starsig(), sum_lgl(), triodos_fname(), wizard(); infix operators: – op-min-max; datasets: – heights, litter_sizes, starwars2 starwars3.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"For General Bits and Bobs of Code","text":"basic example shows use BitsnBobs functions: –","code":"library(BitsnBobs) ## Use dplyr::starwars data starwars <- dplyr::starwars  ## Extract and sort unique values of the \"homeworld\" column in the starwars data starwars |> wizard(homeworld) ## …and paste them into a character string. starwars |> wizard(homeworld, \", \")  ## Find strings containing the pattern \"Darth\" in the starwars \"name\" column starwars |> detective(name, .pattern = \"Darth\") ## Modify strings containing the pattern \"Darth\" but not \"Vader\" in the \"name\" column starwars |> detective(name, .pattern = \"Darth\", .exclude = \"Vader\") <- \"Darth The First\" ## Find strings containing the pattern \"Darth\" in the revised data in descending order starwars |> detective(name, .pattern = \"Darth\", .arrange_by = desc(name))  ## Create a \"retrieval\" function for the starwars data frame using \"name\" as index retrieve_starwars <- retriever(starwars, name) ## … and retrieve selected columns for row(s) specified using the \"name\" index retrieve_starwars(\"Luke Skywalker\", ends_with(\"color\"), homeworld)  ## Create a replacement function using \"name\" as index `replace_at_name<-` <- remplacer(name) ## Replace the value in the \"homeworld\" column for row(s) specified using the \"name\" index starwars |> replace_at_name(\"Luke Skywalker\", homeworld) <- \"Mimiland\" ## Retrieve selected columns for row(s) specified using the \"name\" index retrieve_starwars(\"Luke Skywalker\", ends_with(\"color\"), homeworld)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/BitsnBobs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BitsnBobs: For General Bits and Bobs of Code — BitsnBobs-package","title":"BitsnBobs: For General Bits and Bobs of Code — BitsnBobs-package","text":"using functions: as_decdeg(), as_degmin(), as_degminsec(), as_rostido(), boxcox3(), browse(), cat_names(), cc_rate(), cohens_kappa(), const(), coord(), cor_coef.test(), count_lgl(), data_wizard(), decdeg(), degminsec(), design_effect(), detective(), detective()<-, eff_rate(), endstop(), endstop_data(), facet_histo(), fct_to_num(), formul_pwrseq(), get_amortint(), get_amortval(), iterate(), j(), j2eff_rate(), known_s3generics(), kurt(), kurt.test(), kurtosis(), kurtosis.test(), kwd_cols(), kwd_cols()<-, latlon(), latlon_dd(), lf(), lgl_cols(), list_lgl(), logit(), ls_all(), marker(), method_info(), most_recent_fname(), nom_rate(), opt_bc(), phi_coef(), phi_coef.test(), power_seq(), print_all(), print_lf(), prob_from_logit(), read_triodos_csv(), recursive(), remplacer(), retriever(), revmat(), rm_objects(), s3_in_namespace(), s3debug(), s3mag7(), sample_size(), skew(), skew.test(), skewness(), skewness.test(), split_to_cols(), split_to_rows(), starsig(), sum_lgl(), swapsign(), triodos_fname(), wizard(); infix operators: op-min-max; datasets: heights, litter_sizes, starwars2 starwars3.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/BitsnBobs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BitsnBobs: For General Bits and Bobs of Code — BitsnBobs-package","text":"Maintainer: Mark Eisler Mark.Eisler@bristol.ac.uk (ORCID) [copyright holder]","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Import_Rostido.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Rostido Bank Account Transaction Data — Import_Rostido","title":"Import Rostido Bank Account Transaction Data — Import_Rostido","text":"Functions facilitate reading CSV transaction files downloaded Rostido website. rostido_fname() returns name Rostido Bank CSV format transactions file character string. most_recent_fname() finds Rostido Bank CSV format transactions file incorporating recent date within name among specified folder. read_rostido_csv() reads CSV format transactions file downloaded Rostido website returns contents data frame.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Import_Rostido.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Rostido Bank Account Transaction Data — Import_Rostido","text":"","code":"rostido_fname(.date, filepath = NULL)  most_recent_fname(   filepath = NULL,   trydate = Sys.Date(),   earliest = as.Date(\"2024-02-01\"),   fun = rostido_fname )  read_rostido_csv(filename)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Import_Rostido.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Rostido Bank Account Transaction Data — Import_Rostido","text":".date Date object, date incorporated filename string. filepath character string, path folder conduct file search; default NULL. trydate Date object, recent date within file name start search; default Sys.Date(). earliest Date object, earliest date within file name beyond search discontinued; default .Date(\"2024-02-01\"). fun function, used incorporate .date filename search string; default rostido_fname. filename character string, name CSV file read.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Import_Rostido.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Rostido Bank Account Transaction Data — Import_Rostido","text":"rostido_fname() character string representing filename incorporating date, form \"Downloadyyyymmdd.csv\", attributes \"date\", \"Date\" object, \"filepath\", corresponding argument name (supplied). most_recent_fname() object comprising character string representing filename incorporating date specified fun. read_rostido_csv() CSV transaction file data formatted Rostido Bank, dataframe.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Import_Rostido.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Rostido Bank Account Transaction Data — Import_Rostido","text":"rostido_fname() returns character string representing name CSV format transactions file downloaded Rostido website concatenating strings \"Download\", date form \"yyyymmdd\" extension \".csv\" e.g., \"Download20240401.csv\" most_recent_fname() searches current folder folder specified using filepath filename incorporating date specified .date argument, typically current date obtained using default Sys.Date(). filename incorporates date specified fun, typically default rostido_fname() . file exists, filenames incorporating earlier dates searched successively either corresponding file found search discontinued upon reaching date specified earliest argument. read_rostido_csv() reads transactions CSV file downloaded Rostido website using read.csv() returns contents data frame. file read specified filename argument located folder specified argument's \"filepath\" attribute one, otherwise current working directory.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Import_Rostido.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Rostido Bank Account Transaction Data — Import_Rostido","text":"","code":"dnldpath <- \"~/Rostido Bank/Downloads\"     rostido_fname(Sys.Date()) #> [1] \"Download20241022.csv\" #> attr(,\"date\") #> [1] \"2024-10-22\"     ## __________________________    ## Current account 55545372     rostido_fname(Sys.Date(), file.path(dnldpath, 55545372)) #> [1] \"Download20241022.csv\" #> attr(,\"date\") #> [1] \"2024-10-22\" #> attr(,\"filepath\") #> [1] \"~/Rostido Bank/Downloads/55545372\"  if (FALSE) { # \\dontrun{    (file.path(dnldpath, 55545372) |>        most_recent_fname() |>        read_rostido_csv()) } # }     ## __________________________    ## Savings account 55596784     rostido_fname(Sys.Date(), file.path(dnldpath, 55596784)) #> [1] \"Download20241022.csv\" #> attr(,\"date\") #> [1] \"2024-10-22\" #> attr(,\"filepath\") #> [1] \"~/Rostido Bank/Downloads/55596784\"  if (FALSE) { # \\dontrun{    (savacc <- file.path(dnldpath, 55596784) |>        most_recent_fname() |>        read_rostido_csv()) } # }"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Manage_Rostido.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage Rostido Bank Account Transaction Data — Manage_Rostido","title":"Manage Rostido Bank Account Transaction Data — Manage_Rostido","text":"Functions facilitate formatting combining CSV transaction data downloaded Rostido website. as_rostido() reformats data frame containing downloaded Rostido Bank transaction data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Manage_Rostido.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage Rostido Bank Account Transaction Data — Manage_Rostido","text":"","code":"as_rostido(data, dateformat = \"%d/%m/%Y\")  # S3 method for class 'rostido' rbind(..., .arrange_by = NULL)  # S3 method for class 'rostido' print(x, ..., .include = NULL, maxwidth = 65L)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Manage_Rostido.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage Rostido Bank Account Transaction Data — Manage_Rostido","text":"data data frame, returned read_rostido_csv(). dateformat character string, passed format argument .Date(); default \"%d/%m/%Y\". ... rbind() S3 method class \"rostido\", data frames  class \"rostido\" combined. print() S3 method class \"rostido\", arguments passed methods. .arrange_by list expressions containing names column(s) sorting rows combined \"rostido\" data frame e.g., exprs(Account, Code, desc(Amount)). Use desc() sort variable descending order; default NULL. x object used select method. .include <tidy-select> names variables included excluded printing \"rostido\" data frame containing Rostido Bank transaction data; default NULL. maxwidth integer, maximum width printing Description field; default 65L.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Manage_Rostido.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage Rostido Bank Account Transaction Data — Manage_Rostido","text":"as_rostido() object class \"rostido\" inheriting \"data.frame\" containing reformatted Rostido Bank transaction data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Manage_Rostido.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage Rostido Bank Account Transaction Data — Manage_Rostido","text":"as_rostido() reformats data frame containing Rostido Bank transaction data obtained using read_rostido_csv(), replacing character strings Date field \"Date\" objects, Amount Balance fields numeric values. default, .arrange_by  argument specified, rbind() S3 method class \"rostido\" sorts results Date, AccountNo Code. default, .include argument specified, print() S3 method class \"rostido\" excludes SortCode ChequeNo columns printed output.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/Manage_Rostido.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage Rostido Bank Account Transaction Data — Manage_Rostido","text":"","code":"if (FALSE) { # \\dontrun{    dnldpath <- \"~/Rostido Bank/Downloads\"     ## __________________________    ## Current account 55545372     (curacc <- file.path(dnldpath, 55545372) |>        most_recent_fname() |>        read_rostido_csv() |>        as_rostido())     ## __________________________    ## Savings account 55596784     (savacc <- file.path(dnldpath, 55596784) |>        most_recent_fname() |>        read_rostido_csv() |>        as_rostido())     savacc |> print(.include = c(Description, Code, Amount, Balance))     ## ______________    ## All accounts     rbind(curacc, savacc) ## default sort is by Date, AccountNo and Code.    rbind(curacc, savacc, .arrange_by = exprs(AccountNo, Date, Code))    rbind(curacc, savacc, .arrange_by = exprs(desc(Amount)))    rbind(curacc, savacc, .arrange_by = exprs(Code, desc(Amount)))     rm(curacc, savacc) } # }"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3Gen_Meth.html","id":null,"dir":"Reference","previous_headings":"","what":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","title":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","text":"known_s3generics() tabulates \"known\" S3 generic functions. s3_in_namespace() tabulates S3 methods loaded namespace.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3Gen_Meth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","text":"","code":"known_s3generics(.arrange_by = across(Generic:Namespace))  s3_in_namespace(namespace, .arrange_by = Method)  # S3 method for class 'info_df' print(x, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3Gen_Meth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","text":".arrange_by <data-masking> names columns functions ordering results using syntax dplyr arrange(). Use desc() sort variable descending order. namespace (unquoted) name namespace.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3Gen_Meth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","text":"data.frame class attributes c(\"info_df\", \"catapult\", \"data.frame\") columns Generic Namespace known_s3generics(), Generic, Class Method s3_in_namespace(), follows: - Generic character, generic function name. Namespace character, namespace environment generic \"primitive\" case primitive (internally implemented) generics. Class character, class method. Method character, full method name.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3Gen_Meth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","text":"known_s3generics() returns data.frame \"known\" S3 generic functions, based two character vectors base package namespace, namely .knownS3Generics .S3PrimitiveGenerics. s3_in_namespace() returns data.frame S3 methods loaded namespace.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3Gen_Meth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","text":"R Internals: 1.2.2 Namespaces.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3Gen_Meth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tables of S3 Generic Functions and Methods — S3Gen_Meth","text":"","code":"known_s3generics() #> _______________________________ #> \"Known\" S3 Generic Functions: - #>  #>  Generic        Namespace   #>  AIC            stats       #>  Complex        base        #>  Math           base        #>  Ops            base        #>  Summary        base        #>  add1           stats       #>  anova          stats       #>  anyNA          \"primitive\" #>  as.call        \"primitive\" #>  as.character   \"primitive\" #>  as.character   base        #>  as.complex     \"primitive\" #>  as.data.frame  base        #>  as.double      \"primitive\" #>  as.environment \"primitive\" #>  as.environment base        #>  as.integer     \"primitive\" #>  as.logical     \"primitive\" #>  as.matrix      base        #>  as.numeric     \"primitive\" #>  as.raw         \"primitive\" #>  as.vector      base        #>  biplot         stats       #>  c              \"primitive\" #>  cbind          base        #>  coef           stats       #>  confint        stats       #>  contour        graphics    #>  deviance       stats       #>  df.residual    stats       #>  dim            \"primitive\" #>  dim<-          \"primitive\" #>  dimnames       \"primitive\" #>  dimnames<-     \"primitive\" #>  drop1          stats       #>  edit           utils       #>  extractAIC     stats       #>  fitted         stats       #>  formula        stats       #>  hist           graphics    #>  identify       graphics    #>  image          graphics    #>  is.array       \"primitive\" #>  is.finite      \"primitive\" #>  is.infinite    \"primitive\" #>  is.matrix      \"primitive\" #>  is.na          \"primitive\" #>  is.nan         \"primitive\" #>  is.numeric     \"primitive\" #>  labels         base        #>  length         \"primitive\" #>  length<-       \"primitive\" #>  levels<-       \"primitive\" #>  lines          graphics    #>  log10          \"primitive\" #>  log2           \"primitive\" #>  logLik         stats       #>  matrixOps      base        #>  model.frame    stats       #>  model.matrix   stats       #>  names          \"primitive\" #>  names<-        \"primitive\" #>  pairs          graphics    #>  plot           base        #>  points         graphics    #>  predict        stats       #>  print          base        #>  profile        stats       #>  qqnorm         stats       #>  rbind          base        #>  rep            \"primitive\" #>  rep            base        #>  residuals      stats       #>  se.contrast    stats       #>  seq            base        #>  seq.int        \"primitive\" #>  seq.int        base        #>  sequence       base        #>  solve          base        #>  str            utils       #>  summary        base        #>  t              base        #>  terms          stats       #>  text           graphics    #>  update         stats       #>  vcov           stats       #>  xtfrm          \"primitive\" known_s3generics(.arrange_by = across(Namespace:Generic)) #> _______________________________ #> \"Known\" S3 Generic Functions: - #>  #>  Generic        Namespace   #>  anyNA          \"primitive\" #>  as.call        \"primitive\" #>  as.character   \"primitive\" #>  as.complex     \"primitive\" #>  as.double      \"primitive\" #>  as.environment \"primitive\" #>  as.integer     \"primitive\" #>  as.logical     \"primitive\" #>  as.numeric     \"primitive\" #>  as.raw         \"primitive\" #>  c              \"primitive\" #>  dim            \"primitive\" #>  dim<-          \"primitive\" #>  dimnames       \"primitive\" #>  dimnames<-     \"primitive\" #>  is.array       \"primitive\" #>  is.finite      \"primitive\" #>  is.infinite    \"primitive\" #>  is.matrix      \"primitive\" #>  is.na          \"primitive\" #>  is.nan         \"primitive\" #>  is.numeric     \"primitive\" #>  length         \"primitive\" #>  length<-       \"primitive\" #>  levels<-       \"primitive\" #>  log10          \"primitive\" #>  log2           \"primitive\" #>  names          \"primitive\" #>  names<-        \"primitive\" #>  rep            \"primitive\" #>  seq.int        \"primitive\" #>  xtfrm          \"primitive\" #>  Complex        base        #>  Math           base        #>  Ops            base        #>  Summary        base        #>  as.character   base        #>  as.data.frame  base        #>  as.environment base        #>  as.matrix      base        #>  as.vector      base        #>  cbind          base        #>  labels         base        #>  matrixOps      base        #>  plot           base        #>  print          base        #>  rbind          base        #>  rep            base        #>  seq            base        #>  seq.int        base        #>  sequence       base        #>  solve          base        #>  summary        base        #>  t              base        #>  contour        graphics    #>  hist           graphics    #>  identify       graphics    #>  image          graphics    #>  lines          graphics    #>  pairs          graphics    #>  points         graphics    #>  text           graphics    #>  AIC            stats       #>  add1           stats       #>  anova          stats       #>  biplot         stats       #>  coef           stats       #>  confint        stats       #>  deviance       stats       #>  df.residual    stats       #>  drop1          stats       #>  extractAIC     stats       #>  fitted         stats       #>  formula        stats       #>  logLik         stats       #>  model.frame    stats       #>  model.matrix   stats       #>  predict        stats       #>  profile        stats       #>  qqnorm         stats       #>  residuals      stats       #>  se.contrast    stats       #>  terms          stats       #>  update         stats       #>  vcov           stats       #>  edit           utils       #>  str            utils        s3_in_namespace(BitsnBobs) #> ____________________________________ #> S3 Methods in Namespace BitsnBobs: - #>  #>  Generic       Class           #>  as__decdeg    latnlon         #>  as__degmin    decdeg          #>  as__degmin    degmin          #>  as__degmin    degminsec       #>  as__degmin    latnlon         #>  as__degminsec decdeg          #>  as__degminsec degmin          #>  as__degminsec degminsec       #>  as__degminsec latnlon         #>  sum_degminsec coord           #>  sum_degminsec decdeg          #>  sum_degminsec degmin          #>  sum_degminsec degminsec       #>  sum_minsec    coord           #>  sum_minsec    decdeg          #>  sum_minsec    degmin          #>  sum_minsec    degminsec       #>  sum_sec       coord           #>  sum_sec       decdeg          #>  sum_sec       degmin          #>  sum_sec       degminsec       #>  as.double     coord           #>  as__decdeg    coord           #>  as__decdeg    numeric         #>  as__degmin    coord           #>  as__degmin    numeric         #>  as__degminsec coord           #>  as__degminsec numeric         #>  as_decdeg     decdeg          #>  as_decdeg     default         #>  as_decdeg     degminsec       #>  as_decdeg     latlon          #>  as_decdeg     list            #>  as_degminsec  decdeg          #>  as_degminsec  default         #>  as_degminsec  degminsec       #>  as_degminsec  latlon          #>  as_degminsec  list            #>  as.double     decdeg          #>  as.double     degmin          #>  as.double     degminsec       #>  format        coord           #>  format        coordpart       #>  format        degxdec         #>  format        degxint         #>  format        latnlon         #>  format        minxdec         #>  format        minxint         #>  format        secxdec         #>  latlon        default         #>  latlon        matrix          #>  print         catapult        #>  print         coord           #>  print         decdeg          #>  print         degminsec       #>  print         info_df         #>  print         latlon          #>  print         latnlon         #>  print         rostido         #>  print_all     MethodsFunction #>  print_all     cohens_kappa    #>  print_all     data.frame      #>  print_all     default         #>  print_all     htest           #>  print_all     tbl             #>  print_all     tbl_df          #>  rbind         rostido         #>  as__decdeg    latnlon         #>  as__decdeg    latnlon         #>  as__degmin    decdeg          #>  as__degmin    decdeg          #>  as__degmin    degmin          #>  as__degmin    degmin          #>  as__degmin    degminsec       #>  as__degmin    degminsec       #>  as__degmin    latnlon         #>  as__degmin    latnlon         #>  as__degminsec decdeg          #>  as__degminsec decdeg          #>  as__degminsec degmin          #>  as__degminsec degmin          #>  as__degminsec degminsec       #>  as__degminsec degminsec       #>  as__degminsec latnlon         #>  as__degminsec latnlon         #>  sum_degminsec coord           #>  sum_minsec    coord           #>  sum_sec       coord           #>  sum_degminsec coord           #>  sum_minsec    coord           #>  sum_sec       coord           #>  sum_degminsec decdeg          #>  sum_degminsec decdeg          #>  sum_degminsec degmin          #>  sum_degminsec degmin          #>  sum_degminsec degminsec       #>  sum_degminsec degminsec       #>  sum_minsec    decdeg          #>  sum_sec       decdeg          #>  sum_sec       degmin          #>  sum_minsec    decdeg          #>  sum_sec       decdeg          #>  sum_sec       degmin          #>  sum_minsec    degmin          #>  sum_minsec    degmin          #>  sum_minsec    degminsec       #>  sum_minsec    degminsec       #>  sum_sec       degminsec       #>  sum_sec       degminsec       #>  Method                                                                                                                                               #>  as__decdeg.latnlon                                                                                                                                   #>  as__degmin.decdeg                                                                                                                                    #>  as__degmin.degmin                                                                                                                                    #>  as__degmin.degminsec                                                                                                                                 #>  as__degmin.latnlon                                                                                                                                   #>  as__degminsec.decdeg                                                                                                                                 #>  as__degminsec.degmin                                                                                                                                 #>  as__degminsec.degminsec                                                                                                                              #>  as__degminsec.latnlon                                                                                                                                #>  sum_degminsec.coord                                                                                                                                  #>  sum_degminsec.decdeg                                                                                                                                 #>  sum_degminsec.degmin                                                                                                                                 #>  sum_degminsec.degminsec                                                                                                                              #>  sum_minsec.coord                                                                                                                                     #>  sum_minsec.decdeg                                                                                                                                    #>  sum_minsec.degmin                                                                                                                                    #>  sum_minsec.degminsec                                                                                                                                 #>  sum_sec.coord                                                                                                                                        #>  sum_sec.decdeg                                                                                                                                       #>  sum_sec.degmin                                                                                                                                       #>  sum_sec.degminsec                                                                                                                                    #>  as.double.coord                                                                                                                                      #>  as__decdeg.coord                                                                                                                                     #>  as__decdeg.numeric                                                                                                                                   #>  as__degmin.coord                                                                                                                                     #>  as__degmin.numeric                                                                                                                                   #>  as__degminsec.coord                                                                                                                                  #>  as__degminsec.numeric                                                                                                                                #>  as_decdeg.decdeg                                                                                                                                     #>  as_decdeg.default                                                                                                                                    #>  as_decdeg.degminsec                                                                                                                                  #>  as_decdeg.latlon                                                                                                                                     #>  as_decdeg.list                                                                                                                                       #>  as_degminsec.decdeg                                                                                                                                  #>  as_degminsec.default                                                                                                                                 #>  as_degminsec.degminsec                                                                                                                               #>  as_degminsec.latlon                                                                                                                                  #>  as_degminsec.list                                                                                                                                    #>  as.double.decdeg                                                                                                                                     #>  as.double.degmin                                                                                                                                     #>  as.double.degminsec                                                                                                                                  #>  format.coord                                                                                                                                         #>  format.coordpart                                                                                                                                     #>  format.degxdec                                                                                                                                       #>  format.degxint                                                                                                                                       #>  format.latnlon                                                                                                                                       #>  format.minxdec                                                                                                                                       #>  format.minxint                                                                                                                                       #>  format.secxdec                                                                                                                                       #>  latlon.default                                                                                                                                       #>  latlon.matrix                                                                                                                                        #>  print.catapult                                                                                                                                       #>  print.coord                                                                                                                                          #>  print.decdeg                                                                                                                                         #>  print.degminsec                                                                                                                                      #>  print.info_df                                                                                                                                        #>  print.latlon                                                                                                                                         #>  print.latnlon                                                                                                                                        #>  print.rostido                                                                                                                                        #>  print_all.MethodsFunction                                                                                                                            #>  print_all.cohens_kappa                                                                                                                               #>  print_all.data.frame                                                                                                                                 #>  print_all.default                                                                                                                                    #>  print_all.htest                                                                                                                                      #>  print_all.tbl                                                                                                                                        #>  print_all.tbl_df                                                                                                                                     #>  rbind.rostido                                                                                                                                        #>  function (object, ...) , {,     structure(lapply(object, as__decdeg), class = \"latnlon\"), }                                                          #>  function (object, ...) , {,     structure(lapply(object, as__decdeg), class = \"latnlon\"), }                                                          #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg%/%1 * 100 + deg%%1 * 60), }                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg%/%1 * 100 + deg%%1 * 60), }                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min), }                                                             #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min), }                                                             #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min + sec/60), }                                                    #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min + sec/60), }                                                    #>  function (object, ...) , {,     structure(lapply(object, as__degmin), class = \"latnlon\"), }                                                          #>  function (object, ...) , {,     structure(lapply(object, as__degmin), class = \"latnlon\"), }                                                          #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg%/%1 * 100 + (deg%%1 * 60)%/%1) * 100 + ,         (deg%%1 * 60)%%1 * 60), } #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg%/%1 * 100 + (deg%%1 * 60)%/%1) * 100 + ,         (deg%%1 * 60)%%1 * 60), } #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min%/%1) * 100 + min%%1 * 60), }                                   #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min%/%1) * 100 + min%%1 * 60), }                                   #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min) * 100 + sec), }                                               #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min) * 100 + sec), }                                               #>  function (object, ...) , {,     structure(lapply(object, as__degminsec), class = \"latnlon\"), }                                                       #>  function (object, ...) , {,     structure(lapply(object, as__degminsec), class = \"latnlon\"), }                                                       #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60), }                                                                #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60), }                                                                #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60 + sec/3600), }                                                     #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60 + sec/3600), }                                                     #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, min), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, min), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, min + sec/60), }                                                                #>  function (object, ...) , {,     check_dots_empty(),     with(object, min + sec/60), }                                                                #>  function (object, ...) , {,     check_dots_empty(),     with(object, sec), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, sec), }                                                                         s3_in_namespace(BitsnBobs, .arrange_by = across(Class:Generic)) #> ____________________________________ #> S3 Methods in Namespace BitsnBobs: - #>  #>  Generic       Class           #>  as__decdeg    latnlon         #>  as__decdeg    latnlon         #>  as__decdeg    latnlon         #>  as__degmin    latnlon         #>  as__degmin    latnlon         #>  as__degmin    latnlon         #>  as__degminsec latnlon         #>  as__degminsec latnlon         #>  as__degminsec latnlon         #>  format        latnlon         #>  print         latnlon         #>  as__degmin    decdeg          #>  as__degmin    decdeg          #>  as__degmin    decdeg          #>  as__degminsec decdeg          #>  as__degminsec decdeg          #>  as__degminsec decdeg          #>  sum_degminsec decdeg          #>  sum_degminsec decdeg          #>  sum_degminsec decdeg          #>  sum_minsec    decdeg          #>  sum_minsec    decdeg          #>  sum_minsec    decdeg          #>  sum_sec       decdeg          #>  sum_sec       decdeg          #>  sum_sec       decdeg          #>  as.double     decdeg          #>  as_decdeg     decdeg          #>  as_degminsec  decdeg          #>  print         decdeg          #>  as__degmin    degmin          #>  as__degmin    degmin          #>  as__degmin    degmin          #>  as__degminsec degmin          #>  as__degminsec degmin          #>  as__degminsec degmin          #>  sum_degminsec degmin          #>  sum_degminsec degmin          #>  sum_degminsec degmin          #>  sum_minsec    degmin          #>  sum_minsec    degmin          #>  sum_minsec    degmin          #>  sum_sec       degmin          #>  sum_sec       degmin          #>  sum_sec       degmin          #>  as.double     degmin          #>  as__degmin    degminsec       #>  as__degmin    degminsec       #>  as__degmin    degminsec       #>  as__degminsec degminsec       #>  as__degminsec degminsec       #>  as__degminsec degminsec       #>  sum_degminsec degminsec       #>  sum_degminsec degminsec       #>  sum_degminsec degminsec       #>  sum_minsec    degminsec       #>  sum_minsec    degminsec       #>  sum_minsec    degminsec       #>  sum_sec       degminsec       #>  sum_sec       degminsec       #>  sum_sec       degminsec       #>  as.double     degminsec       #>  as_decdeg     degminsec       #>  as_degminsec  degminsec       #>  print         degminsec       #>  as__decdeg    coord           #>  as__degmin    coord           #>  as__degminsec coord           #>  sum_degminsec coord           #>  sum_degminsec coord           #>  sum_degminsec coord           #>  sum_minsec    coord           #>  sum_minsec    coord           #>  sum_minsec    coord           #>  sum_sec       coord           #>  sum_sec       coord           #>  sum_sec       coord           #>  as.double     coord           #>  format        coord           #>  print         coord           #>  as__decdeg    numeric         #>  as__degmin    numeric         #>  as__degminsec numeric         #>  as_decdeg     default         #>  as_degminsec  default         #>  latlon        default         #>  print_all     default         #>  as_decdeg     latlon          #>  as_degminsec  latlon          #>  print         latlon          #>  as_decdeg     list            #>  as_degminsec  list            #>  format        coordpart       #>  format        degxdec         #>  format        degxint         #>  format        minxdec         #>  format        minxint         #>  format        secxdec         #>  latlon        matrix          #>  print         catapult        #>  print         info_df         #>  print         rostido         #>  rbind         rostido         #>  print_all     MethodsFunction #>  print_all     cohens_kappa    #>  print_all     data.frame      #>  print_all     htest           #>  print_all     tbl             #>  print_all     tbl_df          #>  Method                                                                                                                                               #>  as__decdeg.latnlon                                                                                                                                   #>  function (object, ...) , {,     structure(lapply(object, as__decdeg), class = \"latnlon\"), }                                                          #>  function (object, ...) , {,     structure(lapply(object, as__decdeg), class = \"latnlon\"), }                                                          #>  as__degmin.latnlon                                                                                                                                   #>  function (object, ...) , {,     structure(lapply(object, as__degmin), class = \"latnlon\"), }                                                          #>  function (object, ...) , {,     structure(lapply(object, as__degmin), class = \"latnlon\"), }                                                          #>  as__degminsec.latnlon                                                                                                                                #>  function (object, ...) , {,     structure(lapply(object, as__degminsec), class = \"latnlon\"), }                                                       #>  function (object, ...) , {,     structure(lapply(object, as__degminsec), class = \"latnlon\"), }                                                       #>  format.latnlon                                                                                                                                       #>  print.latnlon                                                                                                                                        #>  as__degmin.decdeg                                                                                                                                    #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg%/%1 * 100 + deg%%1 * 60), }                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg%/%1 * 100 + deg%%1 * 60), }                                                 #>  as__degminsec.decdeg                                                                                                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg%/%1 * 100 + (deg%%1 * 60)%/%1) * 100 + ,         (deg%%1 * 60)%%1 * 60), } #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg%/%1 * 100 + (deg%%1 * 60)%/%1) * 100 + ,         (deg%%1 * 60)%%1 * 60), } #>  sum_degminsec.decdeg                                                                                                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg), }                                                                         #>  sum_minsec.decdeg                                                                                                                                    #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  sum_sec.decdeg                                                                                                                                       #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  as.double.decdeg                                                                                                                                     #>  as_decdeg.decdeg                                                                                                                                     #>  as_degminsec.decdeg                                                                                                                                  #>  print.decdeg                                                                                                                                         #>  as__degmin.degmin                                                                                                                                    #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min), }                                                             #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min), }                                                             #>  as__degminsec.degmin                                                                                                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min%/%1) * 100 + min%%1 * 60), }                                   #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min%/%1) * 100 + min%%1 * 60), }                                   #>  sum_degminsec.degmin                                                                                                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60), }                                                                #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60), }                                                                #>  sum_minsec.degmin                                                                                                                                    #>  function (object, ...) , {,     check_dots_empty(),     with(object, min), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, min), }                                                                         #>  sum_sec.degmin                                                                                                                                       #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  function (object, ...) , {,     check_dots_empty(),     0, }                                                                                         #>  as.double.degmin                                                                                                                                     #>  as__degmin.degminsec                                                                                                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min + sec/60), }                                                    #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg * 100 + min + sec/60), }                                                    #>  as__degminsec.degminsec                                                                                                                              #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min) * 100 + sec), }                                               #>  function (object, ...) , {,     check_dots_empty(),     with(object, (deg * 100 + min) * 100 + sec), }                                               #>  sum_degminsec.degminsec                                                                                                                              #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60 + sec/3600), }                                                     #>  function (object, ...) , {,     check_dots_empty(),     with(object, deg + min/60 + sec/3600), }                                                     #>  sum_minsec.degminsec                                                                                                                                 #>  function (object, ...) , {,     check_dots_empty(),     with(object, min + sec/60), }                                                                #>  function (object, ...) , {,     check_dots_empty(),     with(object, min + sec/60), }                                                                #>  sum_sec.degminsec                                                                                                                                    #>  function (object, ...) , {,     check_dots_empty(),     with(object, sec), }                                                                         #>  function (object, ...) , {,     check_dots_empty(),     with(object, sec), }                                                                         #>  as.double.degminsec                                                                                                                                  #>  as_decdeg.degminsec                                                                                                                                  #>  as_degminsec.degminsec                                                                                                                               #>  print.degminsec                                                                                                                                      #>  as__decdeg.coord                                                                                                                                     #>  as__degmin.coord                                                                                                                                     #>  as__degminsec.coord                                                                                                                                  #>  sum_degminsec.coord                                                                                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  sum_minsec.coord                                                                                                                                     #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  sum_sec.coord                                                                                                                                        #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  function (object, ...) , {,     check_dots_empty(),     as.numeric(NextMethod()), }                                                                  #>  as.double.coord                                                                                                                                      #>  format.coord                                                                                                                                         #>  print.coord                                                                                                                                          #>  as__decdeg.numeric                                                                                                                                   #>  as__degmin.numeric                                                                                                                                   #>  as__degminsec.numeric                                                                                                                                #>  as_decdeg.default                                                                                                                                    #>  as_degminsec.default                                                                                                                                 #>  latlon.default                                                                                                                                       #>  print_all.default                                                                                                                                    #>  as_decdeg.latlon                                                                                                                                     #>  as_degminsec.latlon                                                                                                                                  #>  print.latlon                                                                                                                                         #>  as_decdeg.list                                                                                                                                       #>  as_degminsec.list                                                                                                                                    #>  format.coordpart                                                                                                                                     #>  format.degxdec                                                                                                                                       #>  format.degxint                                                                                                                                       #>  format.minxdec                                                                                                                                       #>  format.minxint                                                                                                                                       #>  format.secxdec                                                                                                                                       #>  latlon.matrix                                                                                                                                        #>  print.catapult                                                                                                                                       #>  print.info_df                                                                                                                                        #>  print.rostido                                                                                                                                        #>  rbind.rostido                                                                                                                                        #>  print_all.MethodsFunction                                                                                                                            #>  print_all.cohens_kappa                                                                                                                               #>  print_all.data.frame                                                                                                                                 #>  print_all.htest                                                                                                                                      #>  print_all.tbl                                                                                                                                        #>  print_all.tbl_df                                                                                                                                      s3_in_namespace(utils) |> head(40) #> ________________________________ #> S3 Methods in Namespace utils: - #>  #>  Generic        Class                  Method                        #>  $              bibentry               $.bibentry                    #>  $              person                 $.person                      #>  $<-            bibentry               $<-.bibentry                  #>  $<-            citation               $<-.citation                  #>  $<-            person                 $<-.person                    #>  .AtNames       default                .AtNames.default              #>  .DollarNames   default                .DollarNames.default          #>  .DollarNames   environment            .DollarNames.environment      #>  .DollarNames   list                   .DollarNames.list             #>  Ops            roman                  Ops.roman                     #>  Summary        roman                  Summary.roman                 #>  [              bibentry               [.bibentry                    #>  [              getAnywhere            [.getAnywhere                 #>  [              news_db                [.news_db                     #>  [              person                 [.person                      #>  [              roman                  [.roman                       #>  [[             bibentry               [[.bibentry                   #>  [[             hashtab                [[.hashtab                    #>  [[             person                 [[.person                     #>  [[<-           hashtab                [[<-.hashtab                  #>  as.character   person                 as.character.person           #>  as.character   roman                  as.character.roman            #>  as.data.frame  bibentry               as.data.frame.bibentry        #>  as.data.frame  person                 as.data.frame.person          #>  as.environment hashtab                as.environment.hashtab        #>  as.person      default                as.person.default             #>  as.personList  default                as.personList.default         #>  as.personList  person                 as.personList.person          #>  c              bibentry               c.bibentry                    #>  c              person                 c.person                      #>  close          txtProgressBar         close.txtProgressBar          #>  edit           data.frame             edit.data.frame               #>  edit           default                edit.default                  #>  edit           matrix                 edit.matrix                   #>  edit           vignette               edit.vignette                 #>  format         MethodsFunction        format.MethodsFunction        #>  format         aspell                 format.aspell                 #>  format         aspell_inspect_context format.aspell_inspect_context #>  format         bibentry               format.bibentry               #>  format         citation               format.citation               s3_in_namespace(utils, .arrange_by = across(Class:Generic)) |> head(40) #> ________________________________ #> S3 Methods in Namespace utils: - #>  #>  Generic       Class                  Method                        #>  print         Bibtex                 print.Bibtex                  #>  str           Date                   str.Date                      #>  print         Latex                  print.Latex                   #>  format        MethodsFunction        format.MethodsFunction        #>  print         MethodsFunction        print.MethodsFunction         #>  str           POSIXt                 str.POSIXt                    #>  head          array                  head.array                    #>  tail          array                  tail.array                    #>  format        aspell                 format.aspell                 #>  print         aspell                 print.aspell                  #>  summary       aspell                 summary.aspell                #>  format        aspell_inspect_context format.aspell_inspect_context #>  print         aspell_inspect_context print.aspell_inspect_context  #>  $             bibentry               $.bibentry                    #>  $<-           bibentry               $<-.bibentry                  #>  [             bibentry               [.bibentry                    #>  [[            bibentry               [[.bibentry                   #>  as.data.frame bibentry               as.data.frame.bibentry        #>  c             bibentry               c.bibentry                    #>  format        bibentry               format.bibentry               #>  print         bibentry               print.bibentry                #>  rep           bibentry               rep.bibentry                  #>  sort          bibentry               sort.bibentry                 #>  toBibtex      bibentry               toBibtex.bibentry             #>  transform     bibentry               transform.bibentry            #>  unique        bibentry               unique.bibentry               #>  print         browseVignettes        print.browseVignettes         #>  print         changedFiles           print.changedFiles            #>  $<-           citation               $<-.citation                  #>  format        citation               format.citation               #>  print         citation               print.citation                #>  edit          data.frame             edit.data.frame               #>  head          data.frame             head.array                    #>  prompt        data.frame             prompt.data.frame             #>  stack         data.frame             stack.data.frame              #>  str           data.frame             str.data.frame                #>  tail          data.frame             tail.array                    #>  type.convert  data.frame             type.convert.data.frame       #>  unstack       data.frame             unstack.data.frame            #>  .AtNames      default                .AtNames.default"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3_Method_Debug.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Method Debugging Functions — S3_Method_Debug","title":"S3 Method Debugging Functions — S3_Method_Debug","text":"Functions intended use interactive mode within browser().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3_Method_Debug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Method Debugging Functions — S3_Method_Debug","text":"","code":"ls_all(all.names = TRUE, env = parent.frame(), ...)  s3mag7(env = parent.frame())  browse(fn, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3_Method_Debug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Method Debugging Functions — S3_Method_Debug","text":".names logical value.  TRUE,     object names returned.  FALSE, names begin     . omitted. env environment use listing available objects, equivalent name argument ls(); default parent.frame() .e., environment function called. ... additional arguments passed ls() fn(). fn function called “browser mode”.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3_Method_Debug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Method Debugging Functions — S3_Method_Debug","text":"character vector ls_all(); s3mag7(), named list containing following elements: - .Class .Class  character vector classes used find next method. NextMethod() adds attribute \"previous\" .Class giving .Class last used dispatch, shifts .Class along used dispatch. .Generic length-one character vector naming generic function current method. .GenericCallEnv environment call generic. .GenericDefEnv environment defining generic, used find methods registered generic. .Group generic group method belongs, applicable. .Method character vector (normally length one) naming method function. (functions generic group Ops, length two.) \"object\" .e., \"object\" comprising first argument call .Generic. .class2(\"object\") exact full character vector classes \"object\" used UseMethod().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3_Method_Debug.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 Method Debugging Functions — S3_Method_Debug","text":"ls_all() returns character vector giving names objects caller's environment including begin ‘⁠.⁠’, convenient shorthand ls(..names = TRUE), instance used within browser() interactive mode. Intended use debugging S3 method interactive mode browser(), s3mag7() returns named list seven ‘special’ objects S3 method dispatch environment, see Technical Details section UseMethod. browse() calls specified function fn \"browser\" mode suitable arguments provided .... base function debug generally preferable.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/S3_Method_Debug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Method Debugging Functions — S3_Method_Debug","text":"","code":"fn <- function() {     m <- \"Mimi\"     p <- \"Poley\"     .b <- \"Blossom\"     ls_all() }  fn() #> ls(all.names = TRUE) : - #> \t[1] \".b\" \"m\"  \"p\"  #>   rm(fn)  ## To run this in browser() interactive mode from R Console, select lines between ##   \"## Not run:\" and \"## End(Not run)\" and hit [shift][enter]  if (FALSE) { # \\dontrun{  ## Two-by-two table for diagnostic test comparison (twobytwo <- matrix(     c(31, 12, 4, 58),     nrow = 2,      dimnames = rep(list(c(\"+ve\", \"-ve\")), 2) |>         setNames(c(\"Test1\", \"Test2\")) ))  browse(print_all, cohens_kappa(twobytwo)) s where ls_all() s where ls_all() s where ls_all() s where ls_all() s3mag7() f  rm(twobytwo) } # }"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/as__degminsec.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Coordinate Format — as__degminsec","title":"Convert Coordinate Format — as__degminsec","text":"Convert format geographic GPS coordinates decimal degrees, degrees minutes degrees, minutes seconds.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/as__degminsec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Coordinate Format — as__degminsec","text":"","code":"as__degminsec(object, ...)  # S3 method for class 'numeric' as__degminsec(   object,   ...,   .fmt = c(\"decdeg\", \"degmin\", \"degminsec\"),   .as_numeric = FALSE )  as__degmin(object, ...)  # S3 method for class 'numeric' as__degmin(   object,   ...,   .fmt = c(\"decdeg\", \"degmin\", \"degminsec\"),   .as_numeric = FALSE )  as__decdeg(object, ...)  # S3 method for class 'numeric' as__decdeg(   object,   ...,   .fmt = c(\"decdeg\", \"degmin\", \"degminsec\"),   .as_numeric = FALSE )"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/as__degminsec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Coordinate Format — as__degminsec","text":"object \"coord\" object numeric vector. ... arguments passed methods. .fmt character string indicating format object; must one \"decdeg\" (default), \"degmin\" \"degminsec\". .as_numeric logical, signifying whether return \"coord\" object numeric value; default FALSE, former.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/as__degminsec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Coordinate Format — as__degminsec","text":"\"coord\" object numeric value desired format.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/as__degminsec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Coordinate Format — as__degminsec","text":"Converts coordinates represented decimal degrees (\"decdeg\"), integer degrees decimal minutes (\"degmin\"), integer degrees, integer minutes, decimal seconds (\"degminsec\"). Works individual \"coord\" objects returned using coord() function, vectors simple numeric values. See \"coord\" details.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/as__degminsec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Coordinate Format — as__degminsec","text":"","code":"## `\"coord\"` objects in decimal degrees; in degrees and minutes; ##   and in degrees, minutes, and seconds (coord_dd <- coord(51.507765, \"decdeg\")) #>   51.507765° (coord_dm <- coord(5130.4659, \"degmin\")) #>  51°30.4659' (N/E) (coord_dms <- coord(513027.95, \"degminsec\")) #>  51°30'27.95\" (N/E)  ## as__degminsec coord_dd |> as__degminsec() #>  51°30'27.95\" (N/E) coord_dm |> as__degminsec() #>  51°30'27.95\" (N/E)  ## as__degmin coord_dd |> as__degmin() #>  51°30.4659' (N/E) coord_dms |> as__degmin() #>  51°30.4658' (N/E)  ## as__decdeg coord_dm |> as__decdeg() #>   51.507765° coord_dms |> as__decdeg() #>   51.507764°  ## `\"latnlon\"` objects in decimal degrees; in degrees and minutes; ##   and in degrees, minutes, and seconds (latnlon_dd <- coord(c(51.507765, -0.127924), \"decdeg\", \"both\")) #>   51.507765° lat    -0.127924° lon (latnlon_dm <- coord(c(5130.4659, -7.6754), \"degmin\", \"both\")) #>  51°30.4659' N    0°07.6754' W (latnlon_dms <- coord(c(513027.95, -740.53), \"degminsec\", \"both\")) #>  51°30'27.95\" N    0°07'40.53\" W  ## as__degminsec latnlon_dd |> as__degminsec() #>  51°30'27.95\" N    0°07'40.53\" W latnlon_dm |> as__degminsec() #>  51°30'27.95\" N    0°07'40.52\" W  ## as__degmin latnlon_dd |> as__degmin() #>  51°30.4659' N    0°07.6754' W latnlon_dms |> as__degmin() #>  51°30.4658' N    0°07.6755' W  ## as__decdeg latnlon_dm |> as__decdeg() #>   51.507765° lat    -0.127923° lon latnlon_dms |> as__decdeg() #>   51.507764° lat    -0.127925° lon  ## Numeric vectors in decimal degrees; in degrees and minutes; ##   and in degrees, minutes, and seconds (num_dd <- c(51.507765, 49.546210, 48.107232, 38.889494, 0.000000, -37.111740, -53.104781)) #> [1]  51.50776  49.54621  48.10723  38.88949   0.00000 -37.11174 -53.10478 (num_dm <- c(5130.4659, 4932.7726, 4806.4339, 3853.3696, 0.0000, -3706.7044, -5306.2869)) #> [1]  5130.466  4932.773  4806.434  3853.370     0.000 -3706.704 -5306.287 (num_dms <- c(513027.95, 493246.36, 480626.04, 385322.18, 0.00, -370642.26, -530617.21)) #> [1]  513028.0  493246.4  480626.0  385322.2       0.0 -370642.3 -530617.2  ## as__degminsec num_dd |> as__degminsec(.fmt = \"decdeg\") #> [[1]] #>  51°30'27.95\" (N/E) #> [[2]] #>  49°32'46.36\" (N/E) #> [[3]] #>  48°06'26.04\" (N/E) #> [[4]] #>  38°53'22.18\" (N/E) #> [[5]] #>   0°00'00.00\" (N/E) #> [[6]] #>  37°06'42.26\" (W/S) #> [[7]] #>  53°06'17.21\" (W/S) num_dm |> as__degminsec(.fmt = \"degmin\") #> [[1]] #>  51°30'27.95\" (N/E) #> [[2]] #>  49°32'46.36\" (N/E) #> [[3]] #>  48°06'26.03\" (N/E) #> [[4]] #>  38°53'22.18\" (N/E) #> [[5]] #>   0°00'00.00\" (N/E) #> [[6]] #>  37°06'42.26\" (W/S) #> [[7]] #>  53°06'17.21\" (W/S)  num_dd |> as__degminsec(.fmt = \"decdeg\", .as_numeric = TRUE) #> [1]  513028.0  493246.4  480626.0  385322.2       0.0 -370642.3 -530617.2 num_dm |> as__degminsec(.fmt = \"degmin\", .as_numeric = TRUE) #> [1]  513028.0  493246.4  480626.0  385322.2       0.0 -370642.3 -530617.2  ## as__degmin num_dd |> as__degmin(.fmt = \"decdeg\") #> [[1]] #>  51°30.4659' (N/E) #> [[2]] #>  49°32.7726' (N/E) #> [[3]] #>  48°06.4339' (N/E) #> [[4]] #>  38°53.3696' (N/E) #> [[5]] #>   0°00.0000' (N/E) #> [[6]] #>  37°06.7044' (W/S) #> [[7]] #>  53°06.2869' (W/S) num_dms |> as__degmin(.fmt = \"degminsec\") #> [[1]] #>  51°30.4658' (N/E) #> [[2]] #>  49°32.7727' (N/E) #> [[3]] #>  48°06.4340' (N/E) #> [[4]] #>  38°53.3697' (N/E) #> [[5]] #>   0°00.0000' (N/E) #> [[6]] #>  37°06.7043' (W/S) #> [[7]] #>  53°06.2868' (W/S)  num_dd |> as__degmin(.fmt = \"decdeg\", .as_numeric = TRUE) #> [1]  5130.466  4932.773  4806.434  3853.370     0.000 -3706.704 -5306.287 num_dms |> as__degmin(.fmt = \"degminsec\", .as_numeric = TRUE) #> [1]  5130.466  4932.773  4806.434  3853.370     0.000 -3706.704 -5306.287  ## as__decdeg num_dm |> as__decdeg(.fmt = \"degmin\") #> [[1]] #>   51.507765° #> [[2]] #>   49.546210° #> [[3]] #>   48.107232° #> [[4]] #>   38.889493° #> [[5]] #>    0.000000° #> [[6]] #>  -37.111740° #> [[7]] #>  -53.104782° num_dms |> as__decdeg(.fmt = \"degminsec\") #> [[1]] #>   51.507764° #> [[2]] #>   49.546211° #> [[3]] #>   48.107233° #> [[4]] #>   38.889494° #> [[5]] #>    0.000000° #> [[6]] #>  -37.111739° #> [[7]] #>  -53.104781°  num_dm |> as__decdeg(.fmt = \"degmin\", .as_numeric = TRUE) #> [1]  51.50776  49.54621  48.10723  38.88949   0.00000 -37.11174 -53.10478 num_dms |> as__decdeg(.fmt = \"degminsec\", .as_numeric = TRUE) #> [1]  51.50776  49.54621  48.10723  38.88949   0.00000 -37.11174 -53.10478  rm(coord_dd, coord_dm, coord_dms, num_dd, num_dm, num_dms)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/boxcox3.html","id":null,"dir":"Reference","previous_headings":"","what":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","title":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","text":"Function factory create functions take \\(\\lambda\\) argument performing Box-Cox transformation given dataset. Adapted Wickham (2019) Section 10.4.4 Exercises.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/boxcox3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","text":"","code":"boxcox3(x, labile_data = TRUE)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/boxcox3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","text":"x numeric vector containing data transformed. labile_data logical. TRUE, data represented function environment quosure. FALSE, copy data saved function environment. Default TRUE.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/boxcox3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","text":"Returns function taking single argument \\(\\lambda\\) performs Box-Cox transformation data x.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/boxcox3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","text":"numeric vector containing data transformed provided argument 'function factory', returns function performing Box-Cox transformation data given value \\(\\lambda\\). Box-Cox transformation takes following form: - \\(\\lambda \\ne 0\\) $$y(\\lambda) = \\displaystyle \\frac{y^\\lambda - 1}{\\lambda}$$ \\(\\lambda = 0\\) $$y(\\lambda) = \\log(y)$$ labile_data TRUE, data represented boxcox3() function environment quosure, functions returned automatically refer current version data original environment, usually calling environment .e., typically necessarily global environment. labile_data FALSE, returned functions refer copy data saved function environment time execution boxcox3(), reflect subsequent changes original data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/boxcox3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","text":"Wickham, Hadley (2019) Advanced R 2nd edition. CRC Press. adv-r.hadley.nz","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/boxcox3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'Function Factory' for Box-Cox Transformation of Data — boxcox3","text":"","code":"## Create skewed data (d <- rlnorm(20)) #>  [1] 0.24658623 1.29087083 0.08739968 0.99444420 1.86181668 3.15318044 #>  [7] 0.16173151 0.78088663 0.78333126 0.75374177 0.57481939 1.87570022 #> [13] 7.88549421 0.19573582 1.66933768 0.15520453 0.59332527 0.94875763 #> [19] 1.72115632 0.40088734 ## Calculate skewness using BitsnBobs::skew() d |> skew() #> [1] 3.16996 ## Box-Cox function for these data bc_func <- boxcox3(d)  ## Box-Cox transform data with various values of lambda bc_func(-1) #>  [1]  -3.055376440   0.225329154 -10.441688958  -0.005586835   0.462890192 #>  [6]   0.682859887  -5.183086998  -0.280595625  -0.276599123  -0.326714319 #> [11]  -0.739676861   0.466865767   0.873184867  -4.108927002   0.400960027 #> [16]  -5.443110962  -0.685416164  -0.054009971   0.418995248  -1.494466372 bc_func(0) #>  [1] -1.400043517  0.255317055 -2.437263611 -0.005571287  0.621552721 #>  [6]  1.148411606 -1.821817661 -0.247325302 -0.244199607 -0.282705449 #> [11] -0.553699384  0.628982042  2.065024895 -1.630989402  0.512426950 #> [16] -1.863011492 -0.522012515 -0.052601910  0.542996343 -0.914074827 bc_func(1) #>  [1] -0.753413767  0.290870833 -0.912600316 -0.005555796  0.861816681 #>  [6]  2.153180437 -0.838268489 -0.219113372 -0.216668740 -0.246258229 #> [11] -0.425180605  0.875700223  6.885494207 -0.804264183  0.669337681 #> [16] -0.844795471 -0.406674730 -0.051242372  0.721156318 -0.599112655 bc_func(2) #>  [1] -0.469597615  0.333173754 -0.496180648 -0.005540362  1.233180677 #>  [6]  4.471273434 -0.486921459 -0.195108037 -0.193196068 -0.215936672 #> [11] -0.334791332  1.259125664 30.590509448 -0.480843745  0.893344147 #> [16] -0.487955777 -0.323982562 -0.049929481  0.981189535 -0.419644668 ## bc_func(0) same as log(d) identical(bc_func(0), log(d)) #> [1] TRUE  seq(-3, 3, 1) |>                         ## Create a sequence from -3 to 3   set_names(\\(x) paste(\"lambda\", x)) |>  ## Name sequence vector using rlang::set_names()   print_lf() |>                          ## Print with line feed   lapply(bc_func) |>                     ## Box-Cox transform data using each lambda value   print_lf() |>                          ##   in sequence and print the named list   map_dbl(skewness) |>                   ## Calculate skewness for each element of the list   print_lf() |>                          ##   and print the numeric vector   abs() |>                               ## Absolute skewness...   which.min()                            ##   ...which lambda gives minimum? #> lambda -3 lambda -2 lambda -1  lambda 0  lambda 1  lambda 2  lambda 3  #>        -3        -2        -1         0         1         2         3  #>  #> $`lambda -3` #>  [1] -2.189835e+01  1.783695e-01 -4.989524e+02 -5.618106e-03  2.816836e-01 #>  [6]  3.227009e-01 -7.846097e+01 -3.666937e-01 -3.601601e-01 -4.450813e-01 #> [11] -1.421697e+00  2.828220e-01  3.326535e-01 -4.411626e+01  2.616784e-01 #> [16] -8.882575e+01 -1.262547e+00 -5.697956e-02  2.679574e-01 -4.840491e+00 #>  #> $`lambda -2` #>  [1]  -7.723039034   0.199942540 -64.956123103  -0.005602442   0.355756527 #>  [6]   0.449711074 -18.615282412  -0.319962578  -0.314852660  -0.380085442 #> [11]  -1.013237790   0.357883945   0.491958961 -12.550567555   0.320575555 #> [16] -20.256839433  -0.920313822  -0.055468509   0.331216739  -2.611181240 #>  #> $`lambda -1` #>  [1]  -3.055376440   0.225329154 -10.441688958  -0.005586835   0.462890192 #>  [6]   0.682859887  -5.183086998  -0.280595625  -0.276599123  -0.326714319 #> [11]  -0.739676861   0.466865767   0.873184867  -4.108927002   0.400960027 #> [16]  -5.443110962  -0.685416164  -0.054009971   0.418995248  -1.494466372 #>  #> $`lambda 0` #>  [1] -1.400043517  0.255317055 -2.437263611 -0.005571287  0.621552721 #>  [6]  1.148411606 -1.821817661 -0.247325302 -0.244199607 -0.282705449 #> [11] -0.553699384  0.628982042  2.065024895 -1.630989402  0.512426950 #> [16] -1.863011492 -0.522012515 -0.052601910  0.542996343 -0.914074827 #>  #> $`lambda 1` #>  [1] -0.753413767  0.290870833 -0.912600316 -0.005555796  0.861816681 #>  [6]  2.153180437 -0.838268489 -0.219113372 -0.216668740 -0.246258229 #> [11] -0.425180605  0.875700223  6.885494207 -0.804264183  0.669337681 #> [16] -0.844795471 -0.406674730 -0.051242372  0.721156318 -0.599112655 #>  #> $`lambda 2` #>  [1] -0.469597615  0.333173754 -0.496180648 -0.005540362  1.233180677 #>  [6]  4.471273434 -0.486921459 -0.195108037 -0.193196068 -0.215936672 #> [11] -0.334791332  1.259125664 30.590509448 -0.480843745  0.893344147 #> [16] -0.487955777 -0.323982562 -0.049929481  0.981189535 -0.419644668 #>  #> $`lambda 3` #>  [1]  -0.328335460   0.383679798  -0.333110793  -0.005524986   1.817909798 #>  [6]  10.116881427  -0.331923192  -0.174609295  -0.173113926  -0.190593069 #> [11]  -0.270023236   1.866394933 163.109354770  -0.330833623   1.217307926 #> [16]  -0.332087121  -0.263709604  -0.048661441   1.366239150  -0.311857710 #>  #>  #>   lambda -3   lambda -2   lambda -1    lambda 0    lambda 1    lambda 2  #> -4.08779986 -3.36358910 -2.00565188 -0.04650773  3.16995968  4.27696463  #>    lambda 3  #>  4.44244689  #>  #> lambda 0  #>        4   ## Usually, lambda 0 has least absolute skewness as data were sampled from lognormal distribution  rm(d, bc_func)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cat_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate First Names and Surnames in a Data Frame into Delimiter-Separated Character Strings — cat_names","title":"Concatenate First Names and Surnames in a Data Frame into Delimiter-Separated Character Strings — cat_names","text":"Concatenates first names surnames contained individual columns data frame. resulting first name-surname pairs combined one delimiter-separated character strings basis selected grouping variables.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cat_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate First Names and Surnames in a Data Frame into Delimiter-Separated Character Strings — cat_names","text":"","code":"cat_names(   data,   firstname = Firstname,   surname = Surname,   ...,   .delimiter = \", \" )"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cat_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate First Names and Surnames in a Data Frame into Delimiter-Separated Character Strings — cat_names","text":"data data frame, data frame extension (e.g. tibble). firstname quoted name column containing first names; default Firstname. surname quoted name column containing surnames; default Surname. ... <tidy-select> names variables group . .delimiter character string separate first name-surname pairs, see collapse argument paste; default \", \".","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cat_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate First Names and Surnames in a Data Frame into Delimiter-Separated Character Strings — cat_names","text":"tibble data frame containing column Names individual columns grouping variable.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cat_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concatenate First Names and Surnames in a Data Frame into Delimiter-Separated Character Strings — cat_names","text":"number first name-surname pairs data concatenated single string one grouping variables selected using .... Grouping variables .data selected using ... argument <tidy-select> syntax package dplyr, including use selection helpers. default, name pairs within string separated using commas otherwise using .delimiter, provided.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cat_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate First Names and Surnames in a Data Frame into Delimiter-Separated Character Strings — cat_names","text":"","code":"starwars2 ## Has name column of original starwars split into Firstname and Surname #> # A tibble: 63 × 12 #>    Firstname Surname     height  mass hair_color skin_color eye_color birth_year #>    <chr>     <chr>        <int> <dbl> <chr>      <chr>      <chr>          <dbl> #>  1 Luke      Skywalker      172    77 blond      fair       blue            19   #>  2 Darth     Vader          202   136 none       white      yellow          41.9 #>  3 Leia      Organa         150    49 brown      light      brown           19   #>  4 Owen      Lars           178   120 brown, gr… light      blue            52   #>  5 Beru      Whitesun L…    165    75 brown      light      blue            47   #>  6 Biggs     Darklighter    183    84 black      light      brown           24   #>  7 Obi-Wan   Kenobi         182    77 auburn, w… fair       blue-gray       57   #>  8 Anakin    Skywalker      188    84 blond      fair       blue            41.9 #>  9 Wilhuff   Tarkin         180    NA auburn, g… fair       blue            64   #> 10 Han       Solo           180    80 brown      fair       brown           29   #> # ℹ 53 more rows #> # ℹ 4 more variables: sex <chr>, gender <chr>, homeworld <chr>, species <chr>  starwars2 |>   cat_names(Firstname, Surname, homeworld) |>   print_all() #> # A tibble: 38 × 2 #>    homeworld      Names                                                          #>    <chr>          <chr>                                                          #>  1 Alderaan       Leia Organa, Bail Prestor Organa, Raymus Antilles              #>  2 Aleen Minor    Ratts Tyerel                                                   #>  3 Bestine IV     Jek Tono Porkins                                               #>  4 Cato Neimoidia Nute Gunray                                                    #>  5 Champala       Mas Amedda                                                     #>  6 Chandrila      Mon Mothma                                                     #>  7 Concord Dawn   Jango Fett                                                     #>  8 Corellia       Han Solo, Wedge Antilles                                       #>  9 Coruscant      Finis Valorum, Adi Gallia, Jocasta Nu                          #> 10 Dathomir       Darth Maul                                                     #> 11 Dorin          Plo Koon                                                       #> 12 Endor          Wicket Systri Warrick                                          #> 13 Eriadu         Wilhuff Tarkin                                                 #> 14 Geonosis       Poggle the Lesser                                              #> 15 Glee Anselm    Kit Fisto                                                      #> 16 Haruun Kal     Mace Windu                                                     #> 17 Iktotch        Saesee Tiin                                                    #> 18 Iridonia       Eeth Koth                                                      #> 19 Kamino         Boba Fett, Lama Su, Taun We                                    #> 20 Mirial         Luminara Unduli, Barriss Offee                                 #> 21 Muunilinst     San Hill                                                       #> 22 Naboo          Padmé Amidala, Jar Jar Binks, Roos Tarpals, Rugor Nass, Ric O… #> 23 Nal Hutta      Jabba Desilijic Tiure                                          #> 24 Ojom           Dexter Jettster                                                #> 25 Quermia        Yarael Poof                                                    #> 26 Ryloth         Bib Fortuna, Ayla Secura                                       #> 27 Shili          Shaak Ti                                                       #> 28 Skako          Wat Tambor                                                     #> 29 Socorro        Lando Calrissian                                               #> 30 Stewjon        Obi-Wan Kenobi                                                 #> 31 Sullust        Nien Nunb                                                      #> 32 Tatooine       Luke Skywalker, Darth Vader, Owen Lars, Beru Whitesun Lars, B… #> 33 Tund           Ben Quadinaros                                                 #> 34 Umbara         Sly Moore                                                      #> 35 Utapau         Tion Medon                                                     #> 36 Vulpter        Dud Bolt                                                       #> 37 Zolan          Zam Wesell                                                     #> 38 NA             Arvel Crynyd, Qui-Gon Jinn, Poe Dameron, Captain Phasma         starwars2 |>   cat_names(,, species, .delimiter = \"; \") |>   print_all() #> # A tibble: 27 × 2 #>    species    Names                                                              #>    <chr>      <chr>                                                              #>  1 Aleena     Ratts Tyerel                                                       #>  2 Besalisk   Dexter Jettster                                                    #>  3 Chagrian   Mas Amedda                                                         #>  4 Clawdite   Zam Wesell                                                         #>  5 Ewok       Wicket Systri Warrick                                              #>  6 Geonosian  Poggle the Lesser                                                  #>  7 Gungan     Jar Jar Binks; Roos Tarpals; Rugor Nass                            #>  8 Human      Luke Skywalker; Darth Vader; Leia Organa; Owen Lars; Beru Whitesu… #>  9 Hutt       Jabba Desilijic Tiure                                              #> 10 Iktotchi   Saesee Tiin                                                        #> 11 Kaminoan   Lama Su; Taun We                                                   #> 12 Kel Dor    Plo Koon                                                           #> 13 Mirialan   Luminara Unduli; Barriss Offee                                     #> 14 Muun       San Hill                                                           #> 15 Nautolan   Kit Fisto                                                          #> 16 Neimodian  Nute Gunray                                                        #> 17 Pau'an     Tion Medon                                                         #> 18 Quermian   Yarael Poof                                                        #> 19 Skakoan    Wat Tambor                                                         #> 20 Sullustan  Nien Nunb                                                          #> 21 Tholothian Adi Gallia                                                         #> 22 Togruta    Shaak Ti                                                           #> 23 Toong      Ben Quadinaros                                                     #> 24 Twi'lek    Bib Fortuna; Ayla Secura                                           #> 25 Vulptereen Dud Bolt                                                           #> 26 Zabrak     Darth Maul; Eeth Koth                                              #> 27 NA         Jek Tono Porkins; Gregar Typho; Sly Moore                           starwars2 |>   cat_names(,, homeworld, species) |>   print_all() #> # A tibble: 42 × 3 #>    homeworld      species    Names                                               #>    <chr>          <chr>      <chr>                                               #>  1 Alderaan       Human      Leia Organa, Bail Prestor Organa, Raymus Antilles   #>  2 Aleen Minor    Aleena     Ratts Tyerel                                        #>  3 Bestine IV     NA         Jek Tono Porkins                                    #>  4 Cato Neimoidia Neimodian  Nute Gunray                                         #>  5 Champala       Chagrian   Mas Amedda                                          #>  6 Chandrila      Human      Mon Mothma                                          #>  7 Concord Dawn   Human      Jango Fett                                          #>  8 Corellia       Human      Han Solo, Wedge Antilles                            #>  9 Coruscant      Human      Finis Valorum, Jocasta Nu                           #> 10 Coruscant      Tholothian Adi Gallia                                          #> 11 Dathomir       Zabrak     Darth Maul                                          #> 12 Dorin          Kel Dor    Plo Koon                                            #> 13 Endor          Ewok       Wicket Systri Warrick                               #> 14 Eriadu         Human      Wilhuff Tarkin                                      #> 15 Geonosis       Geonosian  Poggle the Lesser                                   #> 16 Glee Anselm    Nautolan   Kit Fisto                                           #> 17 Haruun Kal     Human      Mace Windu                                          #> 18 Iktotch        Iktotchi   Saesee Tiin                                         #> 19 Iridonia       Zabrak     Eeth Koth                                           #> 20 Kamino         Human      Boba Fett                                           #> 21 Kamino         Kaminoan   Lama Su, Taun We                                    #> 22 Mirial         Mirialan   Luminara Unduli, Barriss Offee                      #> 23 Muunilinst     Muun       San Hill                                            #> 24 Naboo          Gungan     Jar Jar Binks, Roos Tarpals, Rugor Nass             #> 25 Naboo          Human      Padmé Amidala, Ric Olié, Quarsh Panaka              #> 26 Naboo          NA         Gregar Typho                                        #> 27 Nal Hutta      Hutt       Jabba Desilijic Tiure                               #> 28 Ojom           Besalisk   Dexter Jettster                                     #> 29 Quermia        Quermian   Yarael Poof                                         #> 30 Ryloth         Twi'lek    Bib Fortuna, Ayla Secura                            #> 31 Shili          Togruta    Shaak Ti                                            #> 32 Skako          Skakoan    Wat Tambor                                          #> 33 Socorro        Human      Lando Calrissian                                    #> 34 Stewjon        Human      Obi-Wan Kenobi                                      #> 35 Sullust        Sullustan  Nien Nunb                                           #> 36 Tatooine       Human      Luke Skywalker, Darth Vader, Owen Lars, Beru White… #> 37 Tund           Toong      Ben Quadinaros                                      #> 38 Umbara         NA         Sly Moore                                           #> 39 Utapau         Pau'an     Tion Medon                                          #> 40 Vulpter        Vulptereen Dud Bolt                                            #> 41 Zolan          Clawdite   Zam Wesell                                          #> 42 NA             Human      Arvel Crynyd, Qui-Gon Jinn, Poe Dameron, Captain P…"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/catapult.html","id":null,"dir":"Reference","previous_headings":"","what":"Catapult Class for Consistent Printing — catapult","title":"Catapult Class for Consistent Printing — catapult","text":"Creates object class \"catapult\" built-title string used printing.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/catapult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catapult Class for Consistent Printing — catapult","text":"","code":"catapult(object = vector(), lead = \"Catapult\", revert = FALSE, ...)  # S3 method for class 'catapult' print(x, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/catapult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catapult Class for Consistent Printing — catapult","text":"object Object converted \"catapult\" class. lead character string giving title printed. revert logical indicating whether \"revert\" attribute set TRUE FALSE. default, FALSE, corresponding print method print.catapult() invoke print methods underlying inherited object; TRUE, print.catapult() return calling function printing lead. ... additional named arguments forwarded print methods classes inherited object, example required formatting printing data frame. x object used select method.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/catapult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catapult Class for Consistent Printing — catapult","text":"object class \"catapult\" inheriting class(es) object.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/catapult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Catapult Class for Consistent Printing — catapult","text":"catapult() converts object class \"catapult\", inheriting existing class(es).","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/catapult.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Catapult Class for Consistent Printing — catapult","text":"Deprecated, use instead ParaAnita announce().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/catapult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Catapult Class for Consistent Printing — catapult","text":"","code":"catapult() #> ___________ #> Catapult: - #>  #> logical(0) (cpt <- catapult(\"x\", lead = \"Lorem ipsum dolor sit amet\")) #> _____________________________ #> Lorem ipsum dolor sit amet: - #>  #> [1] \"x\" .class2(cpt) #> [1] \"catapult\"  \"character\" attr(cpt, \"revert\") #> [1] FALSE  (cpt <- catapult(\"x\", lead = \"Lorem ipsum dolor sit amet\", TRUE)) #> _____________________________ #> Lorem ipsum dolor sit amet: - #>  .class2(cpt) #> [1] \"catapult\"  \"character\" attr(cpt, \"revert\") #> [1] TRUE  rm(cpt)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"Cohen's kappa measures agreement two raters (diagnostic tests) classify N items C mutually exclusive categories, typically two categories case diagnostic tests. print_all() class \"cohens_kappa\" first prints standard htest output, matrices observed expected numbers marginal sums, lastly numbers proportions observations agreeing.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"","code":"cohens_kappa(x, se_method = c(\"Fleiss\", \"Cohen\"), conf.level = 0.95)  # S3 method for class 'cohens_kappa' print_all(x, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"x square matrix containing observations two raters results two diagnostic tests. se_method character string specifying method calculating standard error; must one \"Fleiss\" (default), \"Cohen\". can specify just initial letter. conf.level confidence level required; default 0.95. ... arguments passed methods.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"list classes \"cohens_kappa\" \"htest\", containing following components: - statistic \\(\\kappa\\), kappa coefficient. parameter total number observations. conf.int confidence interval \\(\\kappa\\) (95% specified level). estimate number agreements observed number expected chance. stderr standard error \\(\\kappa\\). observed observed counts. expected expected counts null hypothesis zero agreement. data.name character string giving name data. method character string \"Cohen's kappa coefficient agreement\" standard error method used.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"Cohen's kappa coefficient given : - $$\\displaystyle \\kappa = \\frac{p_{o}-p_{e}}{1-p_{e}}$$ \\(p_{o}\\) proportion observations agreement \\(p_{e}\\) proportion observations expected agree chance. Cohen's (1960) original approximation standard error \\(\\kappa\\) given : - $$\\displaystyle se = \\sqrt{\\frac{p_{o}(1-p_{o})}{n(1-p_{e})^{2}}}$$ Output returned cohens_kappa() maybe printed using print_all() provide additional information, see examples.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"Professor Joseph Fleiss et al. (1979) observed: Many human endeavors cursed repeated failures final success achieved. scaling Mount Everest one example. discovery Northwest Passage second. derivation correct standard error kappa third. Coding Fleiss et al. (1979) standard error method R endeavour similarly cursed!","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"Cohen, J. (1960). coefficient agreement nominal scales. Educ Psychol Meas, 20, 37–46. doi:10.1177/001316446002000104 . Fleiss, J.L., Nee, J.C., & Landis, J.R. (1979). Large sample variance kappa case different sets raters. Psychol Bull, 86(5), 974–977. https://doi.org/10.1037/0033-2909.86.5.974 doi:10.1037/0033-2909.86.5.974 .","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cohens_kappa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cohen's Kappa Coefficient of Agreement for Nominal Scales — cohens_kappa","text":"","code":"## Two-by-two table for diagnostic test comparison  (twobytwo <- matrix(c(31, 12, 4, 58), nrow = 2, dimnames = rep(list(c(\"+ve\", \"-ve\")), 2) |>                setNames(c(\"Test1\", \"Test2\"))              )) #>      Test2 #> Test1 +ve -ve #>   +ve  31   4 #>   -ve  12  58   (ck <- cohens_kappa(twobytwo)) #>  #> \tCohen's kappa coefficient of agreement (Fleiss stderr) #>  #> data:  twobytwo #> stderr = 0.073448, number of observations = 105 #> 95 percent confidence interval: #>  0.5317210 0.8196303 #> sample estimates: #>     kappa  #> 0.6756757  #>    ck |> print_all()    #>  #> \tCohen's kappa coefficient of agreement (Fleiss stderr) #>  #> data:  twobytwo #> stderr = 0.073448, number of observations = 105 #> 95 percent confidence interval: #>  0.5317210 0.8196303 #> sample estimates: #>     kappa  #> 0.6756757  #>  #> Observed: - #>      Test2 #> Test1 +ve -ve Sum #>   +ve  31   4  35 #>   -ve  12  58  70 #>   Sum  43  62 105 #>  #> Expected: - #>      Test2 #> Test1      +ve      -ve Sum #>   +ve 14.33333 20.66667  35 #>   -ve 28.66667 41.33333  70 #>   Sum 43.00000 62.00000 105 #>  #> Number of agreements: - #> observed expected  #> 89.00000 55.66667  #>  #> Proportion in agreement: - #>  observed  expected  #> 0.8476190 0.5301587  #>    ## Example from Altman et al. (Statistics with Confidence 2nd Edn. 2008. ISBN:978-0-727-91375-3,  ## p.117), using, as they did, Cohen's approximation to the standard error.   (twobytwo <- matrix(c(32, 3, 6, 42), nrow = 2, dimnames = rep(list(c(\"Yes\", \"No\")), 2) |>                setNames(c(\"Parent\", \"Paediatrician\"))              )) #>       Paediatrician #> Parent Yes No #>    Yes  32  6 #>    No    3 42   cohens_kappa(twobytwo, se_method = \"Cohen\") |> print_all()    #>  #> \tCohen's kappa coefficient of agreement (Cohen stderr) #>  #> data:  twobytwo #> stderr = 0.069171, number of observations = 83 #> 95 percent confidence interval: #>  0.6446565 0.9158024 #> sample estimates: #>     kappa  #> 0.7802295  #>  #> Observed: - #>       Paediatrician #> Parent Yes No Sum #>    Yes  32  6  38 #>    No    3 42  45 #>    Sum  35 48  83 #>  #> Expected: - #>       Paediatrician #> Parent     Yes      No Sum #>    Yes 16.0241 21.9759  38 #>    No  18.9759 26.0241  45 #>    Sum 35.0000 48.0000  83 #>  #> Number of agreements: - #> observed expected  #> 74.00000 42.04819  #>  #> Proportion in agreement: - #>  observed  expected  #> 0.8915663 0.5066047  #>    ## Confidence interval using Fleiss et al.'s standard error for comparison  cohens_kappa(twobytwo, se_method = \"Fleiss\") |> _$conf.int #> [1] 0.6450640 0.9153949 #> attr(,\"conf.level\") #> [1] 0.95   ## Example with three categories from Cohen (1960).  (threebythree <- matrix(c(88, 10,  2, 14, 40,  6, 18, 10, 12), nrow = 3,                    dimnames = rep(list(c(\"Cat1\", \"Cat2\", \"Cat3\")), 2) |>                        setNames(c(\"Judge_B\", \"Judge_A\"))                  )) #>        Judge_A #> Judge_B Cat1 Cat2 Cat3 #>    Cat1   88   14   18 #>    Cat2   10   40   10 #>    Cat3    2    6   12   cohens_kappa(threebythree, se_method = \"Cohen\") |> print_all() #>  #> \tCohen's kappa coefficient of agreement (Cohen stderr) #>  #> data:  threebythree #> stderr = 0.054922, number of observations = 200 #> 95 percent confidence interval: #>  0.3838812 0.5991696 #> sample estimates: #>     kappa  #> 0.4915254  #>  #> Observed: - #>        Judge_A #> Judge_B Cat1 Cat2 Cat3 Sum #>    Cat1   88   14   18 120 #>    Cat2   10   40   10  60 #>    Cat3    2    6   12  20 #>    Sum   100   60   40 200 #>  #> Expected: - #>        Judge_A #> Judge_B Cat1 Cat2 Cat3 Sum #>    Cat1   60   36   24 120 #>    Cat2   30   18   12  60 #>    Cat3   10    6    4  20 #>    Sum   100   60   40 200 #>  #> Number of agreements: - #> observed expected  #>      140       82  #>  #> Proportion in agreement: - #> observed expected  #>     0.70     0.41  #>    ## Using Fleiss et al.'s standard error for comparison  cohens_kappa(threebythree, se_method = \"Fleiss\") |> _$conf.int #> [1] 0.3899498 0.5931011 #> attr(,\"conf.level\") #> [1] 0.95   rm(ck, threebythree, twobytwo)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/const.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Constant with Active Binding — const","title":"Make a Constant with Active Binding — const","text":"constant object value altered assigned.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/const.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Constant with Active Binding — const","text":"","code":"const(name, value)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/const.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Constant with Active Binding — const","text":"name symbol, name assigned constant. value valid R object, including function","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/const.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Constant with Active Binding — const","text":"See reference.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/const.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make a Constant with Active Binding — const","text":"Siqi Zhang, 2019: Make Constant R Active Binding.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/const.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Constant with Active Binding — const","text":"","code":"const(bar, \"irish\") bar #> [1] \"irish\" try(bar <- \"bavarian\") #> Error in try(bar <- \"bavarian\") :  #>   cannot change value of locked binding for 'bar'"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographic or GPS Coordinate — coord","title":"Geographic or GPS Coordinate — coord","text":"Geographic GPS coordinate class","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographic or GPS Coordinate — coord","text":"","code":"coord(   x,   .fmt = c(\"decdeg\", \"degmin\", \"degminsec\"),   .latorlon = c(NA, \"lat\", \"lon\", \"both\") )"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographic or GPS Coordinate — coord","text":"x numeric, representing one coordinates. .fmt character string indicating format x; must one \"decdeg\" (default), \"degmin\" \"degminsec\". .latorlon character string, either \"lat\" \"lon\" indicating whether coordinate(s) represented latitude longitude \"\" indicating pair latitude longitude coordinates; otherwise must NA (default).","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographic or GPS Coordinate — coord","text":"object class \"coord\" length(x) > 1, list objects, instantiating coordinate. See Details.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographic or GPS Coordinate — coord","text":"coord() creates robust representation geographic GPS cordinate based value x , length(x) > 1, number coordinates instatiated objects class \"coord\". Objects \"coord\" class contain list one, two three numeric values named \"deg\", \"min\", \"sec\", depending whether cordinate question represented decimal degrees, (integer) degrees (decimal) minutes, else (integer) degrees, (integer) minutes, (decimal) seconds. value provided argument x decimal point integer number degrees case decimal degrees, integer number minutes case degrees minutes, integer number seconds case degrees, minutes seconds \"coord\" objects character attribute latorlon, may \"lat\" latitude, \"lon\" longitude NA, logical attribute \"negative\", TRUE signifies negative coordinate .e., S W rather N E. length(x) > 1, list \"coord\" objects returned, latorlon attribute (.e., either 'lat\" \"lon\"). exception case argument .latorlon length(x) = 2, list two \"coord\" objects returned, latorlon attributes one \"lat\" \"lon\"; list object class \"latnlon\". total value degrees, minutes seconds may greater 180˚, minutes seconds components (present) must less  60˚. latitude represented, (.e., latorlon attribute \"lat\"),  maximum absolute value 90˚.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographic or GPS Coordinate — coord","text":"","code":"## Decimal degrees (default) coord(51.507765) #>   51.507765° coord(-0.127924) #>   -0.127924° coord(51.507765,, \"lat\") #>   51.507765° lat coord(-0.127924,, \"lon\") #>   -0.127924° lon coord(c(51.507765, -0.127924),, \"both\") #>   51.507765° lat    -0.127924° lon c(51.507765, 49.546210, 48.107232, 38.889494, 0.000000, -37.111740, -53.104781) |>     coord(, \"lat\") #> [[1]] #>   51.507765° lat #> [[2]] #>   49.546210° lat #> [[3]] #>   48.107232° lat #> [[4]] #>   38.889494° lat #> [[5]] #>    0.000000° lat #> [[6]] #>  -37.111740° lat #> [[7]] #>  -53.104781° lat c(-0.127924, 18.398562, -122.778671, -77.035242, 0.000000, -12.28863, 73.517283) |>     coord(, \"lon\") #> [[1]] #>   -0.127924° lon #> [[2]] #>   18.398562° lon #> [[3]] #> -122.778671° lon #> [[4]] #>  -77.035242° lon #> [[5]] #>    0.000000° lon #> [[6]] #>  -12.288630° lon #> [[7]] #>   73.517283° lon  ## Degrees and minutes coord(5130.4659, \"degmin\") #>  51°30.4659' (N/E) coord(-7.6754, \"degmin\") #>   0°07.6754' (W/S) coord(5130.4659, \"degmin\", \"lat\") #>  51°30.4659' N coord(-7.6754, \"degmin\", \"lon\") #>   0°07.6754' W coord(c(5130.4659, -7.6754), \"degmin\", \"both\") #>  51°30.4659' N    0°07.6754' W c(5130.4659, 4932.7726, 4806.4339, 3853.3696, 0.0000, -3706.7044, -5306.2869) |>     coord(\"degmin\", \"lat\") #> [[1]] #>  51°30.4659' N #> [[2]] #>  49°32.7726' N #> [[3]] #>  48°06.4339' N #> [[4]] #>  38°53.3696' N #> [[5]] #>   0°00.0000' N #> [[6]] #>  37°06.7044' S #> [[7]] #>  53°06.2869' S c(-7.6754, 1823.9137, -12246.7203, -7702.1145, 0.0000, -1217.3178, 7331.0370) |>     coord(\"degmin\", \"lon\") #> [[1]] #>   0°07.6754' W #> [[2]] #>  18°23.9137' E #> [[3]] #> 122°46.7203' W #> [[4]] #>  77°02.1145' W #> [[5]] #>   0°00.0000' E #> [[6]] #>  12°17.3178' W #> [[7]] #>  73°31.0370' E  ## Degrees, minutes and seconds coord(513027.95, \"degminsec\") #>  51°30'27.95\" (N/E) coord(-740.53, \"degminsec\") #>   0°07'40.53\" (W/S) coord(513027.95, \"degminsec\", \"lat\") #>  51°30'27.95\" N coord(-740.53, \"degminsec\", \"lon\") #>   0°07'40.53\" W coord(c(513027.95, -740.53), \"degminsec\", \"both\") #>  51°30'27.95\" N    0°07'40.53\" W c(513027.95, 493246.36, 480626.04, 385322.18, 0.00, -370642.26, -530617.21) |>      coord(\"degminsec\", \"lat\") #> [[1]] #>  51°30'27.95\" N #> [[2]] #>  49°32'46.36\" N #> [[3]] #>  48°06'26.04\" N #> [[4]] #>  38°53'22.18\" N #> [[5]] #>   0°00'00.00\" N #> [[6]] #>  37°06'42.26\" S #> [[7]] #>  53°06'17.21\" S c(-740.53, 182354.82, -1224643.22, -770206.87, 0.00, -121719.07, 733102.22) |>      coord(\"degminsec\", \"lon\") #> [[1]] #>   0°07'40.53\" W #> [[2]] #>  18°23'54.82\" E #> [[3]] #> 122°46'43.22\" W #> [[4]] #>  77°02'06.87\" W #> [[5]] #>   0°00'00.00\" E #> [[6]] #>  12°17'19.07\" W #> [[7]] #>  73°31'02.22\" E"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cor_coef.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","title":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","text":"function performs t-test given Pearson's product-moment correlation coefficient r derived sample size n bivariate normal population, calculates population confidence interval.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cor_coef.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","text":"","code":"cor_coef.test(   r,   n,   alternative = c(\"two.sided\", \"less\", \"greater\"),   conf.level = 0.95 )"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cor_coef.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","text":"r numeric providing value Pearson's product-moment correlation coefficient r. n integer providing number pairs observations r derived; minimum 4. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\".  can specify just initial letter. conf.level numeric 0 1, confidence level required; default 0.95.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cor_coef.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","text":"list class \"htest\" containing following components: - statistic value test statistic. parameter degrees freedom test statistic. p.value p-value test. conf.int confidence interval correlation coefficient (95% specified level). estimate correlation coefficient provided r. null.value value association measure null hypothesis, always 0. alternative character string describing alternative hypothesis. method character string \"Pearson's product-moment correlation\". data.name character string giving name data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cor_coef.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","text":"t-statistic given correlation coefficient r divided standard error calculated using: - $$SE = \\displaystyle \\sqrt{\\frac{1 - r^2}{df}}$$ calculate confidence interval, firstly value \\(Z_r\\) calculated r using Fisher transformation (inverse hyperbolic tangent): - $$Z_r = \\displaystyle \\frac{1}{2}log_e\\left(\\frac{1 + r}{1 - r}\\right)$$ Log upper lower bounds (L U) calculated using: - $$L = \\displaystyle Z_r - \\frac{Z_{(1 - alpha/2)}}{\\sqrt{n - 3}}$$ $$U = \\displaystyle Z_r + \\frac{Z_{(1 - alpha/2)}}{\\sqrt{n - 3}}$$ confidence interval calculated using hyperbolic tangent: - $$\\displaystyle lower = \\frac{e^{2L} - 1}{e^{2L} + 1}, upper = \\frac{e^{2U} - 1}{e^{2U} + 1}$$","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cor_coef.test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","text":"function much like cor.test potentially useful correlation coefficient available original data.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/cor_coef.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval and t-Test from Pearson's Correlation Coefficient — cor_coef.test","text":"","code":"## Data from cor.test() example (Hollander & Wolfe, 1973): -  x <- c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)  y <- c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)   (corxy <- cor(x, y)) #> [1] 0.5711816   cor_coef.test(corxy, 9)  ## alternative two-sided by default #>  #> \tPearson's product-moment correlation #>  #> data:  corxy #> t = 1.8411, df = 7, p-value = 0.1082 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1497426  0.8955795 #> sample estimates: #>       cor  #> 0.5711816  #>   cor.test(x, y)  ## Result should be identical #>  #> \tPearson's product-moment correlation #>  #> data:  x and y #> t = 1.8411, df = 7, p-value = 0.1082 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1497426  0.8955795 #> sample estimates: #>       cor  #> 0.5711816  #>    cor_coef.test(corxy, 9, alternative = \"less\") #>  #> \tPearson's product-moment correlation #>  #> data:  corxy #> t = 1.8411, df = 7, p-value = 0.9459 #> alternative hypothesis: true correlation is less than 0 #> 95 percent confidence interval: #>  -1.0000000  0.8669786 #> sample estimates: #>       cor  #> 0.5711816  #>   cor.test(x, y, alternative = \"less\")  ## Result should be identical #>  #> \tPearson's product-moment correlation #>  #> data:  x and y #> t = 1.8411, df = 7, p-value = 0.9459 #> alternative hypothesis: true correlation is less than 0 #> 95 percent confidence interval: #>  -1.0000000  0.8669786 #> sample estimates: #>       cor  #> 0.5711816  #>    cor_coef.test(corxy, 9, alternative = \"greater\") #>  #> \tPearson's product-moment correlation #>  #> data:  corxy #> t = 1.8411, df = 7, p-value = 0.05409 #> alternative hypothesis: true correlation is greater than 0 #> 95 percent confidence interval: #>  -0.02223023  1.00000000 #> sample estimates: #>       cor  #> 0.5711816  #>   cor.test(x, y, alternative = \"greater\")  ## Result should be identical #>  #> \tPearson's product-moment correlation #>  #> data:  x and y #> t = 1.8411, df = 7, p-value = 0.05409 #> alternative hypothesis: true correlation is greater than 0 #> 95 percent confidence interval: #>  -0.02223023  1.00000000 #> sample estimates: #>       cor  #> 0.5711816  #>    rm(corxy, x, y)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/count_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Combinations and Totals for Logical Columns in Data Frame — count_lgl","title":"Count Combinations and Totals for Logical Columns in Data Frame — count_lgl","text":"Functions count number ocurrences unique combinations values across logical columns data frame total number TRUE values logical column.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/count_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Combinations and Totals for Logical Columns in Data Frame — count_lgl","text":"","code":"count_lgl(df, .newcol = n, .arrange_by = NULL)  sum_lgl(df, wt = NULL)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/count_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Combinations and Totals for Logical Columns in Data Frame — count_lgl","text":"df data frame, data frame extension (e.g. tibble). .newcol quoted name assigned new count column; default n. .arrange_by <data-masking> quoted name column ordering results; default NULL. wt frequency weights. Can NULL name numeric variable column; default NULL. NULL (default), counts number rows TRUE values logical column. variable, computes sum(wt) rows TRUE values logical column.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/count_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Combinations and Totals for Logical Columns in Data Frame — count_lgl","text":"count_lgl() returns data frame comprising unique combinations logical columns df additional column counts ocurrences combinations. sum_lgl() returns named numeric vector totals logical column.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/count_lgl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Combinations and Totals for Logical Columns in Data Frame — count_lgl","text":"Function count_lgl() counts number ocurrences unique combinations values across logical columns data frame using summarise package dplyr. Function sum_lgl() counts total number TRUE values logical column data frame using matrix multiplication. functions may useful counting combinations tallying totals keywords flagged TRUE logical columns added data frame using kwd_cols.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/count_lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Combinations and Totals for Logical Columns in Data Frame — count_lgl","text":"","code":"## Following on from kwd_cols() examples…  car_names <- data.frame(Response = rownames(mtcars)) |>   kwd_cols(, c(\"Mazda\", \"Merc\", \"Toyota\", \"Volkswagen\", \"X\", \"450\")) car_names #>               Response Mazda  Merc Toyota Volkswagen     X   450 #> 1            Mazda RX4  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 2        Mazda RX4 Wag  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 3           Datsun 710 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 4       Hornet 4 Drive FALSE FALSE  FALSE      FALSE FALSE FALSE #> 5    Hornet Sportabout FALSE FALSE  FALSE      FALSE FALSE FALSE #> 6              Valiant FALSE FALSE  FALSE      FALSE FALSE FALSE #> 7           Duster 360 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 8            Merc 240D FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 9             Merc 230 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 10            Merc 280 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 11           Merc 280C FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 12          Merc 450SE FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 13          Merc 450SL FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 14         Merc 450SLC FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 15  Cadillac Fleetwood FALSE FALSE  FALSE      FALSE FALSE FALSE #> 16 Lincoln Continental FALSE FALSE  FALSE      FALSE FALSE FALSE #> 17   Chrysler Imperial FALSE FALSE  FALSE      FALSE FALSE FALSE #> 18            Fiat 128 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 19         Honda Civic FALSE FALSE  FALSE      FALSE FALSE FALSE #> 20      Toyota Corolla FALSE FALSE   TRUE      FALSE FALSE FALSE #> 21       Toyota Corona FALSE FALSE   TRUE      FALSE FALSE FALSE #> 22    Dodge Challenger FALSE FALSE  FALSE      FALSE FALSE FALSE #> 23         AMC Javelin FALSE FALSE  FALSE      FALSE FALSE FALSE #> 24          Camaro Z28 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 25    Pontiac Firebird FALSE FALSE  FALSE      FALSE FALSE FALSE #> 26           Fiat X1-9 FALSE FALSE  FALSE      FALSE  TRUE FALSE #> 27       Porsche 914-2 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 28        Lotus Europa FALSE FALSE  FALSE      FALSE FALSE FALSE #> 29      Ford Pantera L FALSE FALSE  FALSE      FALSE FALSE FALSE #> 30        Ferrari Dino FALSE FALSE  FALSE      FALSE FALSE FALSE #> 31       Maserati Bora FALSE FALSE  FALSE      FALSE FALSE FALSE #> 32          Volvo 142E FALSE FALSE  FALSE      FALSE FALSE FALSE  (carname_counts <- count_lgl(car_names, .arrange_by = desc(n))) #>   Mazda  Merc Toyota Volkswagen     X   450  n #> 1 FALSE FALSE  FALSE      FALSE FALSE FALSE 20 #> 2 FALSE  TRUE  FALSE      FALSE FALSE FALSE  4 #> 3 FALSE  TRUE  FALSE      FALSE FALSE  TRUE  3 #> 4  TRUE FALSE  FALSE      FALSE  TRUE FALSE  2 #> 5 FALSE FALSE   TRUE      FALSE FALSE FALSE  2 #> 6 FALSE FALSE  FALSE      FALSE  TRUE FALSE  1 sum_lgl(car_names) #>      Mazda       Merc     Toyota Volkswagen          X        450  #>          2          7          2          0          3          3  sum_lgl(carname_counts, wt = \"n\") #>      Mazda       Merc     Toyota Volkswagen          X        450  #>          2          7          2          0          3          3   car_names |> count_lgl(.newcol = subtotals) |> print_lf() |> sum_lgl(wt = \"subtotals\") #>   Mazda  Merc Toyota Volkswagen     X   450 subtotals #> 1 FALSE FALSE  FALSE      FALSE FALSE FALSE        20 #> 2 FALSE FALSE  FALSE      FALSE  TRUE FALSE         1 #> 3 FALSE FALSE   TRUE      FALSE FALSE FALSE         2 #> 4 FALSE  TRUE  FALSE      FALSE FALSE FALSE         4 #> 5 FALSE  TRUE  FALSE      FALSE FALSE  TRUE         3 #> 6  TRUE FALSE  FALSE      FALSE  TRUE FALSE         2 #>  #>      Mazda       Merc     Toyota Volkswagen          X        450  #>          2          7          2          0          3          3   rm(car_names, carname_counts)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/decdeg.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Decimal Degrees Object — decdeg","title":"Create Decimal Degrees Object — decdeg","text":"function decdeg() used create (latitude longitude) coordinate objects represented decimal degrees. as_decdeg() converts degrees, minutes seconds coordinate objects represented decimal degrees.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/decdeg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Decimal Degrees Object — decdeg","text":"","code":"decdeg(object, .latorlon = c(NA, \"lat\", \"lon\"))  as_decdeg(object, ...)  # Default S3 method as_decdeg(object, ..., .fmt = c(\"deg\", \"min\", \"sec\"))  # S3 method for class 'decdeg' as_decdeg(object, ...)  # S3 method for class 'degminsec' as_decdeg(object, ...)  # S3 method for class 'list' as_decdeg(object, ...)  # S3 method for class 'latlon' as_decdeg(object, ...)  # S3 method for class 'decdeg' print(x, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/decdeg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Decimal Degrees Object — decdeg","text":"object numeric, representing one coordinates latitude longitude decimal degrees. .latorlon character string indicating whether coordinate represented object latitude longitude; must one NA (default), \"lat\", \"lon\". ... arguments passed methods. .fmt character string indicating position decimal point object; must one \"deg\" (default), \"min\", \"sec\". can specify just initial letter. x object printed.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/decdeg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Decimal Degrees Object — decdeg","text":"object class \"decdeg\", length(object) > 1, list objects, instantiating coordinate latitude longitude decimal degrees represented numeric type double maximum absolute value 180˚. Attribute \".latorlon\" indicates whether object coordinate latitude longitude; latitude,  maximum absolute value 90˚.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/decdeg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Decimal Degrees Object — decdeg","text":"decdeg() works numeric (double) vector representing one coordinates latitude longitude decimal degrees. as_decdeg() S3 function works individual coordinates supplied numeric values, \"degminsec\" objects, lists coordinates. also works latitude longitude coordinates paired \"latlon\" object (see examples), lists \"latlon\" paired coordinates. S3 method existing \"decdeg\" object simply validates returns argument.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/decdeg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Decimal Degrees Object — decdeg","text":"","code":"decdeg(49.54621) #> \t 49.546210 decimal degrees  decdeg(49.54621, .latorlon = \"lat\") #> \t 49.546210 decimal degrees decdeg(18.398562, .latorlon = \"lon\") #> \t 18.398562 decimal degrees  decdeg(c(lat = 49.54621, lon = 18.398562)) #> $lat #> \t 49.546210 decimal degrees #>  #> $lon #> \t 18.398562 decimal degrees #>  decdeg(c(lat = -37.11174, lon = -12.28863)) #> $lat #> \t -37.111740 decimal degrees #>  #> $lon #> \t -12.288630 decimal degrees #>   as_decdeg(49.3246368) #> \t 49.546213 decimal degrees as_decdeg(4932.46368, .fmt = \"min\") #> \t 49.546213 decimal degrees as_decdeg(493246.368, .fmt = \"sec\") #> \t 49.546213 decimal degrees  (coord <- degminsec(49.3246368)) #> \t49°32'46.368\"(N/E) as_decdeg(coord) #> \t 49.546213 decimal degrees  (coords <- latlon(c(49.3246368, 18.2354822))) #> \t49°32'46.368\"N, 18°23'54.822\"E as_decdeg(coords) #> \t49.546213, 18.398562 decimal degrees  rm(coord, coords)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/degminsec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Degrees, Minutes and Seconds Object — degminsec","title":"Create Degrees, Minutes and Seconds Object — degminsec","text":"function degminsec() used create (latitude longitude) coordinate objects represented degrees, minutes seconds. as_degminsec() converts decimal degrees coordinate objects represented  degrees, minutes seconds.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/degminsec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Degrees, Minutes and Seconds Object — degminsec","text":"","code":"degminsec(   object,   .fmt = c(\"deg\", \"min\", \"sec\"),   .latorlon = c(NA, \"lat\", \"lon\") )  as_degminsec(object, ...)  # Default S3 method as_degminsec(object, ..., .latorlon = c(NA, \"lat\", \"lon\"))  # S3 method for class 'degminsec' as_degminsec(object, ...)  # S3 method for class 'decdeg' as_degminsec(object, ...)  # S3 method for class 'list' as_degminsec(object, ...)  # S3 method for class 'latlon' as_degminsec(object, ...)  # S3 method for class 'degminsec' print(x, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/degminsec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Degrees, Minutes and Seconds Object — degminsec","text":"object numeric, representing one coordinates latitude longitude degrees, minutes seconds. .fmt character string indicating position decimal point object; must one \"deg\" (default), \"min\", \"sec\". can specify just initial letter. .latorlon character string indicating whether coordinate represented object latitude longitude; must one NA (default), \"lat\", \"lon\". ... arguments passed methods. x object printed.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/degminsec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Degrees, Minutes and Seconds Object — degminsec","text":"object class \"degminsec\", length(object) > 1, list objects, representing coordinate latitude longitude degrees, minutes seconds named list components: - deg degrees represented positive integer maximum value 180. min minutes represented positive integer value less 60. sec seconds represented positive numeric value less 60. Attribute \"negative\" indicates whether object originally negative number .e. TRUE, value represents west south rather north east coordinate. Attribute \".latorlon\" indicates whether object coordinate latitude longitude.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/degminsec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Degrees, Minutes and Seconds Object — degminsec","text":"degminsec() works numeric (double) representing one coordinates latitude longitude degrees, minutes seconds. argument .fmt indicates position decimal point, may placed degrees, minutes (whole) seconds, default assumed placed degrees. as_degminsec() S3 function works individual coordinates supplied numeric values, \"decdeg\" objects, lists coordinates. also works latitude longitude coordinates paired \"latlon\" object (see examples), lists \"latlon\" paired coordinates. S3 method existing \"degminsec\" object simply validates returns argument.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/degminsec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Degrees, Minutes and Seconds Object — degminsec","text":"","code":"degminsec(49.3246368) #> \t49°32'46.368\"(N/E) degminsec(4932.46368, .fmt = \"min\") #> \t49°32'46.368\"(N/E) degminsec(493246.368, .fmt = \"sec\") #> \t49°32'46.368\"(N/E)  degminsec(49.3246368, .latorlon = \"lat\") #> \t49°32'46.368\"N degminsec(18.2354822, .latorlon = \"lon\") #> \t18°23'54.822\"E  degminsec(-37.0642264, .latorlon = \"lat\") #> \t37°06'42.264\"S degminsec(-12.1719068, .latorlon = \"lon\") #> \t12°17'19.068\"W  degminsec(c(lat = 49.3246368, lon = 18.2354822)) #> $lat #> \t49°32'46.368\"(N/E) #>  #> $lon #> \t18°23'54.822\"(N/E) #>  degminsec(c(lat = -370642.264, lon = -121719.068), .fmt = \"sec\") #> $lat #> \t37°06'42.264\"(W/S) #>  #> $lon #> \t12°17'19.068\"(W/S) #>   as_degminsec(49.54621, .latorlon = \"lat\") #> Error in eval(substitute(expr), data, enclos = parent.frame()): object 'deg' not found  (coord <- decdeg(49.54621, .latorlon = \"lat\")) #> \t 49.546210 decimal degrees as_degminsec(coord) #> Error in eval(substitute(expr), data, enclos = parent.frame()): object 'deg' not found  (coords <- latlon_dd(c(49.54621, 18.398562))) #> \t49.546210, 18.398562 decimal degrees as_degminsec(coords) #> Error in eval(substitute(expr), data, enclos = parent.frame()): object 'deg' not found  rm(coord, coords)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"design effect ratio total number subjects required using cluster randomisation number required using individual randomisation.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"","code":"design_effect(m, ri)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"m integer representing cluster size. ri intracluster (=intraclass) correlation coefficient.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"Numeric value design effect.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"design effect can presented neatly terms intracluster correlation number single cluster: - $$D = 1 + (m − 1)r_{}$$ one observation per cluster, m = 1, design effect 1.0 two designs . Otherwise, larger intracluster correlation — , important variation clusters — bigger design effect subjects need get power simply randomised study. Even small intracluster correlation impact cluster size large.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"Description Details taken verbatim second reference.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"Kerry, S.M. & Bland, J.M., 1998. Sample size cluster randomisation. Brit Med J 316: 5490. doi:10.1136/bmj.316.7130.549 . Kerry, S.M. & Bland, J.M., 1998. intracluster correlation coefficient cluster randomisation. Brit Med J 316: 1455-1460. doi:10.1136/bmj.316.7142.1455 .","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/design_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design Effect for Cluster Sampling and Cluster Randomised Trials — design_effect","text":"","code":"## Example: x-ray guidelines study from second reference. design_effect(m = 50L, ri = 0.019) #> [1] 1.931"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/detective.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for Pattern in a Data Frame Character Column — detective","title":"Search for Pattern in a Data Frame Character Column — detective","text":"Find modify strings containing specified pattern data frame character column.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/detective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for Pattern in a Data Frame Character Column — detective","text":"","code":"detective(.data, pattern, ..., .exclude = NULL, .arrange_by = desc(n))  detective(.data, pattern, ..., .exclude = NULL) <- value"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/detective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for Pattern in a Data Frame Character Column — detective","text":".data data frame, data frame extension (e.g. tibble). pattern Pattern look . default interpretation regular expression, described vignette(\"regular-expressions\"). Use regex() finer control matching behaviour. Match fixed string (.e. comparing bytes), using fixed(). fast, approximate. Generally, matching human text, want coll() respects character matching rules specified locale. Match character, word, line sentence boundaries boundary(). empty pattern, \"\", equivalent boundary(\"character\"). ... <tidy-select> character factor columns search return. .exclude single character string signifying items excluded, interpreted pattern; default NULL. .arrange_by <data-masking> quoted name(s) column(s) ordering results. Use desc() sort variables descending order; default desc(n). value single character string providing replacement value.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/detective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for Pattern in a Data Frame Character Column — detective","text":"detective() returns tibble columns selected using ... n, giving count occurences item.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/detective.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for Pattern in a Data Frame Character Column — detective","text":"detective() finds counts strings matching pattern matching .exclude selected columns .data, detective()<- equivalent replacement function. functions forms allow use various possibilities pattern argument str_detect. Use pattern = regex(\"xyz\", ignore_case = TRUE) case insensitive search. Use utils package glob2rx() change wildcard globbing pattern regular expression. character factor columns .data selected using ... <tidy-select> syntax package dplyr, including use selection helpers. output may ordered values selected columns using syntax arrange(), including use across() pick() select columns <tidy-select> (see examples).","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/detective.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for Pattern in a Data Frame Character Column — detective","text":"","code":"## Find strings containing a specified pattern in a data frame starwars |> detective(\"Sky\", name) #> # A tibble: 3 × 2 #>   name                 n #>   <chr>            <int> #> 1 Anakin Skywalker     1 #> 2 Luke Skywalker       1 #> 3 Shmi Skywalker       1  ## Use regex() to make case insensitive starwars |> detective(regex(\"WALKER\", TRUE), name, .arrange_by = desc(name)) #> # A tibble: 3 × 2 #>   name                 n #>   <chr>            <int> #> 1 Shmi Skywalker       1 #> 2 Luke Skywalker       1 #> 3 Anakin Skywalker     1  ## Use | for alternatives starwars |> detective(\"Sky|Organa\", name) #> # A tibble: 5 × 2 #>   name                    n #>   <chr>               <int> #> 1 Anakin Skywalker        1 #> 2 Bail Prestor Organa     1 #> 3 Leia Organa             1 #> 4 Luke Skywalker          1 #> 5 Shmi Skywalker          1  ## Replace strings containing a specified pattern starwars |> detective(\"Darth\", name) #> # A tibble: 2 × 2 #>   name            n #>   <chr>       <int> #> 1 Darth Maul      1 #> 2 Darth Vader     1 starwars |> detective(\"Darth\", name, .exclude = \"Vader\") <- \"Darth The First\" starwars |> detective(\"Darth\", name, .arrange_by = desc(name)) #> # A tibble: 2 × 2 #>   name                n #>   <chr>           <int> #> 1 Darth Vader         1 #> 2 Darth The First     1  ## Exclude strings containing unwanted patterns  starwars |> detective(\"Sky\", name, .exclude = \"Luke\") #> # A tibble: 2 × 2 #>   name                 n #>   <chr>            <int> #> 1 Anakin Skywalker     1 #> 2 Shmi Skywalker       1  ## Return multiple columns  starwars |> detective(\"Human\", homeworld, species) #> # A tibble: 15 × 3 #>    homeworld    species     n #>    <chr>        <chr>   <int> #>  1 Tatooine     Human       8 #>  2 NA           Human       6 #>  3 Naboo        Human       5 #>  4 Alderaan     Human       3 #>  5 Corellia     Human       2 #>  6 Coruscant    Human       2 #>  7 Bespin       Human       1 #>  8 Chandrila    Human       1 #>  9 Concord Dawn Human       1 #> 10 Eriadu       Human       1 #> 11 Haruun Kal   Human       1 #> 12 Kamino       Human       1 #> 13 Serenno      Human       1 #> 14 Socorro      Human       1 #> 15 Stewjon      Human       1 starwars |> detective(\"Human\", homeworld, species, .exclude = \"s\") #> # A tibble: 13 × 3 #>    homeworld    species     n #>    <chr>        <chr>   <int> #>  1 Tatooine     Human       8 #>  2 NA           Human       6 #>  3 Naboo        Human       5 #>  4 Alderaan     Human       3 #>  5 Corellia     Human       2 #>  6 Chandrila    Human       1 #>  7 Concord Dawn Human       1 #>  8 Eriadu       Human       1 #>  9 Haruun Kal   Human       1 #> 10 Kamino       Human       1 #> 11 Serenno      Human       1 #> 12 Socorro      Human       1 #> 13 Stewjon      Human       1 starwars |> detective(\"Human\", homeworld, species, .exclude = regex(\"s\", TRUE)) #> # A tibble: 10 × 3 #>    homeworld    species     n #>    <chr>        <chr>   <int> #>  1 Tatooine     Human       8 #>  2 NA           Human       6 #>  3 Naboo        Human       5 #>  4 Alderaan     Human       3 #>  5 Corellia     Human       2 #>  6 Chandrila    Human       1 #>  7 Concord Dawn Human       1 #>  8 Eriadu       Human       1 #>  9 Haruun Kal   Human       1 #> 10 Kamino       Human       1  ## Select columns using <tidy-select> syntax from {dplyr}, ## including use of “selection helpers” starwars |> detective(         \"brown\", contains(\"color\"), species,         .arrange_by = across(contains(\"color\"))     ) #> # A tibble: 25 × 5 #>    hair_color skin_color eye_color species     n #>    <chr>      <chr>      <chr>     <chr>   <int> #>  1 black      brown      brown     Zabrak      1 #>  2 black      dark       brown     Human       2 #>  3 black      dark       brown     NA          1 #>  4 black      fair       brown     Human       2 #>  5 black      light      brown     Human       1 #>  6 black      tan        brown     Human       2 #>  7 brown      brown      blue      Wookiee     1 #>  8 brown      brown      brown     Ewok        1 #>  9 brown      fair       blue      Human       3 #> 10 brown      fair       blue      NA          1 #> # ℹ 15 more rows  starwars |> detective(         \"brown\", name, contains(\"color\"), species,         .exclude = \"Human\", .arrange_by = across(contains(\"color\"))     ) #> # A tibble: 12 × 6 #>    name                  hair_color skin_color       eye_color     species     n #>    <chr>                 <chr>      <chr>            <chr>         <chr>   <int> #>  1 Eeth Koth             black      brown            brown         Zabrak      1 #>  2 Gregar Typho          black      dark             brown         NA          1 #>  3 Tarfful               brown      brown            blue          Wookiee     1 #>  4 Wicket Systri Warrick brown      brown            brown         Ewok        1 #>  5 Jek Tono Porkins      brown      fair             blue          NA          1 #>  6 Cordé                 brown      light            brown         NA          1 #>  7 Chewbacca             brown      unknown          blue          Wookiee     1 #>  8 Dexter Jettster       none       brown            yellow        Besali…     1 #>  9 Ackbar                none       brown mottle     orange        Mon Ca…     1 #> 10 Grievous              none       brown, white     green, yellow Kaleesh     1 #> 11 Yoda                  white      green            brown         Yoda's…     1 #> 12 Jabba Desilijic Tiure NA         green-tan, brown orange        Hutt        1  starwars |> detective(         \"brown\", contains(\"color\"), species,     ) <- \"chestnut\"  starwars |> detective(\"brown\", name, contains(\"color\"), species) #> # A tibble: 0 × 6 #> # ℹ 6 variables: name <chr>, hair_color <chr>, skin_color <chr>, #> #   eye_color <chr>, species <chr>, n <int>  starwars |> detective(\"chestnut\", name, contains(\"color\"), species) #> # A tibble: 35 × 6 #>    name                hair_color skin_color eye_color species          n #>    <chr>               <chr>      <chr>      <chr>     <chr>        <int> #>  1 Ackbar              none       chestnut   orange    Mon Calamari     1 #>  2 Arvel Crynyd        chestnut   fair       chestnut  Human            1 #>  3 Bail Prestor Organa black      tan        chestnut  Human            1 #>  4 Beru Whitesun Lars  chestnut   light      blue      Human            1 #>  5 Biggs Darklighter   black      light      chestnut  Human            1 #>  6 Boba Fett           black      fair       chestnut  Human            1 #>  7 Chewbacca           chestnut   unknown    blue      Wookiee          1 #>  8 Cliegg Lars         chestnut   fair       blue      Human            1 #>  9 Cordé               chestnut   light      chestnut  NA               1 #> 10 Dexter Jettster     none       chestnut   yellow    Besalisk         1 #> # ℹ 25 more rows  ## Use {utils} glob2rx() to create regular expression, in this instance  ## a wildcard * finding every character except a new line starwars |> detective(glob2rx(\"*\"), !c(name, contains(\"color\"))) #> # A tibble: 65 × 5 #>    sex    gender    homeworld species      n #>    <chr>  <chr>     <chr>     <chr>    <int> #>  1 male   masculine Tatooine  Human        6 #>  2 male   masculine NA        Human        4 #>  3 male   masculine Naboo     Gungan       3 #>  4 male   masculine Naboo     Human        3 #>  5 female feminine  Mirial    Mirialan     2 #>  6 female feminine  Naboo     Human        2 #>  7 female feminine  Tatooine  Human        2 #>  8 female feminine  NA        Human        2 #>  9 male   masculine Alderaan  Human        2 #> 10 male   masculine Corellia  Human        2 #> # ℹ 55 more rows  ## Equivalent using {stringr} regex(\".\") identical(     starwars |> detective(glob2rx(\"*\"), !c(name, contains(\"color\"))),     starwars |> detective(regex(\".\"), !c(name, contains(\"color\"))) ) #> [1] TRUE  ## Equivalent using caret \"^\" in pattern string identical(     starwars |> detective(glob2rx(\"*\"), !c(name, contains(\"color\"))),     starwars |> detective(\"^\", !c(name, contains(\"color\"))) ) #> [1] TRUE"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/eff_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","title":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","text":"eff_rate() calculates effective rate annual interest nominal rate interest conversion frequency. nom_rate() calculates nominal rate interest given interest conversion frequency effective rate. cc_rate() calculates continuous compounding rate interest effective rate.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/eff_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","text":"","code":"eff_rate(nom_rate, con_fq)  nom_rate(eff_rate, con_fq)  cc_rate(eff_rate)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/eff_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","text":"nom_rate numeric, nominal interest rate convertible con_fq times per year. con_fq, integer, interest conversion frequency per year. eff_rate numeric, effective rate interest.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/eff_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","text":"numeric: eff_rate() returns effective rate interest; nom_rate() returns nominal interest rate convertible con_fq times per year.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/eff_rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","text":"Effective Rate Interest (er): — $$er = \\displaystyle \\left(1 + \\frac{nr}{ic} \\right)^{ic} - 1$$ Nominal Rate Interest (nr): — $$nr = \\displaystyle \\left(\\left(1 + er \\right)^{\\frac{1}{ic}} - 1 \\right).ic$$ Continuous Compounding Rate Interest (ccr): — $$ccr = \\displaystyle e^{er} - 1$$ \\(er\\) effective rate interest, \\(nr\\) nominal rate interest, \\(ic\\) interest conversion frequency. See amort.period() package FinancialMath details.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/eff_rate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","text":"Investopedia: Effective Annual Interest Rate: Definition, Formula, Example. www.investopedia.com/terms/e/effectiveinterest Investopedia: Continuous Compounding Definition Formula.  www.investopedia.com/terms/c/continuouscompounding","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/eff_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effective Rate of Interest from a Nominal Rate and its Conversion Frequency or the Inverse — eff_rate","text":"","code":"## A lender calculates interest daily using a simple annual rate of 5.7480%, ## based on a 365-day year.  ## Calculate effective rate: - eff_rate(0.057480, 365) #> [1] 0.05915929  ## Calculate nominal rates at monthly and daily interest conversion frequencies: - ## Monthly nom_rate(0.05915929, 12) #> [1] 0.05761333 ## Daily—same as the original simple annual rate nom_rate(0.05915929, 365) #> [1] 0.05748  ## Example from https://www.investopedia.com/terms/e/effectiveinterest.asp eff_rate(0.10, c(2, 4, 12, 365)) |>     setNames(c(\"Semiannual\", \"Quarterly\", \"Monthly\", \"Daily\")) #> Semiannual  Quarterly    Monthly      Daily  #>  0.1025000  0.1038129  0.1047131  0.1051558   ## Limit of compounding (ibid.) eff_rate(0.1, c(365, 365 * 24, 365 * 24 * 60, 365 * 24 * 60 * 60)) |>     setNames(c(\"Daily\", \"Hourly\", \"Minutely\", \"Secondly\")) #>     Daily    Hourly  Minutely  Secondly  #> 0.1051558 0.1051703 0.1051709 0.1051709  ## Continuous compounding cc_rate(0.1) #> [1] 0.1051709"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/endstop.html","id":null,"dir":"Reference","previous_headings":"","what":"End String with Full Stop and no Other Punctuation or Spaces. — endstop","title":"End String with Full Stop and no Other Punctuation or Spaces. — endstop","text":"endstop() removes punctuation spaces end string optionally terminates string full stop. endstop_data() removes punctuation spaces end selected strings .data optionally terminates strings full stops.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/endstop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"End String with Full Stop and no Other Punctuation or Spaces. — endstop","text":"","code":"endstop(string, .stop = TRUE)  endstop_data(.data, ..., .stop = TRUE)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/endstop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"End String with Full Stop and no Other Punctuation or Spaces. — endstop","text":"string character vector length one. .stop logical. Whether add full stop end string; default TRUE. .data data frame, data frame extension (e.g. tibble). ... <tidy-select> character columns .data endstop.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/endstop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"End String with Full Stop and no Other Punctuation or Spaces. — endstop","text":"endstop(), character vector length one, optionally terminating full stop. endstop_data(), tibble derived .data, selected character columns modified endstop().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/endstop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"End String with Full Stop and no Other Punctuation or Spaces. — endstop","text":"Uses str_detect package stringr detect regular expressions '[:punct:]' '[:space:]', str_sub modify string. endstop_data(), character columns .data selected using ... <tidy-select> syntax package dplyr, including use selection helpers modified endstop(). character columns selected ..., character columns .data modified  endstop().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/endstop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"End String with Full Stop and no Other Punctuation or Spaces. — endstop","text":"","code":"\"Mimiland\" |> endstop() #> [1] \"Mimiland.\" \"Mimiland.\" |> endstop(FALSE) #> [1] \"Mimiland\" \"Mimiland,\" |> endstop() #> [1] \"Mimiland.\" \"Mimiland .\" |> endstop() #> [1] \"Mimiland.\" \"Mimiland. \" |> endstop() #> [1] \"Mimiland.\" s <- \"Mimiland.!?\\\\(){}\" cat(s) #> Mimiland.!?\\(){} endstop(s) #> [1] \"Mimiland.\" s <- \"Mimiland . ! ? \\\\ ( ) { } \" cat(s) #> Mimiland . ! ? \\ ( ) { }  endstop(s, FALSE) #> [1] \"Mimiland\"  starwars3 |> endstop_data(name) #> # A tibble: 10 × 2 #>    name                   skin_color          #>    <chr>                  <chr>               #>  1 Ackbar.                brown mottle        #>  2 Ben Quadinaros.        grey, green, yellow #>  3 Gasgano.               white, blue         #>  4 Grievous.              brown, white        #>  5 Jabba Desilijic Tiure. green-tan, brown    #>  6 Nute Gunray.           mottled green       #>  7 R2-D2.                 white, blue         #>  8 R4-P17.                silver, red         #>  9 Shaak Ti.              red, blue, white    #> 10 Zam Wesell.            fair, green, yellow starwars3 |> endstop_data(starts_with(\"sk\")) #> # A tibble: 10 × 2 #>    name                  skin_color           #>    <chr>                 <chr>                #>  1 Ackbar                brown mottle.        #>  2 Ben Quadinaros        grey, green, yellow. #>  3 Gasgano               white, blue.         #>  4 Grievous              brown, white.        #>  5 Jabba Desilijic Tiure green-tan, brown.    #>  6 Nute Gunray           mottled green.       #>  7 R2-D2                 white, blue.         #>  8 R4-P17                silver, red.         #>  9 Shaak Ti              red, blue, white.    #> 10 Zam Wesell            fair, green, yellow. starwars3 |> endstop_data() #> endstop_data(): no character variables selected in ...; processing all character variables in .data. #> # A tibble: 10 × 2 #>    name                   skin_color           #>    <chr>                  <chr>                #>  1 Ackbar.                brown mottle.        #>  2 Ben Quadinaros.        grey, green, yellow. #>  3 Gasgano.               white, blue.         #>  4 Grievous.              brown, white.        #>  5 Jabba Desilijic Tiure. green-tan, brown.    #>  6 Nute Gunray.           mottled green.       #>  7 R2-D2.                 white, blue.         #>  8 R4-P17.                silver, red.         #>  9 Shaak Ti.              red, blue, white.    #> 10 Zam Wesell.            fair, green, yellow.  rm(s)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/facet_histo.html","id":null,"dir":"Reference","previous_headings":"","what":"Faceted Histogram — facet_histo","title":"Faceted Histogram — facet_histo","text":"Produce neatly formatted histograms numeric variable data frame, faceted one categorical variables.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/facet_histo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Faceted Histogram — facet_histo","text":"","code":"facet_histo(   .data,   x,   ...,   .main,   .sub,   .xtitle,   .col = \"steelblue2\",   .bins = NULL )"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/facet_histo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Faceted Histogram — facet_histo","text":".data data frame, data frame extension (e.g. tibble). x quoted name numeric variable .data plotted. ... <dynamic-dots> quoted names one factors character vectors .data defining faceting groups. .main character string main plot title; default Histogram followed name x. .sub character string plot subtitle; default total number observations number levels faceting variable. .xtitle character string x-axis title; default name x. .col character string fill colour; default \"steelblue2\". .bins integer number bins histogram; default NULL.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/facet_histo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Faceted Histogram — facet_histo","text":"ggplot.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/facet_histo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Faceted Histogram — facet_histo","text":"Uses ggplot2 package. Formatting titles etc. deliberately minimal user can set preferences shown examples. ... argument may omitted obtain simple unfaceted histogram. set variables expressions defining faceting groups may quoted using vars injected ... argument rlang !!! splice-operator, see examples. Categorical variables defining faceting groups ... argument must factors character vectors coerced factor using .factor. supplied argument .bins, number bins histograms calculated square root total number observations divided product numbers levels variables defining faceting groups.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/facet_histo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Faceted Histogram — facet_histo","text":"","code":"## Using cabbages dataset from {MASS} package  ## Without faceting variables cabbages |> facet_histo(VitC)  ## One faceting variable cabbages |> facet_histo(VitC, Date)  ## Customise titles cabbages |> facet_histo(                 VitC, Cult,                 .main = \"Vitamin C levels by Cultivar\",                 .xtitle = \"Ascorbic acid content\"             )   ## Set ggplot preferences oldtheme <- theme_get() theme_update(    plot.title = element_text(color = \"black\", size = 20, hjust = 0.5),    plot.subtitle = element_text(color = \"black\", size = 18, hjust = 0.5),    axis.title.x = element_text(color = \"black\", size = 15),    axis.title.y = element_text(color = \"black\", size = 15),    legend.position = \"none\" )  ## Two faceting variables cabbages |> facet_histo(                 VitC, Cult, Date,                 .main = \"Vitamin C levels by Date and Cultivar\",                 .xtitle = \"Ascorbic acid content\",                 .col = \"seagreen2\"             )   ## Unquote-splice a list of faceting variables fvars <- ggplot2::vars(Date, Cult)  cabbages |> facet_histo(                 VitC,                 !!!fvars,                 .main = \"Vitamin C levels by Cultivar and Date\",                 .xtitle = \"Ascorbic acid content\",                 .col = \"tomato2\"             )   ## Retrieve plot data for the simple case without faceting cabbages |> facet_histo(VitC) |>     ggplot2::ggplot_build() |> _$data[[1]]  #>    y count        x     xmin     xmax     density     ncount   ndensity #> 1  4     4 39.92857 36.85714 43.00000 0.010852713 0.26666667 0.26666667 #> 2  9     9 46.07143 43.00000 49.14286 0.024418605 0.60000000 0.60000000 #> 3 15    15 52.21429 49.14286 55.28571 0.040697674 1.00000000 1.00000000 #> 4 11    11 58.35714 55.28571 61.42857 0.029844961 0.73333333 0.73333333 #> 5  8     8 64.50000 61.42857 67.57143 0.021705426 0.53333333 0.53333333 #> 6 10    10 70.64286 67.57143 73.71429 0.027131783 0.66666667 0.66666667 #> 7  2     2 76.78571 73.71429 79.85714 0.005426357 0.13333333 0.13333333 #> 8  1     1 82.92857 79.85714 86.00000 0.002713178 0.06666667 0.06666667 #>   flipped_aes PANEL group ymin ymax colour       fill linewidth linetype alpha #> 1       FALSE     1    -1    0    4  black steelblue2       0.5        1    NA #> 2       FALSE     1    -1    0    9  black steelblue2       0.5        1    NA #> 3       FALSE     1    -1    0   15  black steelblue2       0.5        1    NA #> 4       FALSE     1    -1    0   11  black steelblue2       0.5        1    NA #> 5       FALSE     1    -1    0    8  black steelblue2       0.5        1    NA #> 6       FALSE     1    -1    0   10  black steelblue2       0.5        1    NA #> 7       FALSE     1    -1    0    2  black steelblue2       0.5        1    NA #> 8       FALSE     1    -1    0    1  black steelblue2       0.5        1    NA  ## Retrieve the histogram bins - PANEL indicates for which facet cabbages |> facet_histo(VitC, Cult) |>     ggplot2::ggplot_build() |> _$data[[1]] |>     dplyr::select(PANEL, xmin, xmax, count)  #>    PANEL xmin xmax count #> 1      1 37.8 43.2     4 #> 2      1 43.2 48.6     4 #> 3      1 48.6 54.0    12 #> 4      1 54.0 59.4     6 #> 5      1 59.4 64.8     1 #> 6      1 64.8 70.2     3 #> 7      2 44.4 51.8     1 #> 8      2 51.8 59.2     9 #> 9      2 59.2 66.6     6 #> 10     2 66.6 74.0    11 #> 11     2 74.0 81.4     2 #> 12     2 81.4 88.8     1  ## Restore ggplot settings theme_set(oldtheme)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/fct_to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor As Numeric — fct_to_num","title":"Factor As Numeric — fct_to_num","text":"Transform factor approximately original numeric values.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/fct_to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor As Numeric — fct_to_num","text":"","code":"fct_to_num(f)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/fct_to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor As Numeric — fct_to_num","text":"f factor converted numeric values","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/fct_to_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor As Numeric — fct_to_num","text":"Numeric","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/fct_to_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factor As Numeric — fct_to_num","text":"See ‘Warning’ section factor: – “particular, .numeric applied factor meaningless, may happen implicit coercion. transform factor f approximately original numeric values, .numeric(levels(f))[f] recommended slightly efficient .numeric(.character(f)).” Accordingly, fct_to_num() implements method.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/fct_to_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor As Numeric — fct_to_num","text":"","code":"## Create sequence of numeric values as a factor (f <- factor(2001:2020)) #>  [1] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 #> [16] 2016 2017 2018 2019 2020 #> 20 Levels: 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 ... 2020  ## Seemingly numeric levels are actually character strings! levels(f) |> str() #>  chr [1:20] \"2001\" \"2002\" \"2003\" \"2004\" \"2005\" \"2006\" \"2007\" \"2008\" \"2009\" ...  ## Returns codes for factor levels, not what was expected f |> as.numeric() #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20  ## Returns numeric values equivalent to factor levels f |> fct_to_num() #>  [1] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 #> [16] 2016 2017 2018 2019 2020  rm(f)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/formul_pwrseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Term in Right Hand Side of a Formula as a Power Sequence — formul_pwrseq","title":"Expand Term in Right Hand Side of a Formula as a Power Sequence — formul_pwrseq","text":"Create power sequence term formula, base_fla, maximum power number, n, optionally including formula terms.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/formul_pwrseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Term in Right Hand Side of a Formula as a Power Sequence — formul_pwrseq","text":"","code":"formul_pwrseq(base_fla, n, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/formul_pwrseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Term in Right Hand Side of a Formula as a Power Sequence — formul_pwrseq","text":"base_fla term formula expanded power sequence. n non-negative integer number coercible positive integer. ... additional terms formula.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/formul_pwrseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Term in Right Hand Side of a Formula as a Power Sequence — formul_pwrseq","text":"formula.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/formul_pwrseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand Term in Right Hand Side of a Formula as a Power Sequence — formul_pwrseq","text":"","code":"formul_pwrseq(y ~ x, 5) #> y ~ x + I(x^2L) + I(x^3L) + I(x^4L) + I(x^5L) #> <environment: 0x564340cbd9e8> formul_pwrseq(y ~ log(x), 5) #> y ~ log(x) + I(log(x)^2L) + I(log(x)^3L) + I(log(x)^4L) + I(log(x)^5L) #> <environment: 0x564340cbd9e8> formul_pwrseq(y ~ A, 3, B, C, D) #> y ~ A + I(A^2L) + I(A^3L) + B + C + D #> <environment: 0x564340cbd9e8>"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/get_amortval.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual Values from the Output of amort.period or amort.table() — get_amortval","title":"Individual Values from the Output of amort.period or amort.table() — get_amortval","text":"Functions return individual values output amort.period() amort.table() package FinancialMath.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/get_amortval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual Values from the Output of amort.period or amort.table() — get_amortval","text":"","code":"get_amortval(x, val = \"Eff Rate\")  get_amortint(x, until)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/get_amortval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual Values from the Output of amort.period or amort.table() — get_amortval","text":"x either matrix input variables, calculated unknown variables, amortization figures given period,  output amort.period() list two components, Schedule (data frame amortization schedule) , (matrix input variables calculated variables) output amort.table(). val character string giving exact name value returned. numeric signifying period including total interest summated.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/get_amortval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual Values from the Output of amort.period or amort.table() — get_amortval","text":"numeric value.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/get_amortval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Individual Values from the Output of amort.period or amort.table() — get_amortval","text":"get_amortval() returns individual values output amort.period() list element output amort.table() package FinancialMath. get_amortint() returns total value interest payments Schedule list element output amort.table(), including period given .","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/get_amortval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual Values from the Output of amort.period or amort.table() — get_amortval","text":"","code":"(apd <- try(     FinancialMath::amort.period(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12, t = 60) )) #>             Amortization #> Loan        2.000990e+05 #> PMT         1.272965e+03 #> Eff Rate    1.855600e-02 #> i^(12)      1.840000e-02 #> Periods     1.800000e+02 #> Years       1.500000e+01 #> At Time 60: 6.000000e+01 #> Int Paid    2.154122e+02 #> Princ Paid  1.057553e+03 #> Balance     1.394286e+05  ## Default value is \"Eff Rate\" get_amortval(apd) #> [1] 0.018556 get_amortval(apd, \"PMT\")   #> [1] 1272.965 get_amortval(apd, \"Balance\")   #> [1] 139428.6  atb <- try(FinancialMath::amort.table(Loan = 200099, n = 15 * 12, i = 0.0184, ic = 12, pf = 12)) atb$Other #>                     Details #> Loan           2.000990e+05 #> Total Paid     2.291337e+05 #> Total Interest 2.903468e+04 #> Eff Rate       1.855597e-02 #> i^(12)         1.840000e-02  ## Default value is \"Eff Rate\" get_amortval(atb) #> [1] 0.01855597 get_amortval(atb, \"Total Paid\") #> [1] 229133.7 get_amortval(atb, \"Total Interest\") #> [1] 29034.68  get_amortint(atb, 60) #> [1] 15707.5  rm(apd, atb)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/heights.html","id":null,"dir":"Reference","previous_headings":"","what":"University Student Heights — heights","title":"University Student Heights — heights","text":"Heights 100 randomly selected male university students Table 2.1 Spiegel Stephens (2008).","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/heights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"University Student Heights — heights","text":"","code":"heights"},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/heights.html","id":"","dir":"Reference","previous_headings":"","what":"University Student Heights — heights","title":"University Student Heights — heights","text":"integer vector length 100. heights Height student inches.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/heights.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"University Student Heights — heights","text":"Adapted Spiegel, Murray R., Larry J. Stephens, (2008). Theory Problems Statistics. 4th edn. McGraw-Hill. ISBN:9780071755498 See also: https://brownmath.com","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/iterate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Iterative And Recursive Function Handlers — iterate","title":"Generic Iterative And Recursive Function Handlers — iterate","text":"Iterate recur function result converges.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/iterate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Iterative And Recursive Function Handlers — iterate","text":"","code":"iterate(x, func, tolerance = getOption(\"digits\"))  recursive(x, func, tolerance = getOption(\"digits\"))"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/iterate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Iterative And Recursive Function Handlers — iterate","text":"x initial estimate passed iterative function. func iterative function, just one argument representing previous best estimate. tolerance number decimal places revised estimate tested predecessor convergence; default options(\"digits\").","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/iterate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Iterative And Recursive Function Handlers — iterate","text":"Result iteration recursion function.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/iterate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic Iterative And Recursive Function Handlers — iterate","text":"Iterates recurs function provided result converges given tolerance, assessed testing changes value (rounded given number number decimal places) iteration recurrence. Although iterative recursive function just one argument, may contain additional constant values data, see examples. iterate similar recursive uses loop rather recursion.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/iterate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Iterative And Recursive Function Handlers — iterate","text":"","code":"## Newton's method for square root 1000 using a shorthand form anonymous function iterate(30, \\(y)((y + 1000 / y) / 2)) #> [1] 31.62278 recursive(30, \\(y)((y + 1000 / y) / 2)) #> [1] 31.62278  ## Newton's method for any square root using a function defined within a function newtroot <- function(x, est = x / 2) {    func <- function(y) (y + x / y) / 2    iterate(est, func) }  newtroot(1000) #> [1] 31.62278 newtroot(1000, 30) #> [1] 31.62278  newtroot <- function(x, est = x / 2) {    func <- function(y) (y + x / y) / 2    recursive(est, func) }  newtroot(1000) #> [1] 31.62278 newtroot(1000, 30) #> [1] 31.62278  ## More directly using a shorthand form anonymous function within a function newtroot <- function(x, est = x / 2)    iterate(est, \\(y)((y + x / y) / 2))  newtroot(1000) #> [1] 31.62278  newtroot <- function(x, est = x / 2)    recursive(est, \\(y)((y + x / y) / 2))  newtroot(1000) #> [1] 31.62278  ##  Build in greater precision using tolerance argument ##  - albeit not seen without changing options(\"digits\") newtroot <- function(x, est = x / 2)    iterate(est, \\(y)((y + x / y) / 2), tolerance = 15)  newtroot(1000) #> [1] 31.62278  newtroot <- function(x, est = x / 2)    recursive(est, \\(y)((y + x / y) / 2), tolerance = 15)  newtroot(1000) #> [1] 31.62278  ##  Build in less precision using tolerance argument ##  - not easily seen without changing options(\"digits\") newtroot <- function(x, est = x / 2)    iterate(est, \\(y)((y + x / y) / 2), tolerance = 0)  newtroot(1000) #> [1] 31.62278  ##  - More easily seen without changing options(\"digits\") newtroot <- function(x, est = x / 2)    recursive(est, \\(y)((y + x / y) / 2), tolerance = 0)  newtroot(1000) #> [1] 31.64186  ## Changing options(\"digits\") also gives greater precision by default dig <- options(digits = 15)  newtroot <- function(x, est = x / 2)    iterate(est, \\(y)((y + x / y) / 2))  newtroot(0.001, .03) #> [1] 0.0316227766016838  newtroot <- function(x, est = x / 2)    recursive(est, \\(y)((y + x / y) / 2))  newtroot(0.001, .03) #> [1] 0.0316227766016838  options(digits = dig$digits) rm(dig)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/j.html","id":null,"dir":"Reference","previous_headings":"","what":"Amount of Interest from an Effective Rate, a Payment Frequency and a Balance — j","title":"Amount of Interest from an Effective Rate, a Payment Frequency and a Balance — j","text":"j() calculates j, amount interest payable effective rate, payment frequency balance. j2eff_rate() calculates effective interest rate amount interest payable, payment frequency balance.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amount of Interest from an Effective Rate, a Payment Frequency and a Balance — j","text":"","code":"j(eff_rate, pay_fq, bal = 1)  j2eff_rate(j, pay_fq, bal = 1)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Amount of Interest from an Effective Rate, a Payment Frequency and a Balance — j","text":"eff_rate numeric, effective annual rate interest. pay_fq, integer, payment frequency per year. bal numeric, balance loan; default 1. j numeric, interest payment.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Amount of Interest from an Effective Rate, a Payment Frequency and a Balance — j","text":"numeric: j() returns calculated interest payment; j2eff_rate() returns effective rate interest.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Amount of Interest from an Effective Rate, a Payment Frequency and a Balance — j","text":"Interest payable (j): — $$j = \\displaystyle \\left(\\left(1 + er \\right)^{\\frac{1}{pf}} - 1 \\right).bal$$ Effective rate (er): — $$er = \\displaystyle \\left(1 + \\frac{j}{bal} \\right)^{pf} - 1$$ \\(j\\) interest payment, \\(er\\) effective rate, \\(pf\\) payment frequency, \\(bal\\) balance. See amort.period() package FinancialMath details.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Amount of Interest from an Effective Rate, a Payment Frequency and a Balance — j","text":"","code":"j(0.05915929, 12, 4000) #> [1] 19.20444  j2eff_rate(19.20444, 12, 4000) #> [1] 0.05915928"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Kurtosis — kurtosis","title":"Kurtosis — kurtosis","text":"Computes kurtosis, \\(\\gamma_{2}\\), values x optional adjustment give \\(G_{2}\\), expected populaton value kurtosis sample.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kurtosis — kurtosis","text":"","code":"kurtosis(x, xs = TRUE, adjust = TRUE)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kurtosis — kurtosis","text":"x numeric vector. xs logical, indicating whether calculate excess kurtosis .e., difference kurtosis normal distribution; default TRUE. adjust logical, indicating whether x sample population; default TRUE.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kurtosis — kurtosis","text":"numeric containing kurtosis value.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kurtosis — kurtosis","text":"Moments samples size n given : - $$m_{r} = \\displaystyle \\frac{\\sum \\left(x - \\overline{x} \\right)^{r}}{n}$$ (excess) kurtosis \\(\\gamma_{2}\\) numeric variable fourth moment (\\(m_{4}\\)) mean rendered dimensionless dividing square second moment (\\(m_{2}\\)), 3, value (\\(m_{4}/m_{2}^2\\)) normal distribution subtracted: - $$\\gamma_{2} = \\displaystyle \\frac{m_4}{{m_{2}}^2} - 3$$ expected population value (excess) kurtosis \\(G_{2}\\) sample obtained using: - $$G_{2} = \\displaystyle \\frac{(n - 1)}{(n-2)(n-3)}[(n+1)\\gamma_{2} + 6]$$ (Adapted Crawley, 2012, Joanes Gill, 1998.)","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kurtosis — kurtosis","text":"Crawley, Michael J. (2012) R Book. John Wiley & Sons, Incorporated. ISBN:9780470973929. p.350-352. doi:10.1002/9781118448908 Joanes, D.N., Gill, C.. (1998). Comparing measures sample kurtosis kurtosis. Journal Royal Statistical Society. Series D (Statistician) 47(1): 183–189. doi:10.1111/1467-9884.00122","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kurtosis — kurtosis","text":"","code":"## Heights of 100 randomly selected male university students, adapted from Spiegel and Stephens  ## (Theory and Problems of Statistics. 4th edn. McGraw-Hill. 1999. ISBN 9780071755498).  table(heights) #> heights #> 61 64 67 70 73  #>  5 18 42 27  8   hist(heights, seq(59.5, 74.5, 3))   kurtosis(heights)  #> [1] -0.2091471  kurtosis(heights, adjust = FALSE) #> [1] -0.258241   ## Litter sizes in albino rats (n = 815), data from King (1924; Litter production and  ## the sex ratio in various strains of rats. The Anatomical Record 27(5), 337-366).  table(litter_sizes) #> litter_sizes #>   1   2   3   4   5   6   7   8   9  10  11  12  #>   7  33  58 116 125 126 121 107  56  37  25   4   hist(litter_sizes, 0:12)   kurtosis(litter_sizes)  #> [1] -0.4761573  kurtosis(litter_sizes, adjust = FALSE) #> [1] -0.4805941"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test of Kurtosis — kurtosis.test","title":"Test of Kurtosis — kurtosis.test","text":"Computes \\(G_{2}\\), expected population kurtosis values x using kurtosis(), performs t-test significance calculates confidence interval.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test of Kurtosis — kurtosis.test","text":"","code":"kurtosis.test(   x,   alternative = c(\"two.sided\", \"less\", \"greater\"),   se_method = c(\"Cramer\", \"simple\"),   conf.level = 0.95 )  kurt.test(   x,   alternative = c(\"two.sided\", \"less\", \"greater\"),   se_method = c(\"Cramer\", \"simple\"),   conf.level = 0.95 )  stderr_kurtosis(n, se_method = c(\"Cramer\", \"simple\"))"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test of Kurtosis — kurtosis.test","text":"x numeric vector. alternative character string specifying alternative     hypothesis, must one \"two.sided\" (default),     \"greater\" \"less\".  can specify just initial     letter. se_method character string specifying method calculating standard error; must one \"Cramer\" (default), \"simple\". can specify just initial letter. conf.level confidence level required; default 0.95. n integer, number observations.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test of Kurtosis — kurtosis.test","text":"list class \"htest\" containing following components: - statistic value t-statistic. parameter degrees freedom t-statistic. p.value p-value test. conf.int confidence interval kurtosis (95% specified level). estimate estimate kurtosis. alternative character string describing alternative hypothesis. method character string \"Kurtosis t-test\" standard error method used. data.name character string giving name data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test of Kurtosis — kurtosis.test","text":"t-statistic given estimated population kurtosis, \\(G_{2}\\), divided standard error, \\(SE_{G_{2}}\\), : - $$SE_{G_{2}} = \\displaystyle 2(SE_{G_{1}}) \\sqrt{\\frac{(n^{2} - 1)}{(n-3)(n+5)}}$$ (see e.g., Joanes Gill, 1998; Wright Herrington 2011), alternatively approximation, \\(\\sqrt (24 / n_x)\\), associated probability derived t-distribution \\(n_{x}-2\\) degrees freedom. t-test conducted according Crawley (2012), except default two-tailed test. corresponding confidence interval calculated similarly quantiles t-distribution using alternative conf.level arguments. kurt.test() alias kurtosis.test().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test of Kurtosis — kurtosis.test","text":"confidence interval poorly described available literature, seems somewhat controversial used caution.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test of Kurtosis — kurtosis.test","text":"Crawley, Michael J. (2012) R Book. John Wiley & Sons, Incorporated. ISBN:9780470973929. p.350-352. doi:10.1002/9781118448908 Joanes, D.N., Gill, C.. (1998). Comparing measures sample skewness kurtosis. Journal Royal Statistical Society. Series D (Statistician) 47(1): 183–189. doi:10.1111/1467-9884.00122 Wright, D.B., Herrington, J.. (2011). Problematic standard errors confidence intervals skewness kurtosis. Behavior Research Methods 43(1): 8-17. doi:10.3758/s13428-010-0044-x","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kurtosis.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test of Kurtosis — kurtosis.test","text":"","code":"## Heights of 100 randomly selected male university students, adapted from Spiegel and Stephens  ## (Theory and Problems of Statistics. 4th edn. McGraw-Hill. 1999. ISBN 9780071755498).  table(heights) #> heights #> 61 64 67 70 73  #>  5 18 42 27  8   kurtosis.test(heights)  #>  #> \tKurtosis with t-test (Cramer stderr) #>  #> data:  heights #> t = -0.43724, df = 98, p-value = 0.6629 #> alternative hypothesis: true kurtosis is not equal to 0 #> 95 percent confidence interval: #>  -1.1583796  0.7400855 #> sample estimates: #>   kurtosis  #> -0.2091471  #>   length(heights) |> stderr_kurtosis() #> [1] 0.4783311  kurtosis.test(heights, se_method = \"simple\") #>  #> \tKurtosis with t-test (simple stderr) #>  #> data:  heights #> t = -0.42692, df = 98, p-value = 0.6704 #> alternative hypothesis: true kurtosis is not equal to 0 #> 95 percent confidence interval: #>  -1.1813336  0.7630395 #> sample estimates: #>   kurtosis  #> -0.2091471  #>   length(heights) |> stderr_kurtosis(se_method = \"simple\") #> [1] 0.4898979   ## Litter sizes in albino rats (n = 815), data from King (1924; Litter production and  ## the sex ratio in various strains of rats. The Anatomical Record 27(5), 337-366).  table(litter_sizes) #> litter_sizes #>   1   2   3   4   5   6   7   8   9  10  11  12  #>   7  33  58 116 125 126 121 107  56  37  25   4   kurtosis.test(litter_sizes)  #>  #> \tKurtosis with t-test (Cramer stderr) #>  #> data:  litter_sizes #> t = -2.7832, df = 813, p-value = 0.005507 #> alternative hypothesis: true kurtosis is not equal to 0 #> 95 percent confidence interval: #>  -0.8119700 -0.1403447 #> sample estimates: #>   kurtosis  #> -0.4761573  #>   length(litter_sizes) |> stderr_kurtosis() #> [1] 0.1710811"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kwd_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Logical Columns to Data Frame Flagging Presence of Keywords — kwd_cols","title":"Add Logical Columns to Data Frame Flagging Presence of Keywords — kwd_cols","text":"Function add logical columns indicating whether specified keywords present character column data frame.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kwd_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Logical Columns to Data Frame Flagging Presence of Keywords — kwd_cols","text":"","code":"kwd_cols(data, .look_in = Response, value)  kwd_cols(data, .look_in = Response) <- value  lgl_cols(data)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kwd_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Logical Columns to Data Frame Flagging Presence of Keywords — kwd_cols","text":"data data frame, data frame extension (e.g. tibble). .look_in <data-masking> quoted name character column look keywords; default Response. value character vector containing keywords identified.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kwd_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Logical Columns to Data Frame Flagging Presence of Keywords — kwd_cols","text":"kwd_cols() returns modified data frame logical columns indicating presence keywords .look_in. infix form function kwd_cols<-() modifies returns original data frame. lgl_cols() returns character vector names logical columns data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kwd_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Logical Columns to Data Frame Flagging Presence of Keywords — kwd_cols","text":"character column data identified .look_in searched keywords provided value using str_detect. keyword search case insensitive. character column identified look_in present data, error message given. logical columns resulting use kwd_cols() infix form kwd_cols()<- may analysed number TRUE values counted using functions count_lgl sum_lgl. function lgl_cols() returns names logical columns data.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/kwd_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Logical Columns to Data Frame Flagging Presence of Keywords — kwd_cols","text":"","code":"(car_names <- data.frame(Response = rownames(mtcars))) #>               Response #> 1            Mazda RX4 #> 2        Mazda RX4 Wag #> 3           Datsun 710 #> 4       Hornet 4 Drive #> 5    Hornet Sportabout #> 6              Valiant #> 7           Duster 360 #> 8            Merc 240D #> 9             Merc 230 #> 10            Merc 280 #> 11           Merc 280C #> 12          Merc 450SE #> 13          Merc 450SL #> 14         Merc 450SLC #> 15  Cadillac Fleetwood #> 16 Lincoln Continental #> 17   Chrysler Imperial #> 18            Fiat 128 #> 19         Honda Civic #> 20      Toyota Corolla #> 21       Toyota Corona #> 22    Dodge Challenger #> 23         AMC Javelin #> 24          Camaro Z28 #> 25    Pontiac Firebird #> 26           Fiat X1-9 #> 27       Porsche 914-2 #> 28        Lotus Europa #> 29      Ford Pantera L #> 30        Ferrari Dino #> 31       Maserati Bora #> 32          Volvo 142E  kwd <- c(\"Mazda\", \"Merc\", \"Toyota\", \"Volkswagen\", \"X\", \"450\") car_names |> kwd_cols(value = kwd) #>               Response Mazda  Merc Toyota Volkswagen     X   450 #> 1            Mazda RX4  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 2        Mazda RX4 Wag  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 3           Datsun 710 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 4       Hornet 4 Drive FALSE FALSE  FALSE      FALSE FALSE FALSE #> 5    Hornet Sportabout FALSE FALSE  FALSE      FALSE FALSE FALSE #> 6              Valiant FALSE FALSE  FALSE      FALSE FALSE FALSE #> 7           Duster 360 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 8            Merc 240D FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 9             Merc 230 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 10            Merc 280 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 11           Merc 280C FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 12          Merc 450SE FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 13          Merc 450SL FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 14         Merc 450SLC FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 15  Cadillac Fleetwood FALSE FALSE  FALSE      FALSE FALSE FALSE #> 16 Lincoln Continental FALSE FALSE  FALSE      FALSE FALSE FALSE #> 17   Chrysler Imperial FALSE FALSE  FALSE      FALSE FALSE FALSE #> 18            Fiat 128 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 19         Honda Civic FALSE FALSE  FALSE      FALSE FALSE FALSE #> 20      Toyota Corolla FALSE FALSE   TRUE      FALSE FALSE FALSE #> 21       Toyota Corona FALSE FALSE   TRUE      FALSE FALSE FALSE #> 22    Dodge Challenger FALSE FALSE  FALSE      FALSE FALSE FALSE #> 23         AMC Javelin FALSE FALSE  FALSE      FALSE FALSE FALSE #> 24          Camaro Z28 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 25    Pontiac Firebird FALSE FALSE  FALSE      FALSE FALSE FALSE #> 26           Fiat X1-9 FALSE FALSE  FALSE      FALSE  TRUE FALSE #> 27       Porsche 914-2 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 28        Lotus Europa FALSE FALSE  FALSE      FALSE FALSE FALSE #> 29      Ford Pantera L FALSE FALSE  FALSE      FALSE FALSE FALSE #> 30        Ferrari Dino FALSE FALSE  FALSE      FALSE FALSE FALSE #> 31       Maserati Bora FALSE FALSE  FALSE      FALSE FALSE FALSE #> 32          Volvo 142E FALSE FALSE  FALSE      FALSE FALSE FALSE car_names    ## Original data frame unchanged #>               Response #> 1            Mazda RX4 #> 2        Mazda RX4 Wag #> 3           Datsun 710 #> 4       Hornet 4 Drive #> 5    Hornet Sportabout #> 6              Valiant #> 7           Duster 360 #> 8            Merc 240D #> 9             Merc 230 #> 10            Merc 280 #> 11           Merc 280C #> 12          Merc 450SE #> 13          Merc 450SL #> 14         Merc 450SLC #> 15  Cadillac Fleetwood #> 16 Lincoln Continental #> 17   Chrysler Imperial #> 18            Fiat 128 #> 19         Honda Civic #> 20      Toyota Corolla #> 21       Toyota Corona #> 22    Dodge Challenger #> 23         AMC Javelin #> 24          Camaro Z28 #> 25    Pontiac Firebird #> 26           Fiat X1-9 #> 27       Porsche 914-2 #> 28        Lotus Europa #> 29      Ford Pantera L #> 30        Ferrari Dino #> 31       Maserati Bora #> 32          Volvo 142E  kwd_cols(car_names)<- kwd car_names    ## Original data frame modified by infix version #>               Response Mazda  Merc Toyota Volkswagen     X   450 #> 1            Mazda RX4  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 2        Mazda RX4 Wag  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 3           Datsun 710 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 4       Hornet 4 Drive FALSE FALSE  FALSE      FALSE FALSE FALSE #> 5    Hornet Sportabout FALSE FALSE  FALSE      FALSE FALSE FALSE #> 6              Valiant FALSE FALSE  FALSE      FALSE FALSE FALSE #> 7           Duster 360 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 8            Merc 240D FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 9             Merc 230 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 10            Merc 280 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 11           Merc 280C FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 12          Merc 450SE FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 13          Merc 450SL FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 14         Merc 450SLC FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 15  Cadillac Fleetwood FALSE FALSE  FALSE      FALSE FALSE FALSE #> 16 Lincoln Continental FALSE FALSE  FALSE      FALSE FALSE FALSE #> 17   Chrysler Imperial FALSE FALSE  FALSE      FALSE FALSE FALSE #> 18            Fiat 128 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 19         Honda Civic FALSE FALSE  FALSE      FALSE FALSE FALSE #> 20      Toyota Corolla FALSE FALSE   TRUE      FALSE FALSE FALSE #> 21       Toyota Corona FALSE FALSE   TRUE      FALSE FALSE FALSE #> 22    Dodge Challenger FALSE FALSE  FALSE      FALSE FALSE FALSE #> 23         AMC Javelin FALSE FALSE  FALSE      FALSE FALSE FALSE #> 24          Camaro Z28 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 25    Pontiac Firebird FALSE FALSE  FALSE      FALSE FALSE FALSE #> 26           Fiat X1-9 FALSE FALSE  FALSE      FALSE  TRUE FALSE #> 27       Porsche 914-2 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 28        Lotus Europa FALSE FALSE  FALSE      FALSE FALSE FALSE #> 29      Ford Pantera L FALSE FALSE  FALSE      FALSE FALSE FALSE #> 30        Ferrari Dino FALSE FALSE  FALSE      FALSE FALSE FALSE #> 31       Maserati Bora FALSE FALSE  FALSE      FALSE FALSE FALSE #> 32          Volvo 142E FALSE FALSE  FALSE      FALSE FALSE FALSE  lgl_cols(car_names) #> [1] \"Mazda\"      \"Merc\"       \"Toyota\"     \"Volkswagen\" \"X\"          #> [6] \"450\"        identical(kwd, lgl_cols(car_names)) #> [1] TRUE rm(car_names, kwd)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/latlon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Latitude and Longitude Object — latlon","title":"Create Latitude and Longitude Object — latlon","text":"function latlon() used create \"latlon\" objects representing paired coordinates latitude longitude either decimal degrees degrees, minutes seconds. latlon_dd() creates \"latlon\" objects decimal degrees.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/latlon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Latitude and Longitude Object — latlon","text":"","code":"latlon(object, ...)  # Default S3 method latlon(object, ..., decimal = FALSE, .fmt = c(\"deg\", \"min\", \"sec\"))  # S3 method for class 'matrix' latlon(object, ..., decimal = FALSE, .fmt = c(\"deg\", \"min\", \"sec\"))  latlon_dd(object)  # S3 method for class 'latlon' print(x, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/latlon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Latitude and Longitude Object — latlon","text":"object numeric vector, representing coordinate latitude longitude decimal degrees degrees, minutes seconds; two-column numeric matrix representing number coordinates. ... arguments passed methods. decimal logical, TRUE indicating whether coordinate represented object decimal degrees otherwise degrees, minutes seconds; default FALSE. .fmt character string indicating position decimal point object; must one \"deg\" (default), \"min\", \"sec\". can specify just initial letter. x object printed.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/latlon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Latitude and Longitude Object — latlon","text":"object class \"latlon\" instantiating coordinate latitude longitude decimal degrees degrees, minutes seconds, comprising list either two \"decdeg\" two \"degminsec\" objects, attribute \"degrtype\" indicating two types object ; length(object) > 1, list \"latlon\" objects.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/latlon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Latitude and Longitude Object — latlon","text":"latlon() generic S3 function. default method works numeric vector length 2 representing coordinate paired latitude longitude values. method class \"matrix\" works two column numeric matrix row contains paired latitude longitude values. latlon_dd() convenience function, latlon_dd(...) equivalent latlon(..., decimal = TRUE).","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/latlon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Latitude and Longitude Object — latlon","text":"","code":"## Decimal degrees latlon(c(49.54621, 18.398562), decimal = TRUE) #> \t49.546210, 18.398562 decimal degrees  ## degrees, minutes and seconds latlon(c(49.3246368, 18.2354822)) #> \t49°32'46.368\"N, 18°23'54.822\"E latlon(c(493246.368, 182354.822), .fmt = \"sec\") #> \t49°32'46.368\"N, 18°23'54.822\"E  ## Decimal degrees—convenience function latlon_dd(c(49.54621, 18.398562)) #> \t49.546210, 18.398562 decimal degrees  ## Two-column numeric `matrix` in decimal degrees (ll_mtx <- matrix(        c(51.507765, 49.54621, 48.107232, 38.889494, 0, -37.11174, -53.104781,          -0.127924, 18.398562, -122.778671, -77.035242, 0, -12.28863, 73.517283),         ncol = 2,         dimnames = list(             c(\"Nelson's Column\", \"Ostravice\", \"Tally Ho\", \"Washington Monument\",               \"Null Island\", \"Tristan da Cunha\", \"Mawson Peak\")         )     )) #>                          [,1]        [,2] #> Nelson's Column      51.50776   -0.127924 #> Ostravice            49.54621   18.398562 #> Tally Ho             48.10723 -122.778671 #> Washington Monument  38.88949  -77.035242 #> Null Island           0.00000    0.000000 #> Tristan da Cunha    -37.11174  -12.288630 #> Mawson Peak         -53.10478   73.517283  latlon(ll_mtx, decimal = TRUE) #> $`Nelson's Column` #> \t51.507765, -0.127924 decimal degrees #>  #> $Ostravice #> \t49.546210, 18.398562 decimal degrees #>  #> $`Tally Ho` #> \t48.107232, -122.778671 decimal degrees #>  #> $`Washington Monument` #> \t38.889494, -77.035242 decimal degrees #>  #> $`Null Island` #> \t0.000000, 0.000000 decimal degrees #>  #> $`Tristan da Cunha` #> \t-37.111740, -12.288630 decimal degrees #>  #> $`Mawson Peak` #> \t-53.104781, 73.517283 decimal degrees #>   ## Two-column numeric `matrix` in degrees, minutes and seconds ## Deg Min Sec ll_mtx[1:14] <- c(     51.3027954, 49.3246368, 48.0626035, 38.5322178, 0, -37.0642264, -53.0617212,     -0.0740526, 18.2354822, -122.464322, -77.0206871, 0, -12.1719068, 73.3102219 )  ll_mtx #>                          [,1]         [,2] #> Nelson's Column      51.30280   -0.0740526 #> Ostravice            49.32464   18.2354822 #> Tally Ho             48.06260 -122.4643220 #> Washington Monument  38.53222  -77.0206871 #> Null Island           0.00000    0.0000000 #> Tristan da Cunha    -37.06423  -12.1719068 #> Mawson Peak         -53.06172   73.3102219  latlon(ll_mtx) #> $`Nelson's Column` #> \t51°30'27.954\"N, 0°07'40.526\"W #>  #> $Ostravice #> \t49°32'46.368\"N, 18°23'54.822\"E #>  #> $`Tally Ho` #> \t48°06'26.035\"N, 122°46'43.220\"W #>  #> $`Washington Monument` #> \t38°53'22.178\"N, 77°02'06.871\"W #>  #> $`Null Island` #> \t0°00'00.000\"N, 0°00'00.000\"E #>  #> $`Tristan da Cunha` #> \t37°06'42.264\"S, 12°17'19.068\"W #>  #> $`Mawson Peak` #> \t53°06'17.212\"S, 73°31'02.219\"E #>   rm(ll_mtx)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/lf.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe-Friendly Line Feeds and Printing — lf","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"lf() outputs one line feeds piped sequence.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/lf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"","code":"lf(x, n = 1)  print_lf(x, n = 1)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/lf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"x Object piped. n Number line feeds; default 1.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/lf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"Invisibly returns first argument.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/lf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"print_lf() prints object piped sequence outputs one line feeds. object passed argument piped sequence printed /one line feeds output piped sequence using cat(). can useful separate lines printed output, see examples.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/lf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe-Friendly Line Feeds and Printing — lf","text":"","code":"obj <- \"Lorem ipsum dolor sit amet\" obj |> lf()               # line feed, object returned invisibly #>  obj |> lf(3)              # three line feeds, object returned invisibly #>  #>   #>   (obj |> lf(3))            # three line feeds, returned object rendered visible #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet\" obj |> lf(3) |> paste(\"consectetur adipiscing elit\", sep = \", \") #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\"  obj |> print() |> lf(3)   # line feeds are unexpectedly before printed output. #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet\"  ## Use print_lf() instead obj |> print_lf()         # object printed with line feed and returned invisibly #> [1] \"Lorem ipsum dolor sit amet\" #>  obj |> print_lf(3)        # object printed with three line feeds and returned invisibly #> [1] \"Lorem ipsum dolor sit amet\" #>  #>   #>   (obj |> print_lf(3))      # Ditto, then rendered visible #> [1] \"Lorem ipsum dolor sit amet\" #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet\" obj |> print_lf(3) |> paste(\"consectetur adipiscing elit\", sep = \", \") #> [1] \"Lorem ipsum dolor sit amet\" #>  #>   #>   #> [1] \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\"  rm(obj)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/list_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Data Frame into a List Based on Values in Logical Columns — list_lgl","title":"Split Data Frame into a List Based on Values in Logical Columns — list_lgl","text":"Split data frame named list tibble data frames basis new data frame forming element list comprises rows original data frame contained TRUE values particular logical column.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/list_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Data Frame into a List Based on Values in Logical Columns — list_lgl","text":"","code":"list_lgl(.data, ...)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/list_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Data Frame into a List Based on Values in Logical Columns — list_lgl","text":".data data frame, data frame extension (e.g. tibble). ... <tidy-select> selection columns data included tibbles comprising elements returned list.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/list_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Data Frame into a List Based on Values in Logical Columns — list_lgl","text":"named list tibble data frames containing selected rows columns original data frame, length equal number logical columns original data frame names corresponding logical columns.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/list_lgl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Data Frame into a List Based on Values in Logical Columns — list_lgl","text":"Columns data included tibbles comprising list returned may selected using ... argument <tidy-select> syntax package dplyr, including use selection helpers. argument omitted, non-logical columns selected using tidy selection predicate function (\\(x) !.logical(x)). length list returned equal number logical columns original data frame. list element named corresponding logical column data rows TRUE values selected inclusion tibble. list_lgl() may used tease information character column data frame containing selected keywords previously flagged logical columns using kwd_cols, see examples. Finally, named list may converted back single data frame using bind_rows, see examples.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/list_lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Data Frame into a List Based on Values in Logical Columns — list_lgl","text":"","code":"## Following on from kwd_cols() examples…  car_names <- data.frame(Response = rownames(mtcars)) kwd <- c(\"Mazda\", \"Merc\", \"Toyota\", \"Volkswagen\", \"X\", \"450\") kwd_cols(car_names)<- kwd car_names #>               Response Mazda  Merc Toyota Volkswagen     X   450 #> 1            Mazda RX4  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 2        Mazda RX4 Wag  TRUE FALSE  FALSE      FALSE  TRUE FALSE #> 3           Datsun 710 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 4       Hornet 4 Drive FALSE FALSE  FALSE      FALSE FALSE FALSE #> 5    Hornet Sportabout FALSE FALSE  FALSE      FALSE FALSE FALSE #> 6              Valiant FALSE FALSE  FALSE      FALSE FALSE FALSE #> 7           Duster 360 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 8            Merc 240D FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 9             Merc 230 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 10            Merc 280 FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 11           Merc 280C FALSE  TRUE  FALSE      FALSE FALSE FALSE #> 12          Merc 450SE FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 13          Merc 450SL FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 14         Merc 450SLC FALSE  TRUE  FALSE      FALSE FALSE  TRUE #> 15  Cadillac Fleetwood FALSE FALSE  FALSE      FALSE FALSE FALSE #> 16 Lincoln Continental FALSE FALSE  FALSE      FALSE FALSE FALSE #> 17   Chrysler Imperial FALSE FALSE  FALSE      FALSE FALSE FALSE #> 18            Fiat 128 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 19         Honda Civic FALSE FALSE  FALSE      FALSE FALSE FALSE #> 20      Toyota Corolla FALSE FALSE   TRUE      FALSE FALSE FALSE #> 21       Toyota Corona FALSE FALSE   TRUE      FALSE FALSE FALSE #> 22    Dodge Challenger FALSE FALSE  FALSE      FALSE FALSE FALSE #> 23         AMC Javelin FALSE FALSE  FALSE      FALSE FALSE FALSE #> 24          Camaro Z28 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 25    Pontiac Firebird FALSE FALSE  FALSE      FALSE FALSE FALSE #> 26           Fiat X1-9 FALSE FALSE  FALSE      FALSE  TRUE FALSE #> 27       Porsche 914-2 FALSE FALSE  FALSE      FALSE FALSE FALSE #> 28        Lotus Europa FALSE FALSE  FALSE      FALSE FALSE FALSE #> 29      Ford Pantera L FALSE FALSE  FALSE      FALSE FALSE FALSE #> 30        Ferrari Dino FALSE FALSE  FALSE      FALSE FALSE FALSE #> 31       Maserati Bora FALSE FALSE  FALSE      FALSE FALSE FALSE #> 32          Volvo 142E FALSE FALSE  FALSE      FALSE FALSE FALSE  list_lgl(car_names) #> $Mazda #>        Response #> 1     Mazda RX4 #> 2 Mazda RX4 Wag #>  #> $Merc #>       Response #> 8    Merc 240D #> 9     Merc 230 #> 10    Merc 280 #> 11   Merc 280C #> 12  Merc 450SE #> 13  Merc 450SL #> 14 Merc 450SLC #>  #> $Toyota #>          Response #> 20 Toyota Corolla #> 21  Toyota Corona #>  #> $Volkswagen #> [1] Response #> <0 rows> (or 0-length row.names) #>  #> $X #>         Response #> 1      Mazda RX4 #> 2  Mazda RX4 Wag #> 26     Fiat X1-9 #>  #> $`450` #>       Response #> 12  Merc 450SE #> 13  Merc 450SL #> 14 Merc 450SLC #>  list_lgl(car_names, Response, X) #> $Mazda #>        Response    X #> 1     Mazda RX4 TRUE #> 2 Mazda RX4 Wag TRUE #>  #> $Merc #>       Response     X #> 8    Merc 240D FALSE #> 9     Merc 230 FALSE #> 10    Merc 280 FALSE #> 11   Merc 280C FALSE #> 12  Merc 450SE FALSE #> 13  Merc 450SL FALSE #> 14 Merc 450SLC FALSE #>  #> $Toyota #>          Response     X #> 20 Toyota Corolla FALSE #> 21  Toyota Corona FALSE #>  #> $Volkswagen #> [1] Response X        #> <0 rows> (or 0-length row.names) #>  #> $X #>         Response    X #> 1      Mazda RX4 TRUE #> 2  Mazda RX4 Wag TRUE #> 26     Fiat X1-9 TRUE #>  #> $`450` #>       Response     X #> 12  Merc 450SE FALSE #> 13  Merc 450SL FALSE #> 14 Merc 450SLC FALSE #>  list_lgl(car_names, last_col()) #> $Mazda #>     450 #> 1 FALSE #> 2 FALSE #>  #> $Merc #>      450 #> 8  FALSE #> 9  FALSE #> 10 FALSE #> 11 FALSE #> 12  TRUE #> 13  TRUE #> 14  TRUE #>  #> $Toyota #>      450 #> 20 FALSE #> 21 FALSE #>  #> $Volkswagen #> [1] 450 #> <0 rows> (or 0-length row.names) #>  #> $X #>      450 #> 1  FALSE #> 2  FALSE #> 26 FALSE #>  #> $`450` #>     450 #> 12 TRUE #> 13 TRUE #> 14 TRUE #>  list_lgl(car_names, contains(\"o\")) #> $Mazda #>        Response Toyota Volkswagen #> 1     Mazda RX4  FALSE      FALSE #> 2 Mazda RX4 Wag  FALSE      FALSE #>  #> $Merc #>       Response Toyota Volkswagen #> 8    Merc 240D  FALSE      FALSE #> 9     Merc 230  FALSE      FALSE #> 10    Merc 280  FALSE      FALSE #> 11   Merc 280C  FALSE      FALSE #> 12  Merc 450SE  FALSE      FALSE #> 13  Merc 450SL  FALSE      FALSE #> 14 Merc 450SLC  FALSE      FALSE #>  #> $Toyota #>          Response Toyota Volkswagen #> 20 Toyota Corolla   TRUE      FALSE #> 21  Toyota Corona   TRUE      FALSE #>  #> $Volkswagen #> [1] Response   Toyota     Volkswagen #> <0 rows> (or 0-length row.names) #>  #> $X #>         Response Toyota Volkswagen #> 1      Mazda RX4  FALSE      FALSE #> 2  Mazda RX4 Wag  FALSE      FALSE #> 26     Fiat X1-9  FALSE      FALSE #>  #> $`450` #>       Response Toyota Volkswagen #> 12  Merc 450SE  FALSE      FALSE #> 13  Merc 450SL  FALSE      FALSE #> 14 Merc 450SLC  FALSE      FALSE #>   ## Convert back to single data frame car_names |>   list_lgl() |>   bind_rows(.id = \"Group\") #>     Group       Response #> 1   Mazda      Mazda RX4 #> 2   Mazda  Mazda RX4 Wag #> 3    Merc      Merc 240D #> 4    Merc       Merc 230 #> 5    Merc       Merc 280 #> 6    Merc      Merc 280C #> 7    Merc     Merc 450SE #> 8    Merc     Merc 450SL #> 9    Merc    Merc 450SLC #> 10 Toyota Toyota Corolla #> 11 Toyota  Toyota Corona #> 12      X      Mazda RX4 #> 13      X  Mazda RX4 Wag #> 14      X      Fiat X1-9 #> 15    450     Merc 450SE #> 16    450     Merc 450SL #> 17    450    Merc 450SLC  rm(kwd, car_names)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/litter_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Rat Litter Sizes — litter_sizes","title":"Rat Litter Sizes — litter_sizes","text":"Litter sizes albino rats (n = 815) Table 7 King (1924).","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/litter_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rat Litter Sizes — litter_sizes","text":"","code":"litter_sizes"},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/litter_sizes.html","id":"","dir":"Reference","previous_headings":"","what":"Rat Litter Sizes — litter_sizes","title":"Rat Litter Sizes — litter_sizes","text":"integer vector length 815. litter_sizes Sizes albino rat litters.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/litter_sizes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Rat Litter Sizes — litter_sizes","text":"King, H.D. (1924). Litter production sex ratio various strains rats. Anatomical Record, 27(5), 337-366. doi:10.1002/ar.1090270514 See also: https://brownmath.com","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Probability to Logit — logit","title":"Convert Probability to Logit — logit","text":"logit() converts probability corresponding logit value. prob_from_logit() converts logit value corresponding probability.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Probability to Logit — logit","text":"","code":"logit(x)  prob_from_logit(x)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Probability to Logit — logit","text":"x probability derive logit, logit derive probability.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Probability to Logit — logit","text":"logit returns derived logit; prob_from_logit returns derived probability.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/logit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Probability to Logit — logit","text":"logit defined log odds \\(\\log(p / q)\\), \\(q = 1 - p\\). probability may calculated logit inverse transformation: - $$p = \\exp(\\displaystyle \\frac{logit}{1 + logit})$$","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/logit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Probability to Logit — logit","text":"","code":"logit(0.5) #> [1] 0 prob_from_logit(0) #> [1] 0.5  (s <- seq(-10, 10, by = 2)) #>  [1] -10  -8  -6  -4  -2   0   2   4   6   8  10 s[1:6] + s[11:6] #> [1] 0 0 0 0 0 0  (s <- prob_from_logit(s)) #>  [1] 4.539787e-05 3.353501e-04 2.472623e-03 1.798621e-02 1.192029e-01 #>  [6] 5.000000e-01 8.807971e-01 9.820138e-01 9.975274e-01 9.996646e-01 #> [11] 9.999546e-01 s[1:6] + s[11:6] #> [1] 1 1 1 1 1 1  (s <- logit(s)) #>  [1] -10  -8  -6  -4  -2   0   2   4   6   8  10  rm(s)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/marker.html","id":null,"dir":"Reference","previous_headings":"","what":"Inlinable Marker Function for Function Development — marker","title":"Inlinable Marker Function for Function Development — marker","text":"inlinable function outputs user modifiable message identifying enclosing function using sys.call returns first argument, .","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/marker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inlinable Marker Function for Function Development — marker","text":"","code":"marker(rval = NULL, msg = \"in Mimiland\")"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/marker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inlinable Marker Function for Function Development — marker","text":"rval value returned; default NULL. msg ending output message. Since argument follows rval, normally ever supplied inline, name omitted unless either follows comma marker() inlined; default \"Mimiland\".","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/marker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inlinable Marker Function for Function Development — marker","text":"first argument rval , otherwise NULL.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/marker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inlinable Marker Function for Function Development — marker","text":"Mainly useful side effect message, can used distinguish among versions function development. Can used within function may inlined <piped sequence> using |>, see examples.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/marker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inlinable Marker Function for Function Development — marker","text":"","code":"f1 <- function() marker() f1() #> f1 running in Mimiland   f2 <- function() marker(msg = \"in BitsnBobs\") f2() #> f2 running in BitsnBobs   f3 <- function() marker(, \"in BitsnBobs\") f3() #> f3 running in BitsnBobs   ## Use inline in \"piped\" sequence f4 <- function(x) x |> marker() |> sqrt() f4(9) #> f4 running in Mimiland  #> [1] 3  f5 <- function(x) x |> marker(msg = \"inlined in BitsnBobs\") |> exp() f5(1) #> f5 running inlined in BitsnBobs  #> [1] 2.718282  f6 <- function(x) x |> marker(\"inlined in BitsnBobs\") |> log() f4(1) |> f5() |> f6() #> f6 running inlined in BitsnBobs  #> f5 running inlined in BitsnBobs  #> f4 running in Mimiland  #> [1] 1  rm_objects(f, 1:6) #> Objects matching \"f…\" found in (unnamed) environment: – #> \t f1 f2 f3 f4 f5 f6  #> Objects matching \"f…\" remaining in (unnamed) environment: – #> \t All gone!"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/method_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Info Attribute of utils::Methods() Function — method_info","title":"Info Attribute of utils::Methods() Function — method_info","text":"Information available methods S3 S4 generic function, methods S3 S4 class.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/method_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info Attribute of utils::Methods() Function — method_info","text":"","code":"method_info(..., .arrange_by = across(everything()))"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/method_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info Attribute of utils::Methods() Function — method_info","text":"... Arguments passed utils::methods generic.function generic function, character string naming     generic function. class symbol character string naming class: used     generic.function supplied. .arrange_by <data-masking> names columns functions ordering results using syntax dplyr arrange(). Use desc() sort variable descending order.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/method_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info Attribute of utils::Methods() Function — method_info","text":"data.frame class attributes c(\"info_df\", \"catapult\", \"data.frame\") following columns: - Method character vector S3 method names obtained pasting generic function class together. Visible logical, method exported namespace package defined? factor, location package name method found. Generic character vector names generic. isS4 logical, true method S4 method.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/method_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Info Attribute of utils::Methods() Function — method_info","text":"method_info() provides information available methods S3 S4 generic function, methods S3 S4 class obtained \"info\" attribute returned methods(), informative usual simple character vector printed output. print_all() S3 method class MethodsFunction works similarly used internally method_info().","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/method_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Info Attribute of utils::Methods() Function — method_info","text":"","code":"methods(summary) #>  [1] summary.Date                        summary.POSIXct                     #>  [3] summary.POSIXlt                     summary.aov                         #>  [5] summary.aovlist*                    summary.aspell*                     #>  [7] summary.check_packages_in_dir*      summary.connection                  #>  [9] summary.data.frame                  summary.default                     #> [11] summary.ecdf*                       summary.factor                      #> [13] summary.ggplot*                     summary.glm                         #> [15] summary.hcl_palettes*               summary.infl*                       #> [17] summary.lm                          summary.loess*                      #> [19] summary.loglm*                      summary.manova                      #> [21] summary.matrix                      summary.mlm*                        #> [23] summary.negbin*                     summary.nls*                        #> [25] summary.packageStatus*              summary.polr*                       #> [27] summary.ppr*                        summary.prcomp*                     #> [29] summary.princomp*                   summary.proc_time                   #> [31] summary.rlang:::list_of_conditions* summary.rlang_error*                #> [33] summary.rlang_message*              summary.rlang_trace*                #> [35] summary.rlang_warning*              summary.rlm*                        #> [37] summary.srcfile                     summary.srcref                      #> [39] summary.stepfun                     summary.stl*                        #> [41] summary.table                       summary.tukeysmooth*                #> [43] summary.vctrs_sclr*                 summary.vctrs_vctr*                 #> [45] summary.warnings                    #> see '?methods' for accessing help and source code method_info(summary) #> _____________ #> S3 Methods: - #>  #>  Method                             Visible From                            #>  summary.Date                        TRUE   base                            #>  summary.POSIXct                     TRUE   base                            #>  summary.POSIXlt                     TRUE   base                            #>  summary.aov                         TRUE   stats                           #>  summary.aovlist                    FALSE   registered S3method for summary #>  summary.aspell                     FALSE   registered S3method for summary #>  summary.check_packages_in_dir      FALSE   registered S3method for summary #>  summary.connection                  TRUE   base                            #>  summary.data.frame                  TRUE   base                            #>  summary.default                     TRUE   base                            #>  summary.ecdf                       FALSE   registered S3method for summary #>  summary.factor                      TRUE   base                            #>  summary.ggplot                     FALSE   registered S3method for summary #>  summary.glm                         TRUE   stats                           #>  summary.hcl_palettes               FALSE   registered S3method for summary #>  summary.infl                       FALSE   registered S3method for summary #>  summary.lm                          TRUE   stats                           #>  summary.loess                      FALSE   registered S3method for summary #>  summary.loglm                      FALSE   registered S3method for summary #>  summary.manova                      TRUE   stats                           #>  summary.matrix                      TRUE   base                            #>  summary.mlm                        FALSE   registered S3method for summary #>  summary.negbin                     FALSE   registered S3method for summary #>  summary.nls                        FALSE   registered S3method for summary #>  summary.packageStatus              FALSE   registered S3method for summary #>  summary.polr                       FALSE   registered S3method for summary #>  summary.ppr                        FALSE   registered S3method for summary #>  summary.prcomp                     FALSE   registered S3method for summary #>  summary.princomp                   FALSE   registered S3method for summary #>  summary.proc_time                   TRUE   base                            #>  summary.rlang:::list_of_conditions FALSE   registered S3method for summary #>  summary.rlang_error                FALSE   registered S3method for summary #>  summary.rlang_message              FALSE   registered S3method for summary #>  summary.rlang_trace                FALSE   registered S3method for summary #>  summary.rlang_warning              FALSE   registered S3method for summary #>  summary.rlm                        FALSE   registered S3method for summary #>  summary.srcfile                     TRUE   base                            #>  summary.srcref                      TRUE   base                            #>  summary.stepfun                     TRUE   stats                           #>  summary.stl                        FALSE   registered S3method for summary #>  summary.table                       TRUE   base                            #>  summary.tukeysmooth                FALSE   registered S3method for summary #>  summary.vctrs_sclr                 FALSE   registered S3method for summary #>  summary.vctrs_vctr                 FALSE   registered S3method for summary #>  summary.warnings                    TRUE   base                            #>  Generic isS4  #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE methods(summary) |> print_all() #> _____________ #> S3 Methods: - #>  #>  Method                             Visible From                            #>  summary.Date                        TRUE   base                            #>  summary.POSIXct                     TRUE   base                            #>  summary.POSIXlt                     TRUE   base                            #>  summary.aov                         TRUE   stats                           #>  summary.aovlist                    FALSE   registered S3method for summary #>  summary.aspell                     FALSE   registered S3method for summary #>  summary.check_packages_in_dir      FALSE   registered S3method for summary #>  summary.connection                  TRUE   base                            #>  summary.data.frame                  TRUE   base                            #>  summary.default                     TRUE   base                            #>  summary.ecdf                       FALSE   registered S3method for summary #>  summary.factor                      TRUE   base                            #>  summary.ggplot                     FALSE   registered S3method for summary #>  summary.glm                         TRUE   stats                           #>  summary.hcl_palettes               FALSE   registered S3method for summary #>  summary.infl                       FALSE   registered S3method for summary #>  summary.lm                          TRUE   stats                           #>  summary.loess                      FALSE   registered S3method for summary #>  summary.loglm                      FALSE   registered S3method for summary #>  summary.manova                      TRUE   stats                           #>  summary.matrix                      TRUE   base                            #>  summary.mlm                        FALSE   registered S3method for summary #>  summary.negbin                     FALSE   registered S3method for summary #>  summary.nls                        FALSE   registered S3method for summary #>  summary.packageStatus              FALSE   registered S3method for summary #>  summary.polr                       FALSE   registered S3method for summary #>  summary.ppr                        FALSE   registered S3method for summary #>  summary.prcomp                     FALSE   registered S3method for summary #>  summary.princomp                   FALSE   registered S3method for summary #>  summary.proc_time                   TRUE   base                            #>  summary.rlang:::list_of_conditions FALSE   registered S3method for summary #>  summary.rlang_error                FALSE   registered S3method for summary #>  summary.rlang_message              FALSE   registered S3method for summary #>  summary.rlang_trace                FALSE   registered S3method for summary #>  summary.rlang_warning              FALSE   registered S3method for summary #>  summary.rlm                        FALSE   registered S3method for summary #>  summary.srcfile                     TRUE   base                            #>  summary.srcref                      TRUE   base                            #>  summary.stepfun                     TRUE   stats                           #>  summary.stl                        FALSE   registered S3method for summary #>  summary.table                       TRUE   base                            #>  summary.tukeysmooth                FALSE   registered S3method for summary #>  summary.vctrs_sclr                 FALSE   registered S3method for summary #>  summary.vctrs_vctr                 FALSE   registered S3method for summary #>  summary.warnings                    TRUE   base                            #>  Generic isS4  #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE #>  summary FALSE  methods(class = \"glm\") #>  [1] add1           anova          coerce         confint        cooks.distance #>  [6] deviance       drop1          effects        extractAIC     family         #> [11] formula        influence      initialize     logLik         model.frame    #> [16] nobs           predict        print          profile        residuals      #> [21] rstandard      rstudent       show           sigma          slotsFromS3    #> [26] summary        vcov           weights        #> see '?methods' for accessing help and source code method_info(class = \"glm\") #> _____________ #> S3 Methods: - #>  #>  Method                      Visible From                Generic        isS4  #>  add1.glm                    FALSE   registered S3method add1           FALSE #>  anova.glm                   FALSE   registered S3method anova          FALSE #>  coerce,oldClass,S3-method    TRUE                       coerce          TRUE #>  confint.glm                 FALSE   registered S3method confint        FALSE #>  cooks.distance.glm          FALSE   registered S3method cooks.distance FALSE #>  deviance.glm                FALSE   registered S3method deviance       FALSE #>  drop1.glm                   FALSE   registered S3method drop1          FALSE #>  effects.glm                 FALSE   registered S3method effects        FALSE #>  extractAIC.glm              FALSE   registered S3method extractAIC     FALSE #>  family.glm                  FALSE   registered S3method family         FALSE #>  formula.glm                 FALSE   registered S3method formula        FALSE #>  influence.glm               FALSE   registered S3method influence      FALSE #>  initialize,oldClass-method   TRUE                       initialize      TRUE #>  logLik.glm                  FALSE   registered S3method logLik         FALSE #>  model.frame.glm             FALSE   registered S3method model.frame    FALSE #>  nobs.glm                    FALSE   registered S3method nobs           FALSE #>  predict.glm                  TRUE   stats               predict        FALSE #>  print.glm                   FALSE   registered S3method print          FALSE #>  profile.glm                 FALSE   registered S3method profile        FALSE #>  residuals.glm                TRUE   stats               residuals      FALSE #>  rstandard.glm               FALSE   registered S3method rstandard      FALSE #>  rstudent.glm                FALSE   registered S3method rstudent       FALSE #>  show,oldClass-method         TRUE                       show            TRUE #>  sigma.glm                   FALSE   registered S3method sigma          FALSE #>  slotsFromS3,oldClass-method  TRUE                       slotsFromS3     TRUE #>  summary.glm                  TRUE   stats               summary        FALSE #>  vcov.glm                    FALSE   registered S3method vcov           FALSE #>  weights.glm                 FALSE   registered S3method weights        FALSE method_info(class = \"glm\", .arrange_by = across(c(isS4, Method))) #> _____________ #> S3 Methods: - #>  #>  Method                      Visible From                Generic        isS4  #>  add1.glm                    FALSE   registered S3method add1           FALSE #>  anova.glm                   FALSE   registered S3method anova          FALSE #>  confint.glm                 FALSE   registered S3method confint        FALSE #>  cooks.distance.glm          FALSE   registered S3method cooks.distance FALSE #>  deviance.glm                FALSE   registered S3method deviance       FALSE #>  drop1.glm                   FALSE   registered S3method drop1          FALSE #>  effects.glm                 FALSE   registered S3method effects        FALSE #>  extractAIC.glm              FALSE   registered S3method extractAIC     FALSE #>  family.glm                  FALSE   registered S3method family         FALSE #>  formula.glm                 FALSE   registered S3method formula        FALSE #>  influence.glm               FALSE   registered S3method influence      FALSE #>  logLik.glm                  FALSE   registered S3method logLik         FALSE #>  model.frame.glm             FALSE   registered S3method model.frame    FALSE #>  nobs.glm                    FALSE   registered S3method nobs           FALSE #>  predict.glm                  TRUE   stats               predict        FALSE #>  print.glm                   FALSE   registered S3method print          FALSE #>  profile.glm                 FALSE   registered S3method profile        FALSE #>  residuals.glm                TRUE   stats               residuals      FALSE #>  rstandard.glm               FALSE   registered S3method rstandard      FALSE #>  rstudent.glm                FALSE   registered S3method rstudent       FALSE #>  sigma.glm                   FALSE   registered S3method sigma          FALSE #>  summary.glm                  TRUE   stats               summary        FALSE #>  vcov.glm                    FALSE   registered S3method vcov           FALSE #>  weights.glm                 FALSE   registered S3method weights        FALSE #>  coerce,oldClass,S3-method    TRUE                       coerce          TRUE #>  initialize,oldClass-method   TRUE                       initialize      TRUE #>  show,oldClass-method         TRUE                       show            TRUE #>  slotsFromS3,oldClass-method  TRUE                       slotsFromS3     TRUE methods(class = \"glm\") |> print_all() #> _____________ #> S3 Methods: - #>  #>  Method                      Visible From                Generic        isS4  #>  add1.glm                    FALSE   registered S3method add1           FALSE #>  anova.glm                   FALSE   registered S3method anova          FALSE #>  coerce,oldClass,S3-method    TRUE                       coerce          TRUE #>  confint.glm                 FALSE   registered S3method confint        FALSE #>  cooks.distance.glm          FALSE   registered S3method cooks.distance FALSE #>  deviance.glm                FALSE   registered S3method deviance       FALSE #>  drop1.glm                   FALSE   registered S3method drop1          FALSE #>  effects.glm                 FALSE   registered S3method effects        FALSE #>  extractAIC.glm              FALSE   registered S3method extractAIC     FALSE #>  family.glm                  FALSE   registered S3method family         FALSE #>  formula.glm                 FALSE   registered S3method formula        FALSE #>  influence.glm               FALSE   registered S3method influence      FALSE #>  initialize,oldClass-method   TRUE                       initialize      TRUE #>  logLik.glm                  FALSE   registered S3method logLik         FALSE #>  model.frame.glm             FALSE   registered S3method model.frame    FALSE #>  nobs.glm                    FALSE   registered S3method nobs           FALSE #>  predict.glm                  TRUE   stats               predict        FALSE #>  print.glm                   FALSE   registered S3method print          FALSE #>  profile.glm                 FALSE   registered S3method profile        FALSE #>  residuals.glm                TRUE   stats               residuals      FALSE #>  rstandard.glm               FALSE   registered S3method rstandard      FALSE #>  rstudent.glm                FALSE   registered S3method rstudent       FALSE #>  show,oldClass-method         TRUE                       show            TRUE #>  sigma.glm                   FALSE   registered S3method sigma          FALSE #>  slotsFromS3,oldClass-method  TRUE                       slotsFromS3     TRUE #>  summary.glm                  TRUE   stats               summary        FALSE #>  vcov.glm                    FALSE   registered S3method vcov           FALSE #>  weights.glm                 FALSE   registered S3method weights        FALSE methods(class = \"glm\") |> print_all(.arrange_by = across(c(isS4, Method))) #> _____________ #> S3 Methods: - #>  #>  Method                      Visible From                Generic        isS4  #>  add1.glm                    FALSE   registered S3method add1           FALSE #>  anova.glm                   FALSE   registered S3method anova          FALSE #>  confint.glm                 FALSE   registered S3method confint        FALSE #>  cooks.distance.glm          FALSE   registered S3method cooks.distance FALSE #>  deviance.glm                FALSE   registered S3method deviance       FALSE #>  drop1.glm                   FALSE   registered S3method drop1          FALSE #>  effects.glm                 FALSE   registered S3method effects        FALSE #>  extractAIC.glm              FALSE   registered S3method extractAIC     FALSE #>  family.glm                  FALSE   registered S3method family         FALSE #>  formula.glm                 FALSE   registered S3method formula        FALSE #>  influence.glm               FALSE   registered S3method influence      FALSE #>  logLik.glm                  FALSE   registered S3method logLik         FALSE #>  model.frame.glm             FALSE   registered S3method model.frame    FALSE #>  nobs.glm                    FALSE   registered S3method nobs           FALSE #>  predict.glm                  TRUE   stats               predict        FALSE #>  print.glm                   FALSE   registered S3method print          FALSE #>  profile.glm                 FALSE   registered S3method profile        FALSE #>  residuals.glm                TRUE   stats               residuals      FALSE #>  rstandard.glm               FALSE   registered S3method rstandard      FALSE #>  rstudent.glm                FALSE   registered S3method rstudent       FALSE #>  sigma.glm                   FALSE   registered S3method sigma          FALSE #>  summary.glm                  TRUE   stats               summary        FALSE #>  vcov.glm                    FALSE   registered S3method vcov           FALSE #>  weights.glm                 FALSE   registered S3method weights        FALSE #>  coerce,oldClass,S3-method    TRUE                       coerce          TRUE #>  initialize,oldClass-method   TRUE                       initialize      TRUE #>  show,oldClass-method         TRUE                       show            TRUE #>  slotsFromS3,oldClass-method  TRUE                       slotsFromS3     TRUE"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/odds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Probability to Odds — odds","title":"Convert Probability to Odds — odds","text":"odds() converts probability corresponding odds. prob_from_odds() converts odds corresponding proability.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/odds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Probability to Odds — odds","text":"","code":"odds(x)  prob_from_odds(x)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/odds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Probability to Odds — odds","text":"x probability derive odds, odds derive probability.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/odds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Probability to Odds — odds","text":"odds returns derived odds; prob_from_odds returns derived probability.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/odds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Probability to Odds — odds","text":"odds defined \\(\\log(p / q)\\) \\(q = 1 - p\\). probability may calculated odds inverse transformation: - $$p = \\displaystyle \\frac{odds}{1 + odds}$$","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/odds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Probability to Odds — odds","text":"","code":"odds(0.5) #> [1] 1 prob_from_odds(1) #> [1] 0.5  (s <- seq(from = 0, to = 1, by = 0.125)) #> [1] 0.000 0.125 0.250 0.375 0.500 0.625 0.750 0.875 1.000 (s <- odds(s)) #> [1] 0.0000000 0.1428571 0.3333333 0.6000000 1.0000000 1.6666667 3.0000000 #> [8] 7.0000000       Inf prob_from_odds(s) #> [1] 0.000 0.125 0.250 0.375 0.500 0.625 0.750 0.875 1.000  rm(s)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/op-min-max.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised Min and Max Operators — op-min-max","title":"Vectorised Min and Max Operators — op-min-max","text":"Vectorised infix functions implementing pmin() pmax().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/op-min-max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised Min and Max Operators — op-min-max","text":"","code":"x %:<% y  x %>:% y"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/op-min-max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised Min and Max Operators — op-min-max","text":"x, y numeric character arguments (see Note).","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/op-min-max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorised Min and Max Operators — op-min-max","text":"vector length longest input vectors returned pmin() pmax(), length zero one inputs zero length.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/op-min-max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vectorised Min and Max Operators — op-min-max","text":"vectorised infix functions %:<% %>:% may useful implementing pmin() , pmax() inspired null coalescing operator %||%.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/op-min-max.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Vectorised Min and Max Operators — op-min-max","text":"‘Numeric’ arguments vectors type integer numeric,   logical (coerced integer).  historical reasons, NULL   accepted equivalent integer(0). pmax pmin also work classed S3 S4 objects   appropriate methods comparison, .na rep   (recycling arguments needed).","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/op-min-max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorised Min and Max Operators — op-min-max","text":"","code":"1:10 %:<% 10:1 #>  [1] 1 2 3 4 5 5 4 3 2 1 c(1:9, NA) %:<% c(NA, 9:1) #>  [1] NA  2  3  4  5  5  4  3  2 NA  1:10 %>:% 10:1 #>  [1] 10  9  8  7  6  6  7  8  9 10 c(1:9, NA) %>:% c(NA, 9:1) #>  [1] NA  9  8  7  6  6  7  8  9 NA"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/opt_bc.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimise the Value of Lambda for a Box-Cox Transformation — opt_bc","title":"Optimise the Value of Lambda for a Box-Cox Transformation — opt_bc","text":"Optimise value \\(\\lambda\\) Box-Cox transformation minimising skewness return optimally transformed data together optimal \\(\\lambda\\) corresponding skewness minimum attributes.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/opt_bc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimise the Value of Lambda for a Box-Cox Transformation — opt_bc","text":"","code":"opt_bc(x, interval = c(-5, 5), tol = 1e-10)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/opt_bc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimise the Value of Lambda for a Box-Cox Transformation — opt_bc","text":"x numeric vector data transformed using optimised values. interval vector containing end-points interval     searched minimum. tol desired accuracy.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/opt_bc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimise the Value of Lambda for a Box-Cox Transformation — opt_bc","text":"numeric vector length x attributes lambda skew representing optimal value \\(\\lambda\\) corresponding skewness minimum respectively.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/opt_bc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimise the Value of Lambda for a Box-Cox Transformation — opt_bc","text":"Uses functions boxcox3 create Box-Cox transformation function given dataset, skewness calculate skewness transformed data optimise search value \\(\\lambda\\) minimises skewness.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/opt_bc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimise the Value of Lambda for a Box-Cox Transformation — opt_bc","text":"","code":"runif(20) |> opt_bc() #>  [1] -0.314671546 -0.487459633 -0.351738249 -0.333842651 -0.845747595 #>  [6] -0.231712404 -0.227734177 -0.009283771 -0.029439394 -0.589327755 #> [11] -0.522696513 -0.656591404 -0.780202252 -0.456639730 -0.492348001 #> [16] -0.218320738 -0.754828147 -0.282507142 -0.870261776 -0.621304537 #> attr(,\"skew\") #> [1] 1.562456e-09 #> attr(,\"lambda\") #> [1] 1.090555 rlnorm(20) |> opt_bc() #>  [1]  0.91383337  0.17571240  0.24220731  1.55941560  0.11172494 -0.13444677 #>  [7] -2.00424626 -0.28119515 -0.31591440  1.03933660  0.06991240 -0.64944211 #> [13] -0.05002735 -0.25307076  0.43988879  2.57408103  0.04647731  0.56944736 #> [19]  0.11784641 -2.00604296 #> attr(,\"skew\") #> [1] 2.976226e-10 #> attr(,\"lambda\") #> [1] -0.04998641 rpois(100, 3) |> opt_bc()         ## Provokes warning #> Warning: NA/Inf replaced by maximum positive value #>   [1]  2.3219564  2.3219564  0.8886786  0.8886786  0.8886786  2.3219564 #>   [7]  1.6431935  2.3219564  1.6431935  2.9494335  2.3219564  2.9494335 #>  [13] -1.4501483  2.9494335  5.1483239  1.6431935  0.8886786  2.3219564 #>  [19]  1.6431935  1.6431935  2.9494335  1.6431935  0.8886786  3.5388524 #>  [25]  2.9494335  0.8886786  0.8886786  2.3219564  0.0000000  0.0000000 #>  [31]  0.0000000  2.3219564  2.9494335  3.5388524  1.6431935  1.6431935 #>  [37]  2.3219564  0.8886786 -1.4501483  2.9494335  0.0000000  5.1483239 #>  [43]  1.6431935  0.0000000  2.9494335 -1.4501483  1.6431935  0.8886786 #>  [49]  2.9494335  2.9494335  2.3219564  0.8886786  2.3219564  0.8886786 #>  [55]  1.6431935  0.8886786  1.6431935  0.8886786  1.6431935  3.5388524 #>  [61]  4.0983958  2.9494335  2.9494335  1.6431935  2.3219564  4.6335743 #>  [67]  2.3219564  0.8886786  0.8886786  2.3219564  2.9494335  0.8886786 #>  [73] -1.4501483  3.5388524  1.6431935  2.3219564  2.3219564  0.8886786 #>  [79]  0.8886786  2.3219564  2.3219564  0.0000000  2.9494335  0.0000000 #>  [85]  2.9494335  0.0000000  1.6431935  0.8886786  2.3219564  0.0000000 #>  [91]  3.5388524  0.8886786  0.8886786  2.9494335  2.9494335  0.0000000 #>  [97]  2.9494335  2.3219564  0.8886786  5.6455813 #> attr(,\"skew\") #> [1] 3.822212e-09 #> attr(,\"lambda\") #> [1] 0.6895846 rpois(100, 3) |> opt_bc(c(-3, 5)) ## Redefining interval avoids warning #>   [1]  0.9195554  3.9062541  0.9195554 -1.2813094  0.0000000  3.2182117 #>   [7]  0.9195554  0.9195554 -1.2813094  3.9062541  0.9195554  2.4990467 #>  [13]  0.9195554  3.2182117  0.9195554  4.5694489  1.7388097  2.4990467 #>  [19]  3.2182117  2.4990467  0.9195554  0.0000000  0.0000000  2.4990467 #>  [25]  1.7388097  2.4990467  0.9195554  4.5694489  2.4990467  3.2182117 #>  [31]  4.5694489  0.9195554  2.4990467  0.9195554 -1.2813094  1.7388097 #>  [37]  1.7388097  0.9195554  3.2182117  1.7388097  4.5694489 -1.2813094 #>  [43]  2.4990467  0.9195554  3.9062541  2.4990467  2.4990467  2.4990467 #>  [49]  1.7388097  0.9195554  1.7388097  0.9195554  2.4990467  1.7388097 #>  [55]  0.9195554  3.9062541  0.9195554  0.0000000  1.7388097  0.9195554 #>  [61]  0.0000000  3.9062541  2.4990467  2.4990467  1.7388097  1.7388097 #>  [67]  0.0000000  0.9195554  0.0000000  2.4990467  2.4990467  3.9062541 #>  [73]  0.0000000  4.5694489  0.9195554  2.4990467  2.4990467  0.0000000 #>  [79]  1.7388097  2.4990467  1.7388097  1.7388097  0.9195554 -1.2813094 #>  [85]  4.5694489  0.0000000  2.4990467  3.2182117  3.2182117  1.7388097 #>  [91]  3.2182117 -1.2813094  0.0000000  0.0000000  2.4990467  0.9195554 #>  [97]  0.0000000  0.0000000  3.9062541  0.9195554 #> attr(,\"skew\") #> [1] 9.547003e-09 #> attr(,\"lambda\") #> [1] 0.7804517"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","title":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","text":"phi correlation coefficient (mean square contingency coefficient denoted \\(\\phi\\) \\(r\\phi\\)) measure association two naturally dichotomous variables.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","text":"","code":"phi_coef(x)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","text":"x square matrix containing observations two binary variables two--two table counts.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","text":"numeric -1 1, \\(\\phi\\) correlation coefficient.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","text":"two--two contingency table \\(n_{11}\\) \\(n_{12}\\) \\(n_{21}\\) \\(n_{22}\\) \\(\\phi\\) correlation coefficient given : - $$\\displaystyle \\phi = \\frac{n_{11}n_{22} - n_{12}n_{21}}    {\\sqrt{(n_{11} + n_{21})(n_{12} + n_{22})(n_{11} + n_{12})(n_{21} + n_{22})}}$$ equivalently, determinant matrix divided (principal) square root product four marginal sums.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","text":"Yule, G.U. (1912). Methods Measuring Association Two Attributes. J Royal Stat Soc. 75 (6): 579–652. doi:10.2307/2340126 .","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phi Correlation Coefficient of Association Between Paired Binary Variables — phi_coef","text":"","code":"## Example from Wikipedia twobytwo <- matrix(c(6, 1, 2, 3), nrow = 2, dimnames = rep(list(c(\"Cat\", \"Dog\")), 2) |>               setNames(c(\"Actual\", \"Predicted\"))) addmargins(twobytwo) #>       Predicted #> Actual Cat Dog Sum #>    Cat   6   2   8 #>    Dog   1   3   4 #>    Sum   7   5  12  phi_coef(twobytwo) #> [1] 0.4780914  ## Example from Statology twobytwo <- matrix(c(4, 8, 9, 4), nrow = 2, dimnames =               list(Gender = c(\"Male\", \"Female\"), Party = c(\"Dem\", \"Rep\"))) addmargins(twobytwo) #>         Party #> Gender   Dem Rep Sum #>   Male     4   9  13 #>   Female   8   4  12 #>   Sum     12  13  25  phi_coef(twobytwo) #> [1] -0.3589744  rm(twobytwo)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","title":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","text":"function calculates p-value signifinace phi correlation coefficient (mean square contingency coefficient, \\(\\phi\\) \\(r\\phi\\)), measure association two binary variables, calculates confidence interval.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","text":"","code":"phi_coef.test(   x,   alternative = c(\"two.sided\", \"less\", \"greater\"),   conf.level = 0.95 )"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","text":"x square matrix containing observations two binary variables two--two table counts. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\".  can specify just initial letter. conf.level numeric 0 1, confidence level required; default 0.95.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","text":"list class \"htest\" containing following components: - statistic value test statistic. parameter number (paired) observations. p.value p-value test. conf.int confidence interval \\(\\phi\\) correlation coefficient (95% specified level). estimate \\(\\phi\\) correlation coefficient. null.value value association measure null hypothesis, always 0. alternative character string describing alternative hypothesis. method character string \"Phi correlation coefficient confidence interval\". data.name character string giving name data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","text":"phi coefficient calculated using phi_coef. derivation standard error confidence interval, see Bishop et al. (2003), Bonett (2021). See also ci.phi(), confidence interval phi correlation reference manual package statpsych.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","text":"Yule, G.U. (1912). Methods Measuring Association Two Attributes. J Royal Stat Soc. 75 (6): 579–652. doi:10.2307/2340126 . Bishop, Y.M.M., Fienberg, S.E., Holland, P.W. (1975). Discrete Multivariate Analysis. MIT Press. (See Ch.11.) ISBN 978-0-387-72805-6. Bonett, Douglas G. (2021). Statistical Methods Psychologists, Volume 3: Introduction Introduction Categorical Data Analysis. University California, Santa Cruz. (See 3.4 Measures Association 2 × 2 Tables.)","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/phi_coef.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test For Association/Correlation Between Paired Binary Variables — phi_coef.test","text":"","code":"## Example from Wikipedia twobytwo <- matrix(c(6, 1, 2, 3), nrow = 2, dimnames = rep(list(c(\"Cat\", \"Dog\")), 2) |>               setNames(c(\"Actual\", \"Predicted\"))) addmargins(twobytwo) #>       Predicted #> Actual Cat Dog Sum #>    Cat   6   2   8 #>    Dog   1   3   4 #>    Sum   7   5  12  phi_coef.test(twobytwo) #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = 1.6528, n = 12, p-value = 0.09837 #> alternative hypothesis: true phi is not equal to 0 #> 95 percent confidence interval: #>  -0.08885493  1.04503781 #> sample estimates: #>       phi  #> 0.4780914  #>  phi_coef.test(twobytwo, alternative = \"less\") #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = 1.6528, n = 12, p-value = 0.9508 #> alternative hypothesis: true phi is less than 0 #> 95 percent confidence interval: #>  -1.0000000  0.9538878 #> sample estimates: #>       phi  #> 0.4780914  #>  phi_coef.test(twobytwo, alternative = \"greater\") #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = 1.6528, n = 12, p-value = 0.04919 #> alternative hypothesis: true phi is greater than 0 #> 95 percent confidence interval: #>  0.002295051 1.000000000 #> sample estimates: #>       phi  #> 0.4780914  #>   ## Example from Statology twobytwo <- matrix(c(4, 8, 9, 4), nrow = 2, dimnames =               list(Gender = c(\"Male\", \"Female\"), Party = c(\"Dem\", \"Rep\"))) addmargins(twobytwo) #>         Party #> Gender   Dem Rep Sum #>   Male     4   9  13 #>   Female   8   4  12 #>   Sum     12  13  25  phi_coef.test(twobytwo) #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = -1.919, n = 25, p-value = 0.05499 #> alternative hypothesis: true phi is not equal to 0 #> 95 percent confidence interval: #>  -0.725613555  0.007664837 #> sample estimates: #>        phi  #> -0.3589744  #>   ## Setting confidence level to 1 - p-value gives upper bound of confidence interval close to zero pval <- phi_coef.test(twobytwo)$p.value phi_coef.test(twobytwo, conf.level = 1 - pval) #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = -1.919, n = 25, p-value = 0.05499 #> alternative hypothesis: true phi is not equal to 0 #> 94.50144 percent confidence interval: #>  -7.179487e-01 -1.110223e-16 #> sample estimates: #>        phi  #> -0.3589744  #>  ## Similarly, with one-tailed tests setting confidence level to 1 - p-value/2 conserves the upper ## or lower CI bound with alternative = \"less\" or alternative = \"greater\" respectively phi_coef.test(twobytwo, alternative = \"less\", conf.level = 1 - pval/2) #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = -1.919, n = 25, p-value = 0.02749 #> alternative hypothesis: true phi is less than 0 #> 97.25072 percent confidence interval: #>  -1.000000e+00 -1.110223e-16 #> sample estimates: #>        phi  #> -0.3589744  #>  phi_coef.test(twobytwo, alternative = \"greater\", conf.level = 1 - pval/2) #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = -1.919, n = 25, p-value = 0.9725 #> alternative hypothesis: true phi is greater than 0 #> 97.25072 percent confidence interval: #>  -0.7179487  1.0000000 #> sample estimates: #>        phi  #> -0.3589744  #>   ## Example from statpsych::ci.phi(), which should return: - ##       Estimate         SE         LL        UL ## [1,] 0.1229976 0.05746271 0.01037273 0.2356224  twobytwo <- matrix(c(229, 28, 96, 24), nrow = 2, dimnames = rep(list(c(\"Zero\", \"One\")), 2)) addmargins(twobytwo) #>      Zero One Sum #> Zero  229  96 325 #> One    28  24  52 #> Sum   257 120 377  phi_coef.test(twobytwo) #>  #> \tPhi correlation coefficient with confidence interval #>  #> data:  twobytwo #> z = 2.1405, n = 377, p-value = 0.03232 #> alternative hypothesis: true phi is not equal to 0 #> 95 percent confidence interval: #>  0.01037273 0.23562243 #> sample estimates: #>       phi  #> 0.1229976  #>  ## Check standard error as expected with(phi_coef.test(twobytwo), c(stderr = estimate/statistic)) #> stderr.phi  #> 0.05746271   rm(twobytwo, pval)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/power_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Expression as a Power Sequence — power_seq","title":"Expand Expression as a Power Sequence — power_seq","text":"Create power sequence expression, base_expr, maximum power number, n.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/power_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Expression as a Power Sequence — power_seq","text":"","code":"power_seq(base_expr, n, type = c(\"simple\", \"evaluate\", \"replicate\"))"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/power_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Expression as a Power Sequence — power_seq","text":"base_expr bare (quoted) expression, see examples. n non-negative integer number coercible positive integer. type character string, (partially) matching one \"simple\", \"evaluate\" \"replicate\"; default \"simple\".","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/power_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Expression as a Power Sequence — power_seq","text":"\"call\" object .e., captured function call, possibly nested n times.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/power_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expand Expression as a Power Sequence — power_seq","text":"power sequence returned \"call\" object, may evaluated using eval_tidy package rlang, see examples. default, power_seq() returns simple call object containing just one instance base_expr n. Alternatively, type \"evaluate\", power_seq() evaluates base_expr assigns result constant nested n times within call object returned. results base_expr evaluated execution power_seq() rather evaluation returned call, may preferable complex expressions. Finally, type \"replicate\", power_seq() captures base_expr argument environment quosure replicated n times within returned nested call object. results base_expr evaluated n times evaluation returned call; multiple evaluation may acceptable simple cases might slow inefficient complex expressions.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/power_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand Expression as a Power Sequence — power_seq","text":"","code":"(pseq <- power_seq(a + b, 3)) #> sum((~a + b)^seq_len(~3)) ## pseq is a \"call\" object typeof(pseq) #> [1] \"language\" class(pseq) #> [1] \"call\" mode(pseq) #> [1] \"call\" is.call(pseq) #> [1] TRUE as.list(pseq) #> [[1]] #> sum #>  #> [[2]] #> (~a + b)^seq_len(~3) #>  is.call(pseq[[2]]) #> [1] TRUE as.list(pseq[[2]]) #> [[1]] #> `^` #>  #> [[2]] #> <quosure> #> expr: ^a + b #> env:  0x564340b86cb0 #>  #> [[3]] #> seq_len(~3) #>  is.call(pseq[[2]][[3]]) #> [1] TRUE as.list(pseq[[2]][[3]]) #> [[1]] #> seq_len #>  #> [[2]] #> <quosure> #> expr: ^3 #> env:  empty #>   ## View the abstract syntax tree - requires {lobstr} package if (!requireNamespace(\"lobstr\", quietly = TRUE))    warning(\"package 'lobstr' must be installed\") try(lobstr::ast(!!pseq)) #> █─sum  #> └─█─`^`  #>   ├─█─`+`  #>   │ ├─a  #>   │ └─b  #>   └─█─seq_len  #>     └─3   (pseq2 <- power_seq(log(x), 5)) #> sum((~log(x))^seq_len(~5))  x <- 3 eval_tidy(pseq2)  ## Uses x from the global environment #> [1] 6.688633  x <- 5 eval_tidy(pseq2) #> [1] 25.87694  rm(x) try(eval_tidy(pseq2)) #> Error : object 'x' not found  foo <- function() {   x <- 10   power_seq(log(x), 5) }  pseq2 <- foo() pseq2                 ## Expression looks just the same but … #> sum((~log(x))^seq_len(~5))  x <- 3 eval_tidy(pseq2)  ## Consistently uses x from the environment of foo() #> [1] 112.6486  x <- 5 eval_tidy(pseq2) #> [1] 112.6486  rm(x) eval_tidy(pseq2) #> [1] 112.6486  ## Wrapper for log() reporting its execution using marker() log <- function(...) {   marker(msg = \"in BitsnBobs Help\")   base::log(...) }  ## Compare the three options for type  ## log() invoked just once, on execution of power_seq() with type = \"evaluate\" (expr_ls <- c(\"simple\", \"evaluate\", \"replicate\") |> setNames(nm = _) |>     lapply(\\(x) power_seq(log(3), 5, x))) #> log running in BitsnBobs Help  #> $simple #> sum((~log(3))^seq_len(~5)) #>  #> $evaluate #> 1.09861228866811 + 1.09861228866811^2L + 1.09861228866811^3L +  #>     1.09861228866811^4L + 1.09861228866811^5L #>  #> $replicate #> (~log(3)) + (~log(3))^2L + (~log(3))^3L + (~log(3))^4L + (~log(3))^5L #>   ## log() invoked once on evaluation of expression from power_seq() with type = \"simple\" and ## five times on evaluation of expression from power_seq() with type = \"replicate\" (res_ls <- expr_ls |> lapply(eval_tidy)) #> log running in BitsnBobs Help  #> log running in BitsnBobs Help  #> log running in BitsnBobs Help  #> log running in BitsnBobs Help  #> log running in BitsnBobs Help  #> log running in BitsnBobs Help  #> $simple #> [1] 6.688633 #>  #> $evaluate #> [1] 6.688633 #>  #> $replicate #> [1] 6.688633 #>   ## All three types evaluate identically: - all(   identical(res_ls[[1]], res_ls[[2]]),   identical(res_ls[[1]], res_ls[[3]]),   identical(res_ls[[2]], res_ls[[3]]) ) #> [1] TRUE  ## Compare the three abstract syntax trees try(expr_ls |> lapply(\\(x) lobstr::ast(!!x))) #> $simple #> █─sum  #> └─█─`^`  #>   ├─█─log  #>   │ └─3  #>   └─█─seq_len  #>     └─5  #>  #> $evaluate #> █─`+`  #> ├─█─`+`  #> │ ├─█─`+`  #> │ │ ├─█─`+`  #> │ │ │ ├─1.09861228866811  #> │ │ │ └─█─`^`  #> │ │ │   ├─1.09861228866811  #> │ │ │   └─2L  #> │ │ └─█─`^`  #> │ │   ├─1.09861228866811  #> │ │   └─3L  #> │ └─█─`^`  #> │   ├─1.09861228866811  #> │   └─4L  #> └─█─`^`  #>   ├─1.09861228866811  #>   └─5L  #>  #> $replicate #> █─`+`  #> ├─█─`+`  #> │ ├─█─`+`  #> │ │ ├─█─`+`  #> │ │ │ ├─█─log  #> │ │ │ │ └─3  #> │ │ │ └─█─`^`  #> │ │ │   ├─█─log  #> │ │ │   │ └─3  #> │ │ │   └─2L  #> │ │ └─█─`^`  #> │ │   ├─█─log  #> │ │   │ └─3  #> │ │   └─3L  #> │ └─█─`^`  #> │   ├─█─log  #> │   │ └─3  #> │   └─4L  #> └─█─`^`  #>   ├─█─log  #>   │ └─3  #>   └─5L  #>   rm(expr_ls, foo, log, pseq, pseq2, res_ls)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/print_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Print All (or More) of an Object — print_all","title":"Print All (or More) of an Object — print_all","text":"print_all() generic function extended printing object, instance printing rows tibble, derived class even regular data frame, optionally following printing specified number linefeeds. generic function, new printing methods can easily added new class.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/print_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print All (or More) of an Object — print_all","text":"","code":"print_all(x, ...)  # S3 method for class 'data.frame' print_all(   x,   ...,   linefeeds = NULL,   digits = NULL,   quote = FALSE,   right = TRUE,   row.names = TRUE,   max = NULL )  # S3 method for class 'tbl' print_all(   x,   linefeeds = NULL,   width = NULL,   ...,   max_extra_cols = NULL,   max_footer_lines = NULL )  # S3 method for class 'tbl_df' print_all(   x,   linefeeds = NULL,   width = NULL,   ...,   max_extra_cols = NULL,   max_footer_lines = NULL )  # S3 method for class 'htest' print_all(x, ...)  # S3 method for class 'MethodsFunction' print_all(x, ..., .arrange_by = across(everything()))"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/print_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print All (or More) of an Object — print_all","text":"x object tibble data frame. ... arguments passed methods. linefeeds positive integer specifying number linefeeds follow printed output; default NULL. digits minimal number significant digits, see     print.default. quote logical, indicating whether strings     printed surrounding quotes. right logical, indicating whether strings     right aligned. row.names logical (character vector), indicating whether (    ) row names printed. max numeric NULL, specifying maximal number     entries printed.  default, NULL,     getOption(\"max.print\") used. width used max.levels NULL, see . max_extra_cols Number extra columns print abbreviated information , width small entire tibble. NULL, max_extra_cols option used. previously defined n_extra argument soft-deprecated. max_footer_lines Maximum number footer lines. NULL, max_footer_lines option used. .arrange_by <data-masking> names columns functions ordering results using syntax dplyr arrange(). Use desc() sort variable descending order.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/print_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print All (or More) of an Object — print_all","text":"Invisibly returns argument.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/print_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print All (or More) of an Object — print_all","text":"tibble x, print_all(x) equivalent print(x, n = nrow(x)), followed required n linefeeds generated using cat(rep(\"\\n\", n)). linefeeds argument may useful within piped sequence separate output subsequent printing. vector length > 1 entered linefeeds, first element used, negative integers converted zero .e., line feeds.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/print_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print All (or More) of an Object — print_all","text":"","code":"(tib <- tibble(x = 1:26, y = LETTERS[x], z = paste0(x, y))) #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> # ℹ 16 more rows tib |> print_all() #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> 11    11 K     11K   #> 12    12 L     12L   #> 13    13 M     13M   #> 14    14 N     14N   #> 15    15 O     15O   #> 16    16 P     16P   #> 17    17 Q     17Q   #> 18    18 R     18R   #> 19    19 S     19S   #> 20    20 T     20T   #> 21    21 U     21U   #> 22    22 V     22V   #> 23    23 W     23W   #> 24    24 X     24X   #> 25    25 Y     25Y   #> 26    26 Z     26Z   tib |> print_all() |> names() #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> 11    11 K     11K   #> 12    12 L     12L   #> 13    13 M     13M   #> 14    14 N     14N   #> 15    15 O     15O   #> 16    16 P     16P   #> 17    17 Q     17Q   #> 18    18 R     18R   #> 19    19 S     19S   #> 20    20 T     20T   #> 21    21 U     21U   #> 22    22 V     22V   #> 23    23 W     23W   #> 24    24 X     24X   #> 25    25 Y     25Y   #> 26    26 Z     26Z   #> [1] \"x\" \"y\" \"z\" tib |> print_all(linefeeds = 3) |> names() #> # A tibble: 26 × 3 #>        x y     z     #>    <int> <chr> <chr> #>  1     1 A     1A    #>  2     2 B     2B    #>  3     3 C     3C    #>  4     4 D     4D    #>  5     5 E     5E    #>  6     6 F     6F    #>  7     7 G     7G    #>  8     8 H     8H    #>  9     9 I     9I    #> 10    10 J     10J   #> 11    11 K     11K   #> 12    12 L     12L   #> 13    13 M     13M   #> 14    14 N     14N   #> 15    15 O     15O   #> 16    16 P     16P   #> 17    17 Q     17Q   #> 18    18 R     18R   #> 19    19 S     19S   #> 20    20 T     20T   #> 21    21 U     21U   #> 22    22 V     22V   #> 23    23 W     23W   #> 24    24 X     24X   #> 25    25 Y     25Y   #> 26    26 Z     26Z   #>  #>   #>   #> [1] \"x\" \"y\" \"z\"  df <- tib |> as.data.frame() df |> print_all()                         ## Does nothing more than regular print() #>     x y   z #> 1   1 A  1A #> 2   2 B  2B #> 3   3 C  3C #> 4   4 D  4D #> 5   5 E  5E #> 6   6 F  6F #> 7   7 G  7G #> 8   8 H  8H #> 9   9 I  9I #> 10 10 J 10J #> 11 11 K 11K #> 12 12 L 12L #> 13 13 M 13M #> 14 14 N 14N #> 15 15 O 15O #> 16 16 P 16P #> 17 17 Q 17Q #> 18 18 R 18R #> 19 19 S 19S #> 20 20 T 20T #> 21 21 U 21U #> 22 22 V 22V #> 23 23 W 23W #> 24 24 X 24X #> 25 25 Y 25Y #> 26 26 Z 26Z df |> print_all(linefeeds = 2) |> names() ## Regular data frame printing, with line feeds #>     x y   z #> 1   1 A  1A #> 2   2 B  2B #> 3   3 C  3C #> 4   4 D  4D #> 5   5 E  5E #> 6   6 F  6F #> 7   7 G  7G #> 8   8 H  8H #> 9   9 I  9I #> 10 10 J 10J #> 11 11 K 11K #> 12 12 L 12L #> 13 13 M 13M #> 14 14 N 14N #> 15 15 O 15O #> 16 16 P 16P #> 17 17 Q 17Q #> 18 18 R 18R #> 19 19 S 19S #> 20 20 T 20T #> 21 21 U 21U #> 22 22 V 22V #> 23 23 W 23W #> 24 24 X 24X #> 25 25 Y 25Y #> 26 26 Z 26Z #>  #>   #> [1] \"x\" \"y\" \"z\"  rm(df, tib)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr across, arrange, bind_rows, desc ggplot2 element_text, theme_get, theme_set, theme_update purrr map_chr, map_dbl, map_int, map2_chr rlang %@%, eval_tidy, exprs, set_names stringr boundary, coll, fixed, regex tibble tibble tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, starts_with, ","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/retriever.html","id":null,"dir":"Reference","previous_headings":"","what":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","title":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","text":"retriever() creates bespoke functions retrieval rows data frame identified using specified index column. remplacer() creates bespoke replacement functions modifying rows data frame identified using specified index column.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/retriever.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","text":"","code":"retriever(data, index, labile_data = TRUE)  remplacer(index)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/retriever.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","text":"data data frame, data frame extension (e.g. tibble). index <data-masking> quoted name index column searched. labile_data logical. TRUE, data represented function environment quosure. FALSE, copy data saved function environment. Default TRUE.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/retriever.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","text":"retriever(), function retrieval specified columns data rows matching specified value index column, following arguments: – key Value matched index column. ... <tidy-select> character columns return. none provided, columns returned. remplacer(), replacement function modifying value specified column data rows matching specified value index column, following arguments: – data data frame, data frame extension (e.g. tibble). key Value matched index column. replace <data-masking> quoted name column value replaced. value replacement value type replace.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/retriever.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","text":"key value supplied argument functions derived retriever() remplacer() must exact matches values index column rows retrieved replaced. pattern matching, use detective(). labile_data TRUE, data represented function environment quosure, functions returned retriever() automatically refer current version data original environment, usually calling environment .e., typically necessarily global environment. labile_data FALSE, returned functions refer copy data saved function environment time execution retriever(), reflect subsequent changes original data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/retriever.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","text":"original idea remplacer() create bespoke replacement functions using data captured function environment retriever(). However, immediately apparent way object \"replaced\" must first argument replacement functions.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/retriever.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'Function Factory' for Bespoke Data Frame Retrieval and Replacement — retriever","text":"","code":"## Create \"retrieval\" function with labile_data TRUE retrieve_starwars <- retriever(starwars, name)  ## `data` represented as \"quosure\" in function environment  environment(retrieve_starwars)$data #> <quosure> #> expr: ^starwars #> env:  0x5643414ee260  ## Retrieve selected columns for a row specified using the index retrieve_starwars(\"Luke Skywalker\", ends_with(\"color\"), homeworld) #> # A tibble: 1 × 5 #>   name           hair_color skin_color eye_color homeworld #>   <chr>          <chr>      <chr>      <chr>     <chr>     #> 1 Luke Skywalker blond      fair       blue      Tatooine   ## Create \"retrieval\" function with labile_data FALSE retrieve_original_starwars <- retriever(starwars, name, FALSE)  ## Copy of `data` saved in function environment  environment(retrieve_original_starwars)$data #> # A tibble: 87 × 14 #>    name  homeworld height  mass hair_color skin_color eye_color birth_year sex   #>    <chr> <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> #>  1 Luke… Tatooine     172    77 blond      fair       blue            19   male  #>  2 C-3PO Tatooine     167    75 NA         gold       yellow         112   none  #>  3 R2-D2 Naboo         96    32 NA         white, bl… red             33   none  #>  4 Dart… Tatooine     202   136 none       white      yellow          41.9 male  #>  5 Leia… Alderaan     150    49 brown      light      brown           19   fema… #>  6 Owen… Tatooine     178   120 brown, gr… light      blue            52   male  #>  7 Beru… Tatooine     165    75 brown      light      blue            47   fema… #>  8 R5-D4 Tatooine      97    32 NA         white, red red             NA   none  #>  9 Bigg… Tatooine     183    84 black      light      brown           24   male  #> 10 Obi-… Stewjon      182    77 auburn, w… fair       blue-gray       57   male  #> # ℹ 77 more rows #> # ℹ 5 more variables: gender <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list>  ## Retrieve selected columns for a row specified using the index retrieve_original_starwars(\"Luke Skywalker\", where(is.atomic), homeworld) #> # A tibble: 1 × 11 #>   name   homeworld height  mass hair_color skin_color eye_color birth_year sex   #>   <chr>  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> #> 1 Luke … Tatooine     172    77 blond      fair       blue              19 male  #> # ℹ 2 more variables: gender <chr>, species <chr>  ## Create replacement function `replace_at_name<-` <- remplacer(name)  ## Replace the value of a selected column for a row specified using the index starwars |> replace_at_name(\"Luke Skywalker\", homeworld) <- \"Mimiland\"  ## Retrieve selected columns for a row specified using the index ## \"retrieval\" function with labile_data TRUE reflects the change retrieve_starwars(\"Luke Skywalker\", where(is.atomic), homeworld) #> # A tibble: 1 × 11 #>   name   homeworld height  mass hair_color skin_color eye_color birth_year sex   #>   <chr>  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> #> 1 Luke … Mimiland     172    77 blond      fair       blue              19 male  #> # ℹ 2 more variables: gender <chr>, species <chr>  ## Retrieve selected columns for a row specified using the index ## \"retrieval\" function with labile_data FALSE shows no change retrieve_original_starwars(\"Luke Skywalker\", where(is.atomic), homeworld) #> # A tibble: 1 × 11 #>   name   homeworld height  mass hair_color skin_color eye_color birth_year sex   #>   <chr>  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> #> 1 Luke … Tatooine     172    77 blond      fair       blue              19 male  #> # ℹ 2 more variables: gender <chr>, species <chr>  rm(retrieve_starwars, retrieve_original_starwars, `replace_at_name<-`, starwars)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/revmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse a Matrix by Rows, Columns or Both — revmat","title":"Reverse a Matrix by Rows, Columns or Both — revmat","text":"Reverses order entire matrix rows, columns .","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/revmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse a Matrix by Rows, Columns or Both — revmat","text":"","code":"revmat(x, type = c(\"byrow\", \"bycolumn\", \"byboth\"))"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/revmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse a Matrix by Rows, Columns or Both — revmat","text":"x matrix. type character string specifying whether reverse matrix rows, columns ; must one \"byrow\" (default), \"bycolumn\" \"byboth\". can specify just initial letter.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/revmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse a Matrix by Rows, Columns or Both — revmat","text":"matrix dimensions x.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/revmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse a Matrix by Rows, Columns or Both — revmat","text":"Depending argument type, function reverses order entire rows, columns matrix, including dimnames present.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/revmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse a Matrix by Rows, Columns or Both — revmat","text":"","code":"m <- matrix(1:9, nrow = 3, byrow = TRUE, dimnames = list(paste0(\"x\", 1:3), paste0(\"y\", 1:3)))   m #>    y1 y2 y3 #> x1  1  2  3 #> x2  4  5  6 #> x3  7  8  9  revmat(m) #>    y1 y2 y3 #> x3  7  8  9 #> x2  4  5  6 #> x1  1  2  3  revmat(m, \"bycol\") #>    y3 y2 y1 #> x1  3  2  1 #> x2  6  5  4 #> x3  9  8  7  revmat(m, \"byboth\") #>    y3 y2 y1 #> x3  9  8  7 #> x2  6  5  4 #> x1  3  2  1   rm(m)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/rm_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Sequentially Numbered Objects from Workspace — rm_objects","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"Remove series sequentially named objects workspace another specified environment. example, conveniently remove series sequentially numbered models.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/rm_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"","code":"rm_objects(basename, suffixes, envir = parent.frame())"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/rm_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"basename Common base name (quoted unquoted) series objects. suffixes numeric character vector representing suffixes series objects. envir environment remove objects. Use .GlobalEnv workspace; default parent.frame() .e., environment rm_objects() called.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/rm_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"character vector matching names remaining calling environment, usually workspace unless rm_objects() called within function, another specified environment, returned invisibly.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/rm_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"rm_objects() lists objects workspace (another specified  environment) whose names start basename, removes basename followed element included suffixes, finally lists remaining objects names matching basename. #GF","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/rm_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Sequentially Numbered Objects from Workspace — rm_objects","text":"","code":"## Note: running outside example() will be more informative   ## Create some sequentially numbered objects  model1 <- model2 <- model3 <- model4 <- lm(1~1)  ls(pattern = \"model\") #> [1] \"model1\" \"model2\" \"model3\" \"model4\"   ## Remove three of them  rm_objects(model, 1:3) #> Objects matching \"model…\" found in (unnamed) environment: – #> \t model1 model2 model3 model4  #> Objects matching \"model…\" remaining in (unnamed) environment: – #> \t model4    ## Create some sequentially named objects  model_a <- model_b <- model_c <- model_d <- lm(1~1)  ls(pattern = \"model_\") #> [1] \"model_a\" \"model_b\" \"model_c\" \"model_d\"   ## Remove three of them  rm_objects(model_, letters[1:3]) #> Objects matching \"model_…\" found in (unnamed) environment: – #> \t model_a model_b model_c model_d  #> Objects matching \"model_…\" remaining in (unnamed) environment: – #> \t model_d    ## Use within a function  (\\() {                  ## Anonymous function, but doesn't have to be    model1 <- model2 <- model3 <- model4 <- model5 <- lm(1~1)    rm_objects(model, 1:5)  })() #> Objects matching \"model…\" found in (unnamed) environment: – #> \t model1 model2 model3 model4 model5  #> Objects matching \"model…\" remaining in (unnamed) environment: – #> \t All gone!    ls(pattern = \"model\") #> [1] \"model4\"  \"model_d\"   rm_objects(model, c(4, \"_d\")) #> Objects matching \"model…\" found in (unnamed) environment: – #> \t model4 model_d  #> Objects matching \"model…\" remaining in (unnamed) environment: – #> \t All gone!"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Size Calculaton — sample_size","title":"Sample Size Calculaton — sample_size","text":"Calculate sample size required population estimate prevalence dichotomous variable given degree absolute precision specified level confidence.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Size Calculaton — sample_size","text":"","code":"sample_size(Pexp = 0.5, d = 0.05, N = NULL, conf_level = 0.95)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Size Calculaton — sample_size","text":"Pexp numeric (numeric vector values) 0 1 representing expected prevalence; default 0.5. d positive numeric (numeric vector values) greater zero representing desired absolute precision; default 0.05 . N either NULL large (theoretically infinite) population positive integer (integer vector values) greater zero representing population size; default NULL. conf_level confidence level(s) required; default 0.95.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Size Calculaton — sample_size","text":"numeric (numeric vector) giving required sample size(s).","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Size Calculaton — sample_size","text":"large study populations, sample size, n, may calculated : - $$n = \\displaystyle \\frac{z^{2}P_{exp}(1-P_{exp})}{d^{2}}$$ \\(P_{exp}\\) expected prevalence, z quantile normal distribution corresponding confidence level required d desired absolute precision. relatively small study populations size N, value n may adjusted thus: - $$n_{adj} = \\displaystyle \\frac{n.N}{n + N}$$","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sample Size Calculaton — sample_size","text":"Sample Size Calculator www.calculator.net useful information derivation.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample Size Calculaton — sample_size","text":"Thrusfield, M., Christley, R. Veterinary Epidemiology 4th Edn. John Wiley & Sons Ltd. 2018. (See Ch.13.) doi:10.1002/9781118280249 .","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/sample_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Size Calculaton — sample_size","text":"","code":"## Infinite population sample_size()         ## desired absolute precision 0.05 (default) #> [1] 385 sample_size(d = 0.1)  ## desired absolute precision 0.1 #> [1] 97  ## Population = 500, 750 or 1000 sample_size(N = c(500L, 750L, 1000L)) #> [1] 218 255 278  ## Expected prevalence = 0.125, 0.25, 0.50, 0.75 or 0.875 ## Note symmetry of resulting sample sizes sample_size(Pexp = c(0.125, 0.25, 0.50, 0.75, 0.875)) #> [1] 169 289 385 289 169  ## Desired absolute precision = 1%, 5%, 10%, 20% sample_size(d = c(0.01, 0.05, 0.1, 0.2)) #> [1] 9604  385   97   25"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewness — skewness","title":"Skewness — skewness","text":"Computes skewness, \\(\\gamma_{1}\\), values x optional adjustment give \\(G_{1}\\), expected populaton value skewness sample.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewness — skewness","text":"","code":"skewness(x, adjust = TRUE)  skew(x, adjust = TRUE)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewness — skewness","text":"x numeric vector. adjust logical, indicating whether x sample population; default TRUE.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skewness — skewness","text":"numeric containing skewness value.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skewness — skewness","text":"Moments samples size n given : - $$m_{r} = \\displaystyle \\frac{\\sum \\left(x - \\overline{x} \\right)^{r}}{n}$$ skewness (skew) \\(\\gamma_{1}\\) numeric variable third moment mean rendered dimensionless dividing cube square root second moment: - $$\\gamma_{1} = \\displaystyle \\frac{m_3}{{\\sqrt{m_{2}}}^3}$$ expected population value skewness \\(G_{1}\\) sample obtained using: - $$G_{1} = \\displaystyle \\frac{\\sqrt{n(n - 1)}}{n-2}\\gamma_{1}$$ skew alias skewness(). (Adapted Crawley, 2012, Joanes Gill, 1998.)","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Skewness — skewness","text":"Crawley, Michael J. (2012) R Book. John Wiley & Sons, Incorporated. ISBN:9780470973929. p.350-352. doi:10.1002/9781118448908 Joanes, D.N., Gill, C.. (1998). Comparing measures sample skewness kurtosis. Journal Royal Statistical Society. Series D (Statistician) 47(1): 183–189. doi:10.1111/1467-9884.00122","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skewness — skewness","text":"","code":"## Heights of 100 randomly selected male university students, adapted from Spiegel and Stephens  ## (Theory and Problems of Statistics. 4th edn. McGraw-Hill. 1999. ISBN 9780071755498).  table(heights) #> heights #> 61 64 67 70 73  #>  5 18 42 27  8   hist(heights, seq(59.5, 74.5, 3))   skewness(heights)  #> [1] -0.1098084  skewness(heights, adjust = FALSE) #> [1] -0.1081544   ## Litter sizes in albino rats (n = 815), data from King (1924; Litter production and  ## the sex ratio in various strains of rats. The Anatomical Record 27(5), 337-366).  table(litter_sizes) #> litter_sizes #>   1   2   3   4   5   6   7   8   9  10  11  12  #>   7  33  58 116 125 126 121 107  56  37  25   4   hist(litter_sizes, 0:12)   skewness(litter_sizes)  #> [1] 0.173038  skewness(litter_sizes, adjust = FALSE) #> [1] 0.1727193"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test of Skewness — skewness.test","title":"Test of Skewness — skewness.test","text":"Computes \\(G_{1}\\), expected population skewness values x using skewness(), performs t-test significance calculates confidence interval.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test of Skewness — skewness.test","text":"","code":"skewness.test(   x,   alternative = c(\"two.sided\", \"less\", \"greater\"),   se_method = c(\"Cramer\", \"simple\"),   conf.level = 0.95 )  skew.test(   x,   alternative = c(\"two.sided\", \"less\", \"greater\"),   se_method = c(\"Cramer\", \"simple\"),   conf.level = 0.95 )  stderr_skewness(n, se_method = c(\"Cramer\", \"simple\"))"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test of Skewness — skewness.test","text":"x numeric vector. alternative character string specifying alternative     hypothesis, must one \"two.sided\" (default),     \"greater\" \"less\".  can specify just initial     letter. se_method character string specifying method calculating standard error; must one \"Cramer\" (default), \"simple\". can specify just initial letter. conf.level confidence level required; default 0.95. n integer, number observations.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test of Skewness — skewness.test","text":"list class \"htest\" containing following components: - statistic value t-statistic. parameter degrees freedom t-statistic. p.value p-value test. conf.int confidence interval skewness (95% specified level). estimate estimate skewness. alternative character string describing alternative hypothesis. method character string \"Skewness t-test\" standard error method used. data.name character string giving name data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test of Skewness — skewness.test","text":"t-statistic given estimated population skewness, \\(G_{1}\\), divided standard error, \\(SE_{G_{1}}\\), : - $$SE_{G_{1}} = \\displaystyle \\sqrt{\\frac{6n(n - 1)}{(n-2)(n+1)(n+3)}}$$ (see e.g., Joanes Gill, 1998; Wright Herrington 2011), alternatively approximation, \\(\\sqrt (6 / n_x)\\), associated probability derived t-distribution \\(n_{x}-2\\) degrees freedom. t-test conducted according Crawley (2012), except default two-tailed test. corresponding confidence interval calculated similarly quantiles t-distribution using alternative conf.level arguments. skew.test() alias skewness.test().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Test of Skewness — skewness.test","text":"confidence interval poorly described available literature, seems somewhat controversial used caution.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test of Skewness — skewness.test","text":"Crawley, Michael J. (2012) R Book. John Wiley & Sons, Incorporated. ISBN:9780470973929. p.350-352. doi:10.1002/9781118448908 Joanes, D.N., Gill, C.. (1998). Comparing measures sample skewness kurtosis. Journal Royal Statistical Society. Series D (Statistician) 47(1): 183–189. doi:10.1111/1467-9884.00122 Wright, D.B., Herrington, J.. (2011). Problematic standard errors confidence intervals skewness kurtosis. Behavior Research Methods 43(1): 8-17. doi:10.3758/s13428-010-0044-x","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/skewness.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test of Skewness — skewness.test","text":"","code":"## Heights of 100 randomly selected male university students, adapted from Spiegel and Stephens  ## (Theory and Problems of Statistics. 4th edn. McGraw-Hill. 1999. ISBN 9780071755498).  table(heights) #> heights #> 61 64 67 70 73  #>  5 18 42 27  8   skewness.test(heights)  #>  #> \tSkewness with t-test (Cramer stderr) #>  #> data:  heights #> t = -0.45492, df = 98, p-value = 0.6502 #> alternative hypothesis: true skewness is not equal to 0 #> 95 percent confidence interval: #>  -0.5888187  0.3692019 #> sample estimates: #>   skewness  #> -0.1098084  #>   length(heights) |> stderr_skewness() #> [1] 0.2413798  skewness.test(heights, se_method = \"simple\") #>  #> \tSkewness with t-test (simple stderr) #>  #> data:  heights #> t = -0.44829, df = 98, p-value = 0.6549 #> alternative hypothesis: true skewness is not equal to 0 #> 95 percent confidence interval: #>  -0.5959017  0.3762849 #> sample estimates: #>   skewness  #> -0.1098084  #>   length(heights) |> stderr_skewness(se_method = \"simple\") #> [1] 0.244949   ## Litter sizes in albino rats (n = 815), data from King (1924; Litter production and  ## the sex ratio in various strains of rats. The Anatomical Record 27(5), 337-366).  table(litter_sizes) #> litter_sizes #>   1   2   3   4   5   6   7   8   9  10  11  12  #>   7  33  58 116 125 126 121 107  56  37  25   4   skewness.test(litter_sizes)  #>  #> \tSkewness with t-test (Cramer stderr) #>  #> data:  litter_sizes #> t = 2.0204, df = 813, p-value = 0.04367 #> alternative hypothesis: true skewness is not equal to 0 #> 95 percent confidence interval: #>  0.004927511 0.341148438 #> sample estimates: #> skewness  #> 0.173038  #>   length(litter_sizes) |> stderr_skewness() #> [1] 0.08564453   ## Compare a range of distributions, each with the three possible alternative hypotheses  list(    uniform = runif(30),    normal = rnorm(30),    lognormal = rlnorm(30),    poisson = rpois(30, lambda = 10),    negbinom = rnbinom(30, mu = 4, size = 2)  ) |>  lapply(\\(distrib)      c(\"less\", \"two.sided\",\"greater\") |>      setNames(nm = _) |>      lapply(\\(altern)          with(skewness.test(distrib, altern),              data.frame(                  Lower = conf.int[1],                  Upper = conf.int[2],                  Skewness = estimate,                  t = statistic,                  df = parameter,                  p = p.value,                  sig = starsig(p.value),                  row.names = NULL              )          )      ) |>      bind_rows(.id = \"Alternative\")) |>  bind_rows(.id = \"Distribution\") #>    Distribution Alternative      Lower     Upper   Skewness          t df #> 1       uniform        less       -Inf 0.5953722 -0.1308276 -0.3064651 28 #> 2       uniform   two.sided -1.0052771 0.7436218 -0.1308276 -0.3064651 28 #> 3       uniform     greater -0.8570275       Inf -0.1308276 -0.3064651 28 #> 4        normal        less       -Inf 0.9638922  0.2376923  0.5567968 28 #> 5        normal   two.sided -0.6367571 1.1121417  0.2376923  0.5567968 28 #> 6        normal     greater -0.4885076       Inf  0.2376923  0.5567968 28 #> 7     lognormal        less       -Inf 5.0202253  4.2940255 10.0588006 28 #> 8     lognormal   two.sided  3.4195761 5.1684749  4.2940255 10.0588006 28 #> 9     lognormal     greater  3.5678256       Inf  4.2940255 10.0588006 28 #> 10      poisson        less       -Inf 0.9089245  0.1827247  0.4280345 28 #> 11      poisson   two.sided -0.6917247 1.0571741  0.1827247  0.4280345 28 #> 12      poisson     greater -0.5434752       Inf  0.1827247  0.4280345 28 #> 13     negbinom        less       -Inf 2.5659773  1.8397774  4.3096983 28 #> 14     negbinom   two.sided  0.9653280 2.7142269  1.8397774  4.3096983 28 #> 15     negbinom     greater  1.1135776       Inf  1.8397774  4.3096983 28 #>               p sig #> 1  3.807590e-01  NS #> 2  7.615179e-01  NS #> 3  6.192410e-01  NS #> 4  7.089551e-01  NS #> 5  5.820899e-01  NS #> 6  2.910449e-01  NS #> 7  1.000000e+00  NS #> 8  8.455014e-11 *** #> 9  4.227507e-11 *** #> 10 6.640498e-01  NS #> 11 6.719005e-01  NS #> 12 3.359502e-01  NS #> 13 9.999089e-01  NS #> 14 1.822470e-04 *** #> 15 9.112352e-05 ***"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/split_to_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Strings In A Data Frame Character Column Into New Rows or Columns — split_to_cols","title":"Split Strings In A Data Frame Character Column Into New Rows or Columns — split_to_cols","text":"Duplicate columns rows data frame splitting strings character column given pattern disaggregate data.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/split_to_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Strings In A Data Frame Character Column Into New Rows or Columns — split_to_cols","text":"","code":"split_to_cols(data, col_to_split, split_to, pattern, remove_parenth = FALSE)  split_to_rows(data, col_to_split, pattern)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/split_to_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Strings In A Data Frame Character Column Into New Rows or Columns — split_to_cols","text":"data data frame, data frame extension (e.g. tibble). col_to_split <data-masking> quoted name character column split. split_to <data-masking> quoted name new character column created data. pattern single character string representing pattern split . split_to_rows() allows use various possibilities pattern argument str_split. remove_parenth logical specifying whether parentheses removed strings new column split_to; default TRUE.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/split_to_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Strings In A Data Frame Character Column Into New Rows or Columns — split_to_cols","text":"tibble data frame based data. split_to_cols(), rows different columns split_to_rows(), columns different rows.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/split_to_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Strings In A Data Frame Character Column Into New Rows or Columns — split_to_cols","text":"Similar sophisticated tidyr function separate_wider_delim based, split_to_cols() trims leading trailing whitespace using str_trim also optionally removes parentheses string newly created column split_to. main motivation creating function, can used conveniently disaggregating addenda strings contained parentheses, see examples. trade-unlike separate_wider_delim(), function split_to_cols() handles single split. BitsnBobs's homegrown split_to_rows() succeeds pattern = \"\\\\r\\\\n\" representing CRLF escape sequence results example, imported Excel file sporting within-cell line breaks, whereas otherwise similar sophisticated tidyr function separate_longer_delim() *. Like separate_longer_delim(), function split_to_rows() handles multiple splits. split_to_rows() split_to_cols() also add convenience trimming leading trailing whitespaces split strings using str_trim, whereas tidyr functions afford luxury. *Note separate_longer_delim() succeed equivalent CRLF hex sequence \"\\u000D\\u000A\"; trimming leading trailing whitespaces may split_to_rows's main advantage.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/split_to_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Strings In A Data Frame Character Column Into New Rows or Columns — split_to_cols","text":"","code":"starwars3 #> # A tibble: 10 × 2 #>    name                  skin_color          #>    <chr>                 <chr>               #>  1 Ackbar                brown mottle        #>  2 Ben Quadinaros        grey, green, yellow #>  3 Gasgano               white, blue         #>  4 Grievous              brown, white        #>  5 Jabba Desilijic Tiure green-tan, brown    #>  6 Nute Gunray           mottled green       #>  7 R2-D2                 white, blue         #>  8 R4-P17                silver, red         #>  9 Shaak Ti              red, blue, white    #> 10 Zam Wesell            fair, green, yellow split_to_rows(starwars3, skin_color, \",\") #> # A tibble: 21 × 2 #>    name                  skin_color   #>    <chr>                 <chr>        #>  1 Ackbar                brown mottle #>  2 Ben Quadinaros        grey         #>  3 Ben Quadinaros        green        #>  4 Ben Quadinaros        yellow       #>  5 Gasgano               white        #>  6 Gasgano               blue         #>  7 Grievous              brown        #>  8 Grievous              white        #>  9 Jabba Desilijic Tiure green-tan    #> 10 Jabba Desilijic Tiure brown        #> # ℹ 11 more rows tidyr::separate_longer_delim(starwars3, skin_color, \",\") #> # A tibble: 21 × 2 #>    name                  skin_color     #>    <chr>                 <chr>          #>  1 Ackbar                \"brown mottle\" #>  2 Ben Quadinaros        \"grey\"         #>  3 Ben Quadinaros        \" green\"       #>  4 Ben Quadinaros        \" yellow\"      #>  5 Gasgano               \"white\"        #>  6 Gasgano               \" blue\"        #>  7 Grievous              \"brown\"        #>  8 Grievous              \" white\"       #>  9 Jabba Desilijic Tiure \"green-tan\"    #> 10 Jabba Desilijic Tiure \" brown\"       #> # ℹ 11 more rows  split_to_cols(starwars3, skin_color, alt_skin_color, \",\") #> # A tibble: 10 × 3 #>    name                  skin_color    alt_skin_color #>    <chr>                 <chr>         <chr>          #>  1 Ackbar                brown mottle  NA             #>  2 Ben Quadinaros        grey          green, yellow  #>  3 Gasgano               white         blue           #>  4 Grievous              brown         white          #>  5 Jabba Desilijic Tiure green-tan     brown          #>  6 Nute Gunray           mottled green NA             #>  7 R2-D2                 white         blue           #>  8 R4-P17                silver        red            #>  9 Shaak Ti              red           blue, white    #> 10 Zam Wesell            fair          green, yellow  tidyr::separate_wider_delim(     starwars3, skin_color, \",\",     names = c(\"skin_color\", \"alt_skin_color\"),     too_few = \"align_start\",     too_many = \"merge\" ) #> # A tibble: 10 × 3 #>    name                  skin_color    alt_skin_color   #>    <chr>                 <chr>         <chr>            #>  1 Ackbar                brown mottle   NA              #>  2 Ben Quadinaros        grey          \" green, yellow\" #>  3 Gasgano               white         \" blue\"          #>  4 Grievous              brown         \" white\"         #>  5 Jabba Desilijic Tiure green-tan     \" brown\"         #>  6 Nute Gunray           mottled green  NA              #>  7 R2-D2                 white         \" blue\"          #>  8 R4-P17                silver        \" red\"           #>  9 Shaak Ti              red           \" blue, white\"   #> 10 Zam Wesell            fair          \" green, yellow\"  starwars3[3, 2]$skin_color <- \"white\\r\\nblue\" starwars3[8, 2]$skin_color <- \"silver\\r\\nred\" starwars3 #> # A tibble: 10 × 2 #>    name                  skin_color            #>    <chr>                 <chr>                 #>  1 Ackbar                \"brown mottle\"        #>  2 Ben Quadinaros        \"grey, green, yellow\" #>  3 Gasgano               \"white\\r\\nblue\"       #>  4 Grievous              \"brown, white\"        #>  5 Jabba Desilijic Tiure \"green-tan, brown\"    #>  6 Nute Gunray           \"mottled green\"       #>  7 R2-D2                 \"white, blue\"         #>  8 R4-P17                \"silver\\r\\nred\"       #>  9 Shaak Ti              \"red, blue, white\"    #> 10 Zam Wesell            \"fair, green, yellow\"  split_to_rows(starwars3, skin_color, \"\\\\r\\\\n\") #> # A tibble: 12 × 2 #>    name                  skin_color          #>    <chr>                 <chr>               #>  1 Ackbar                brown mottle        #>  2 Ben Quadinaros        grey, green, yellow #>  3 Gasgano               white               #>  4 Gasgano               blue                #>  5 Grievous              brown, white        #>  6 Jabba Desilijic Tiure green-tan, brown    #>  7 Nute Gunray           mottled green       #>  8 R2-D2                 white, blue         #>  9 R4-P17                silver              #> 10 R4-P17                red                 #> 11 Shaak Ti              red, blue, white    #> 12 Zam Wesell            fair, green, yellow tidyr::separate_longer_delim(starwars3, skin_color, \"\\\\r\\\\n\") #> # A tibble: 10 × 2 #>    name                  skin_color            #>    <chr>                 <chr>                 #>  1 Ackbar                \"brown mottle\"        #>  2 Ben Quadinaros        \"grey, green, yellow\" #>  3 Gasgano               \"white\\r\\nblue\"       #>  4 Grievous              \"brown, white\"        #>  5 Jabba Desilijic Tiure \"green-tan, brown\"    #>  6 Nute Gunray           \"mottled green\"       #>  7 R2-D2                 \"white, blue\"         #>  8 R4-P17                \"silver\\r\\nred\"       #>  9 Shaak Ti              \"red, blue, white\"    #> 10 Zam Wesell            \"fair, green, yellow\"  starwars3[3, 2]$skin_color <- \"white (blue)\" starwars3[4, 2]$skin_color <- \"brown, [white]\" starwars3[5, 2]$skin_color <- \"green-tan, {brown}\" starwars3[8, 2]$skin_color <- \"white (red]\" starwars3 #> # A tibble: 10 × 2 #>    name                  skin_color          #>    <chr>                 <chr>               #>  1 Ackbar                brown mottle        #>  2 Ben Quadinaros        grey, green, yellow #>  3 Gasgano               white (blue)        #>  4 Grievous              brown, [white]      #>  5 Jabba Desilijic Tiure green-tan, {brown}  #>  6 Nute Gunray           mottled green       #>  7 R2-D2                 white, blue         #>  8 R4-P17                white (red]         #>  9 Shaak Ti              red, blue, white    #> 10 Zam Wesell            fair, green, yellow  split_to_cols(starwars3, skin_color, alt_skin_color, \" \") #> # A tibble: 10 × 3 #>    name                  skin_color alt_skin_color #>    <chr>                 <chr>      <chr>          #>  1 Ackbar                brown      mottle         #>  2 Ben Quadinaros        grey,      green, yellow  #>  3 Gasgano               white      (blue)         #>  4 Grievous              brown,     [white]        #>  5 Jabba Desilijic Tiure green-tan, {brown}        #>  6 Nute Gunray           mottled    green          #>  7 R2-D2                 white,     blue           #>  8 R4-P17                white      (red]          #>  9 Shaak Ti              red,       blue, white    #> 10 Zam Wesell            fair,      green, yellow  split_to_cols(starwars3, skin_color, alt_skin_color, \" \", remove_parenth = TRUE) #> # A tibble: 10 × 3 #>    name                  skin_color alt_skin_color #>    <chr>                 <chr>      <chr>          #>  1 Ackbar                brown      mottle         #>  2 Ben Quadinaros        grey,      green, yellow  #>  3 Gasgano               white      blue           #>  4 Grievous              brown,     white          #>  5 Jabba Desilijic Tiure green-tan, brown          #>  6 Nute Gunray           mottled    green          #>  7 R2-D2                 white,     blue           #>  8 R4-P17                white      red            #>  9 Shaak Ti              red,       blue, white    #> 10 Zam Wesell            fair,      green, yellow  tidyr::separate_wider_delim(     starwars3, skin_color, \" \",     names = c(\"skin_color\", \"alt_skin_color\"),     too_few = \"align_start\",     too_many = \"merge\" ) #> # A tibble: 10 × 3 #>    name                  skin_color alt_skin_color #>    <chr>                 <chr>      <chr>          #>  1 Ackbar                brown      mottle         #>  2 Ben Quadinaros        grey,      green, yellow  #>  3 Gasgano               white      (blue)         #>  4 Grievous              brown,     [white]        #>  5 Jabba Desilijic Tiure green-tan, {brown}        #>  6 Nute Gunray           mottled    green          #>  7 R2-D2                 white,     blue           #>  8 R4-P17                white      (red]          #>  9 Shaak Ti              red,       blue, white    #> 10 Zam Wesell            fair,      green, yellow"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starsig.html","id":null,"dir":"Reference","previous_headings":"","what":"Stars For Statistical Significance — starsig","title":"Stars For Statistical Significance — starsig","text":"Stars statistical significance levels usual R. vectorised function.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starsig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stars For Statistical Significance — starsig","text":"","code":"starsig(p)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starsig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stars For Statistical Significance — starsig","text":"p numeric vector probabilities.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starsig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stars For Statistical Significance — starsig","text":"character vector, length p.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starsig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stars For Statistical Significance — starsig","text":"","code":"(test_seq <- round(10 ^ seq(-4, 0, 0.5), 4)) #> [1] 0.0001 0.0003 0.0010 0.0032 0.0100 0.0316 0.1000 0.3162 1.0000  starsig(test_seq) #> [1] *** *** **  **  *   *   NS  NS  NS  #> Levels: *** ** * . NS  rbind(test_seq, as.character(starsig(test_seq))) #>          [,1]    [,2]    [,3]    [,4]     [,5]   [,6]     [,7]  [,8]     [,9] #> test_seq \"1e-04\" \"3e-04\" \"0.001\" \"0.0032\" \"0.01\" \"0.0316\" \"0.1\" \"0.3162\" \"1\"  #>          \"***\"   \"***\"   \"**\"    \"**\"     \"*\"    \"*\"      \"NS\"  \"NS\"     \"NS\"  data.frame(val = test_seq, sig = starsig(test_seq)) #>      val sig #> 1 0.0001 *** #> 2 0.0003 *** #> 3 0.0010  ** #> 4 0.0032  ** #> 5 0.0100   * #> 6 0.0316   * #> 7 0.1000  NS #> 8 0.3162  NS #> 9 1.0000  NS  rm(test_seq)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars2.html","id":null,"dir":"Reference","previous_headings":"","what":"Starwars Dataset with Separated First Names and Surnames — starwars2","title":"Starwars Dataset with Separated First Names and Surnames — starwars2","text":"Starwars dataset dplyr first names surnames separate columns.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starwars Dataset with Separated First Names and Surnames — starwars2","text":"","code":"starwars2"},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars2.html","id":"","dir":"Reference","previous_headings":"","what":"Starwars Dataset with Separated First Names and Surnames — starwars2","title":"Starwars Dataset with Separated First Names and Surnames — starwars2","text":"data frame 63 rows 12 columns: Firstname Firstname character Surname Surname character height height mass mass height height hair_color hair color skin_color skin color eye_color eye color birth_year year birth sex sex gender gender homeworld homeworld species species","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Starwars Dataset with Separated First Names and Surnames — starwars2","text":"https://dplyr.tidyverse.org/reference/starwars.html","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars3.html","id":null,"dir":"Reference","previous_headings":"","what":"Starwars Dataset with Name and Skin Colour Only — starwars3","title":"Starwars Dataset with Name and Skin Colour Only — starwars3","text":"name skin_colour columns starwars dataset dplyr.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starwars Dataset with Name and Skin Colour Only — starwars3","text":"","code":"starwars3"},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars3.html","id":"","dir":"Reference","previous_headings":"","what":"Starwars Dataset with Name and Skin Colour Only — starwars3","title":"Starwars Dataset with Name and Skin Colour Only — starwars3","text":"data frame 10 rows 2 columns: name Name character skin_color skin color","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/starwars3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Starwars Dataset with Name and Skin Colour Only — starwars3","text":"https://dplyr.tidyverse.org/reference/starwars.html","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/swapsign.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised conditional sign change — swapsign","title":"Vectorised conditional sign change — swapsign","text":"Vectorised function changes sign elements numeric vector, dependent values logical argument length.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/swapsign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised conditional sign change — swapsign","text":"","code":"swapsign(x, negate)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/swapsign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised conditional sign change — swapsign","text":"x numeric vector. negate logical vector length x.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/swapsign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorised conditional sign change — swapsign","text":"numeric vector, length x.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/swapsign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorised conditional sign change — swapsign","text":"","code":"swapsign(1:10, rep(c(FALSE, TRUE), 5)) #>  [1]   1  -2   3  -4   5  -6   7  -8   9 -10  swapsign(1:10, rep(c(1, 0), 5)) #> Error in swapsign(1:10, rep(c(1, 0), 5)): is.logical(negate) is not TRUE"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/wizard.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Unique Values from Data Frame Columns, Sort and Concatenate — wizard","title":"Extract Unique Values from Data Frame Columns, Sort and Concatenate — wizard","text":"wizard() extracts sorts unique values selected column data frame, optionally pastes character string. data_wizard() across columns  data frame.","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/wizard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Unique Values from Data Frame Columns, Sort and Concatenate — wizard","text":"","code":"wizard(data, col, .collapse = NULL, .noquote = FALSE)  data_wizard(data, .collapse = NULL, .noquote = TRUE)"},{"path":"https://mark-eis.github.io/BitsnBobs/reference/wizard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Unique Values from Data Frame Columns, Sort and Concatenate — wizard","text":"data data frame, data frame extension (e.g. tibble). col <data-masking> quoted name character column extract. .collapse optional character string separate results, see paste; default NULL. .noquote logical whether return object class \"noquote\"; default FALSE wizard(), TRUE  data_wizard().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/wizard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Unique Values from Data Frame Columns, Sort and Concatenate — wizard","text":"wizard(), vector type col single character string value .collapse supplied. data_wizard(), list corresponding columns data atomic types, list elements wizard().","code":""},{"path":"https://mark-eis.github.io/BitsnBobs/reference/wizard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Unique Values from Data Frame Columns, Sort and Concatenate — wizard","text":"wizard() can useful within piped sequence quickly extract review sorted, unique contents column optionally collapse single character string using paste providing suitable value .collapse. data_wizard() invokes wizard() columns data one atomic types, ignores columns types shows warning present. .collapse used data_wizard(), columns returned character vectors. information Using wizard.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/BitsnBobs/reference/wizard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Unique Values from Data Frame Columns, Sort and Concatenate — wizard","text":"","code":"starwars |> wizard(homeworld) #>  [1] \"Alderaan\"       \"Aleen Minor\"    \"Bespin\"         \"Bestine IV\"     #>  [5] \"Cato Neimoidia\" \"Cerea\"          \"Champala\"       \"Chandrila\"      #>  [9] \"Concord Dawn\"   \"Corellia\"       \"Coruscant\"      \"Dathomir\"       #> [13] \"Dorin\"          \"Endor\"          \"Eriadu\"         \"Geonosis\"       #> [17] \"Glee Anselm\"    \"Haruun Kal\"     \"Iktotch\"        \"Iridonia\"       #> [21] \"Kalee\"          \"Kamino\"         \"Kashyyyk\"       \"Malastare\"      #> [25] \"Mirial\"         \"Mon Cala\"       \"Muunilinst\"     \"Naboo\"          #> [29] \"Nal Hutta\"      \"Ojom\"           \"Quermia\"        \"Rodia\"          #> [33] \"Ryloth\"         \"Serenno\"        \"Shili\"          \"Skako\"          #> [37] \"Socorro\"        \"Stewjon\"        \"Sullust\"        \"Tatooine\"       #> [41] \"Toydaria\"       \"Trandosha\"      \"Troiken\"        \"Tund\"           #> [45] \"Umbara\"         \"Utapau\"         \"Vulpter\"        \"Zolan\"          #> [49] NA               starwars |> wizard(homeworld, \", \") #> [1] \"Alderaan, Aleen Minor, Bespin, Bestine IV, Cato Neimoidia, Cerea, Champala, Chandrila, Concord Dawn, Corellia, Coruscant, Dathomir, Dorin, Endor, Eriadu, Geonosis, Glee Anselm, Haruun Kal, Iktotch, Iridonia, Kalee, Kamino, Kashyyyk, Malastare, Mirial, Mon Cala, Muunilinst, Naboo, Nal Hutta, Ojom, Quermia, Rodia, Ryloth, Serenno, Shili, Skako, Socorro, Stewjon, Sullust, Tatooine, Toydaria, Trandosha, Troiken, Tund, Umbara, Utapau, Vulpter, Zolan, NA\" starwars |> wizard(homeworld, \", \", TRUE) #> [1] Alderaan, Aleen Minor, Bespin, Bestine IV, Cato Neimoidia, Cerea, Champala, Chandrila, Concord Dawn, Corellia, Coruscant, Dathomir, Dorin, Endor, Eriadu, Geonosis, Glee Anselm, Haruun Kal, Iktotch, Iridonia, Kalee, Kamino, Kashyyyk, Malastare, Mirial, Mon Cala, Muunilinst, Naboo, Nal Hutta, Ojom, Quermia, Rodia, Ryloth, Serenno, Shili, Skako, Socorro, Stewjon, Sullust, Tatooine, Toydaria, Trandosha, Troiken, Tund, Umbara, Utapau, Vulpter, Zolan, NA starwars |> wizard(homeworld, \"\\t\") |> cat() #> Alderaan\tAleen Minor\tBespin\tBestine IV\tCato Neimoidia\tCerea\tChampala\tChandrila\tConcord Dawn\tCorellia\tCoruscant\tDathomir\tDorin\tEndor\tEriadu\tGeonosis\tGlee Anselm\tHaruun Kal\tIktotch\tIridonia\tKalee\tKamino\tKashyyyk\tMalastare\tMirial\tMon Cala\tMuunilinst\tNaboo\tNal Hutta\tOjom\tQuermia\tRodia\tRyloth\tSerenno\tShili\tSkako\tSocorro\tStewjon\tSullust\tTatooine\tToydaria\tTrandosha\tTroiken\tTund\tUmbara\tUtapau\tVulpter\tZolan\tNA starwars |> wizard(homeworld, \"\\n\") |> cat() #> Alderaan #> Aleen Minor #> Bespin #> Bestine IV #> Cato Neimoidia #> Cerea #> Champala #> Chandrila #> Concord Dawn #> Corellia #> Coruscant #> Dathomir #> Dorin #> Endor #> Eriadu #> Geonosis #> Glee Anselm #> Haruun Kal #> Iktotch #> Iridonia #> Kalee #> Kamino #> Kashyyyk #> Malastare #> Mirial #> Mon Cala #> Muunilinst #> Naboo #> Nal Hutta #> Ojom #> Quermia #> Rodia #> Ryloth #> Serenno #> Shili #> Skako #> Socorro #> Stewjon #> Sullust #> Tatooine #> Toydaria #> Trandosha #> Troiken #> Tund #> Umbara #> Utapau #> Vulpter #> Zolan #> NA  data_wizard(mtcars)  #> $mpg #>  [1] 10.4 13.3 14.3 14.7 15.0 15.2 15.5 15.8 16.4 17.3 17.8 18.1 18.7 19.2 19.7 #> [16] 21.0 21.4 21.5 22.8 24.4 26.0 27.3 30.4 32.4 33.9 #>  #> $cyl #> [1] 4 6 8 #>  #> $disp #>  [1]  71.1  75.7  78.7  79.0  95.1 108.0 120.1 120.3 121.0 140.8 145.0 146.7 #> [13] 160.0 167.6 225.0 258.0 275.8 301.0 304.0 318.0 350.0 351.0 360.0 400.0 #> [25] 440.0 460.0 472.0 #>  #> $hp #>  [1]  52  62  65  66  91  93  95  97 105 109 110 113 123 150 175 180 205 215 230 #> [20] 245 264 335 #>  #> $drat #>  [1] 2.76 2.93 3.00 3.07 3.08 3.15 3.21 3.23 3.54 3.62 3.69 3.70 3.73 3.77 3.85 #> [16] 3.90 3.92 4.08 4.11 4.22 4.43 4.93 #>  #> $wt #>  [1] 1.513 1.615 1.835 1.935 2.140 2.200 2.320 2.465 2.620 2.770 2.780 2.875 #> [13] 3.150 3.170 3.190 3.215 3.435 3.440 3.460 3.520 3.570 3.730 3.780 3.840 #> [25] 3.845 4.070 5.250 5.345 5.424 #>  #> $qsec #>  [1] 14.50 14.60 15.41 15.50 15.84 16.46 16.70 16.87 16.90 17.02 17.05 17.30 #> [13] 17.40 17.42 17.60 17.82 17.98 18.00 18.30 18.52 18.60 18.61 18.90 19.44 #> [25] 19.47 19.90 20.00 20.01 20.22 22.90 #>  #> $vs #> [1] 0 1 #>  #> $am #> [1] 0 1 #>  #> $gear #> [1] 3 4 5 #>  #> $carb #> [1] 1 2 3 4 6 8 #>   data_wizard(starwars, \", \")  #> Warning: Omitting `data` column(s) \"films\", \"vehicles\", \"starships\" with non-atomic types. #> $name #> [1] Ackbar, Adi Gallia, Anakin Skywalker, Arvel Crynyd, Ayla Secura, BB8, Bail Prestor Organa, Barriss Offee, Ben Quadinaros, Beru Whitesun Lars, Bib Fortuna, Biggs Darklighter, Boba Fett, Bossk, C-3PO, Captain Phasma, Chewbacca, Cliegg Lars, Cordé, Darth Maul, Darth Vader, Dexter Jettster, Dooku, Dormé, Dud Bolt, Eeth Koth, Finis Valorum, Finn, Gasgano, Greedo, Gregar Typho, Grievous, Han Solo, IG-88, Jabba Desilijic Tiure, Jango Fett, Jar Jar Binks, Jek Tono Porkins, Jocasta Nu, Ki-Adi-Mundi, Kit Fisto, Lama Su, Lando Calrissian, Leia Organa, Lobot, Luke Skywalker, Luminara Unduli, Mace Windu, Mas Amedda, Mon Mothma, Nien Nunb, Nute Gunray, Obi-Wan Kenobi, Owen Lars, Padmé Amidala, Palpatine, Plo Koon, Poe Dameron, Poggle the Lesser, Quarsh Panaka, Qui-Gon Jinn, R2-D2, R4-P17, R5-D4, Ratts Tyerel, Raymus Antilles, Rey, Ric Olié, Roos Tarpals, Rugor Nass, Saesee Tiin, San Hill, Sebulba, Shaak Ti, Shmi Skywalker, Sly Moore, Tarfful, Taun We, Tion Medon, Wat Tambor, Watto, Wedge Antilles, Wicket Systri Warrick, Wilhuff Tarkin, Yarael Poof, Yoda, Zam Wesell #>  #> $height #> [1] 66, 79, 88, 94, 96, 97, 112, 122, 137, 150, 157, 160, 163, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 180, 182, 183, 184, 185, 188, 190, 191, 193, 196, 198, 200, 202, 206, 213, 216, 224, 228, 229, 234, 264, NA #>  #> $mass #> [1] 15, 17, 20, 32, 40, 45, 48, 49, 50, 55, 56.2, 57, 65, 66, 68, 74, 75, 77, 78.2, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 102, 110, 112, 113, 120, 136, 140, 159, 1358, NA #>  #> $hair_color #> [1] auburn, auburn, grey, auburn, white, black, blond, blonde, brown, brown, grey, grey, none, white, NA #>  #> $skin_color #> [1] blue, blue, grey, brown, brown mottle, brown, white, dark, fair, fair, green, yellow, gold, green, green, grey, green-tan, brown, grey, grey, blue, grey, green, yellow, grey, red, light, metal, mottled green, none, orange, pale, red, red, blue, white, silver, red, tan, unknown, white, white, blue, white, red, yellow #>  #> $eye_color #> [1] black, blue, blue-gray, brown, dark, gold, green, yellow, hazel, orange, pink, red, red, blue, unknown, white, yellow #>  #> $birth_year #> [1] 8, 15, 19, 21, 22, 24, 29, 31, 31.5, 33, 37, 40, 41, 41.9, 44, 46, 47, 48, 52, 53, 54, 57, 58, 62, 64, 66, 67, 72, 82, 91, 92, 102, 112, 200, 600, 896, NA #>  #> $sex #> [1] female, hermaphroditic, male, none, NA #>  #> $gender #> [1] feminine, masculine, NA #>  #> $homeworld #> [1] Alderaan, Aleen Minor, Bespin, Bestine IV, Cato Neimoidia, Cerea, Champala, Chandrila, Concord Dawn, Corellia, Coruscant, Dathomir, Dorin, Endor, Eriadu, Geonosis, Glee Anselm, Haruun Kal, Iktotch, Iridonia, Kalee, Kamino, Kashyyyk, Malastare, Mirial, Mon Cala, Muunilinst, Naboo, Nal Hutta, Ojom, Quermia, Rodia, Ryloth, Serenno, Shili, Skako, Socorro, Stewjon, Sullust, Tatooine, Toydaria, Trandosha, Troiken, Tund, Umbara, Utapau, Vulpter, Zolan, NA #>  #> $species #> [1] Aleena, Besalisk, Cerean, Chagrian, Clawdite, Droid, Dug, Ewok, Geonosian, Gungan, Human, Hutt, Iktotchi, Kaleesh, Kaminoan, Kel Dor, Mirialan, Mon Calamari, Muun, Nautolan, Neimodian, Pau'an, Quermian, Rodian, Skakoan, Sullustan, Tholothian, Togruta, Toong, Toydarian, Trandoshan, Twi'lek, Vulptereen, Wookiee, Xexto, Yoda's species, Zabrak, NA #>"}]
