% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boxcox.R
\name{boxcox3}
\alias{boxcox3}
\title{'Function Factory' for Box-Cox Transformation of Data}
\usage{
boxcox3(x)
}
\arguments{
\item{x}{a \verb{numeric vector} containing the data to be transformed.}
}
\value{
Returns a \code{\link[base]{function}} performing Box-Cox transformations on the data \var{x} for
any given value of \eqn{\lambda}.
}
\description{
Function factory to create functions that take \eqn{\lambda} as an argument for performing the Box-Cox transformation
on a given dataset. Taken directly from Wickham (2019)
\href{https://adv-r.hadley.nz/function-factories.html#exercises-34}{Section 10.4.4 Exercises}.
}
\details{
A numeric vector containing the data to be transformed is provided as an argument to this 'function factory',
which returns a function performing the Box-Cox transformation on those data for any given value of \eqn{\lambda}.
The Box-Cox transformation takes the following form: -

if \eqn{\lambda \ne 0}
\deqn{y(\lambda) = \displaystyle \frac{y^\lambda - 1}{\lambda}}{%
      y(&lambda;) = (y<sup>&lambda;</sup> â€“ 1) / &lambda;}

if \eqn{\lambda = 0}
\deqn{y(\lambda) = \log(y)}{%
       y(&lambda;) = log(y)}
}
\examples{
d <- rlnorm(20)              ## Create skewed data
d |> print_lf() |> skew()    ## Inspect data and calculate skewness using BitsnBobs::skew()

bc_func <- boxcox3(d)        ## Create Box-Cox function for the data

bc_func(-1)                  ## Use this function to Box-Cox transform data with various values of lambda
bc_func(0)
bc_func(1)
bc_func(2)
identical(bc_func(0), log(d))  ## bc_func(0) same as log(d)

seq(-3, 3, 1) |>                         ## Create a sequence from -3 to 3
  set_names(\(x) paste("lambda", x)) |>  ## Name the sequence vector using rlang::set_names()
  print_lf() |>                          ## Print with line feed
  map(bc_func) |>                        ## Use purrr::map() to Box-Cox transform the data using each
  print_lf() |>                          ## lambda value in the sequence and return a named list
  map_dbl(skewness) |>                   ## Use purrr::map_dbl() and skewness() to calculate skewness
  print_lf() |>                          ## for each element of the list and return a numeric vector
  abs() |>                               ## Absolute skewness
  which.min()                            ## Which lambda gives minimum absolute skewness?

## lambda 0 (usually) has least absolute skewness, unsurprisingly given these data were lognormally distributed. 

rm(d, bc_func)
}
\references{
Wickham, Hadley (2019) \emph{Advanced R 2nd edition}. CRC Press.
\href{https://adv-r.hadley.nz/index.html}{adv-r.hadley.nz}
}
\seealso{
Other boxcox: 
\code{\link{opt_bc}()}
}
\concept{boxcox}
\keyword{models}
\keyword{regression}
