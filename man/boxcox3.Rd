% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boxcox.R
\name{boxcox3}
\alias{boxcox3}
\title{'Function Factory' for Box-Cox Transformation of Data}
\usage{
boxcox3(x, labile_data = TRUE)
}
\arguments{
\item{x}{a \verb{numeric vector} containing the data to be transformed.}

\item{labile_data}{\code{logical}. If \code{TRUE}, \code{data} are represented in the function environment as a \code{quosure}.
If \code{FALSE}, a copy of \code{data} is saved in the function environment. Default \code{TRUE}.}
}
\value{
Returns a \code{\link[base]{function}} performing Box-Cox transformations on the data \var{x} for
any given value of \eqn{\lambda}.
}
\description{
Function factory to create functions that take \eqn{\lambda} as an argument for performing the Box-Cox transformation
on a given dataset. Adapted from Wickham (2019)
\href{https://adv-r.hadley.nz/function-factories.html#exercises-34}{Section 10.4.4 Exercises}.
}
\details{
A numeric vector containing the data to be transformed is provided as an argument to this 'function factory',
which returns a function performing the Box-Cox transformation on those data for any given value of \eqn{\lambda}.
The Box-Cox transformation takes the following form: -

if \eqn{\lambda \ne 0}
\deqn{y(\lambda) = \displaystyle \frac{y^\lambda - 1}{\lambda}}{%
      y(&lambda;) = (y<sup>&lambda;</sup> â€“ 1) / &lambda;}

if \eqn{\lambda = 0}
\deqn{y(\lambda) = \log(y)}{%
       y(&lambda;) = log(y)}

If \code{labile_data} is \code{TRUE}, \code{data} are represented in the \code{boxcox3()} function environment as a
\code{\link[rlang:topic-quosure]{quosure}}, and functions returned by will automatically refer to the current version of
\code{data} in its original \code{\link[base:environment]{environment}}, usually the calling environment i.e., typically but not
necessarily the global environment. If \code{labile_data} is \code{FALSE}, returned functions refer to a copy of \code{data}
saved in the function environment at the time of execution of \code{boxcox3()}, and will not reflect any subsequent
changes to the original \code{data}.
}
\examples{
## Create skewed data
(d <- rlnorm(20))
## Calculate skewness using BitsnBobs::skew()
d |> skew()
## Box-Cox function for these data
bc_func <- boxcox3(d)

## Box-Cox transform data with various values of lambda
bc_func(-1)
bc_func(0)
bc_func(1)
bc_func(2)
## bc_func(0) same as log(d)
identical(bc_func(0), log(d))

seq(-3, 3, 1) |>                         ## Create a sequence from -3 to 3
  set_names(\(x) paste("lambda", x)) |>  ## Name sequence vector using rlang::set_names()
  print_lf() |>                          ## Print with line feed
  lapply(bc_func) |>                     ## Box-Cox transform data using each lambda value
  print_lf() |>                          ##   in sequence and print the named list
  map_dbl(skewness) |>                   ## Calculate skewness for each element of the list
  print_lf() |>                          ##   and print the numeric vector
  abs() |>                               ## Absolute skewness...
  which.min()                            ##   ...which lambda gives minimum?

## Usually, lambda 0 has least absolute skewness as data were sampled from lognormal distribution

rm(d, bc_func)
}
\references{
Wickham, Hadley (2019) \emph{Advanced R 2nd edition}. CRC Press.
\href{https://adv-r.hadley.nz/index.html}{adv-r.hadley.nz}
}
\seealso{
Other boxcox: 
\code{\link{opt_bc}()}
}
\concept{boxcox}
\keyword{models}
\keyword{regression}
